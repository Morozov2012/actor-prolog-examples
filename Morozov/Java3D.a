--------------------------------------------------------------------
-- Predefined Classes of Actor Prolog                             --
-- (c) 2012 IRE RAS Alexei A. Morozov                             --
--------------------------------------------------------------------

package "Morozov/Java3D":

-- pragma: INCLUDE_JAVA3D_LIBRARIES = ON;

--------------------------------------------------------------------
-- The 'Canvas3D' class is specialized class 'Alpha'.             --
--------------------------------------------------------------------

class 'Canvas3D' (specialized 'Alpha'):

projection_policy		= 'PERSPECTIVE_PROJECTION';
window_resize_policy		= 'PHYSICAL_WORLD';
window_movement_policy		= 'PHYSICAL_WORLD';
visibility_policy		= 'VISIBILITY_DRAW_VISIBLE';
transparency_sorting_policy	= 'TRANSPARENCY_SORT_NONE';
minimum_frame_cycle_time	= 'default';
enable_compatibility_mode	= 'no';
--
field_of_view			= 'default';
front_clip_distance		= 'default';
back_clip_distance		= 'default';
--
enable_scene_antialiasing	= 'no';
enable_depth_buffer_freezing	= 'yes';
enable_local_eye_lighting	= 'yes';
--
-- The implementation of the 'WritableImageProducer' interface:
--
image_encoding_attributes	= {};
--
-- The implementation of the 'DataResourceConsumer' interface:
--
maximal_waiting_time		= 'default';
--
-- The implementation of the 'DimensionedFrame' interface:
--
width				= 'default';
height				= 'default';
--
-- The implementation of the 'DimensionlessFrame' interface:
--
title				= "";
x				= 'default';
y				= 'default';
background_color		= 'default';
use_pixel_measurements		= 'no';
--
-- The implementation of the 'NamedDataResource' interface:
--
backslash_always_is_separator			= 'yes';
accept_only_uniform_resource_identifiers	= 'no';

[
SOURCE:
	"morozov.built_in.Canvas3D";

MODEL:

?action(BehaviorName).
?mouse_clicked(NodeLabels).
?mouse_entered(NodeLabels).
?mouse_exited(NodeLabels).
?mouse_pressed(NodeLabels).
?mouse_released(NodeLabels).
?mouse_dragged(NodeLabels).
?mouse_moved(NodeLabels).
?initialize().
?start().
?stop().

CLAUSES:

set_node(NodeLabel,Node):
	[external "setNode"].
set_transform(NodeLabel,Transform3D):
	[external "setTransform"].
set_translation(NodeLabel,Translation):
	[external "setTranslation"].
set_appearance(NodeLabel,Appearance):
	[external "setAppearance"].
set_coloring_attributes(NodeLabel,ColorSelectionAndShadingModel):
	[external "setColoringAttributes"].
set_font3d(NodeLabel,Font3D):
	[external "setFont3D"].
set_string(NodeLabel,Text):
	[external "setString"].
--
attach_offscreen_canvas():
	[external "attachOffScreenCanvas"].
detach_offscreen_canvas():
	[external "detachOffScreenCanvas"].
--
go_home():
	[external "goHome"].
go_home(PointX,PointY,PointZ):
	[external "goHome"].
--
get_image(BufferedImage):
	[external "getImage"].
get_image(BufferedImage,Width,Height):
	[external "getImage"].
--
set_vpc_to_ec(Transform3D):
	[external "setVPCtoEC"].
reset_vpc_to_ec():
	[external "resetVPCtoEC"].
--
set_projection_policy(ProjectionPolicy):
	[external "setProjectionPolicy"].
set_window_resize_policy(WindowResizePolicy):
	[external "setWindowResizePolicy"].
set_window_movement_policy(WindowMovementPolicy):
	[external "setWindowMovementPolicy"].
set_visibility_policy(VisibilityPolicy):
	[external "setVisibilityPolicy"].
set_transparency_sorting_policy(TransparencySortingPolicy):
	[external "setTransparencySortingPolicy"].
set_minimum_frame_cycle_time(WaitingInterval):
	[external "setMinimumFrameCycleTime"].
set_enable_compatibility_mode(YesNo):
	[external "setEnableCompatibilityMode"].
set_field_of_view(FieldOfView):
	[external "setFieldOfView"].
set_front_clip_distance(ClipDistance):
	[external "setFrontClipDistance"].
set_back_clip_distance(ClipDistance):
	[external "setBackClipDistance"].
set_enable_scene_antialiasing(YesNo):
	[external "setEnableSceneAntialiasing"].
set_enable_depth_buffer_freezing(YesNo):
	[external "setEnableDepthBufferFreezing"].
set_enable_local_eye_lighting(YesNo):
	[external "setEnableLocalEyeLighting"].
--
get_projection_policy() = ProjectionPolicy:
	[external "getProjectionPolicy"].
get_window_resize_policy() = WindowResizePolicy:
	[external "getWindowResizePolicy"].
get_window_movement_policy() = WindowMovementPolicy:
	[external "getWindowMovementPolicy"].
get_visibility_policy() = VisibilityPolicy:
	[external "getVisibilityPolicy"].
get_transparency_sorting_policy() = TransparencySortingPolicy:
	[external "getTransparencySortingPolicy"].
get_minimum_frame_cycle_time() = WaitingInterval:
	[external "getMinimumFrameCycleTime"].
get_enable_compatibility_mode() = YesNo:
	[external "getEnableCompatibilityMode"].
get_field_of_view() = FieldOfView:
	[external "getFieldOfView"].
get_front_clip_distance() = ClipDistance:
	[external "getFrontClipDistance"].
get_back_clip_distance() = ClipDistance:
	[external "getBackClipDistance"].
get_enable_scene_antialiasing() = YesNo:
	[external "getEnableSceneAntialiasing"].
get_enable_depth_buffer_freezing() = YesNo:
	[external "getEnableDepthBufferFreezing"].
get_enable_local_eye_lighting() = YesNo:
	[external "getEnableLocalEyeLighting"].
--
-- The implementation of the 'WritableImageProducer' interface:
--
set_image_encoding_attributes(ImageAttributes):
	[external "setImageEncodingAttributes"].
get_image_encoding_attributes() = ImageAttributes:
	[external "getImageEncodingAttributes"].
--
-- The implementation of the 'DataResourceConsumer' interface:
--
set_maximal_waiting_time(WaitingInterval):
	[external "setMaximalWaitingTime"].
get_maximal_waiting_time() = WaitingInterval:
	[external "getMaximalWaitingTime"].
--
-- The implementation of the 'CustomControl' interface:
--
refine_width(WidthToHeightRatio):
	[external "refineWidth"].
refine_height(WidthToHeightRatio):
	[external "refineHeight"].
--
-- The implementation of the 'DimensionedFrame' interface:
--
clear:
	[external "clear"].
set_width(Width):
	[external "setWidth"].
get_width() = Width:
	[external "getWidth"].
set_height(Height):
	[external "setHeight"].
get_height() = Height:
	[external "getHeight"].
set_default_size(Width,Height):
	[external "setDefaultSize"].
get_default_size(Width,Height):
	[external "getDefaultSize"].
set_actual_size(Width,Height):
	[external "setActualSize"].
get_actual_size(Width,Height):
	[external "getActualSize"].
get_size_in_pixels(Width,Height):
	[external "getSizeInPixels"].
set_default_bounds(X,Y,Width,Height):
	[external "setDefaultBounds"].
get_default_bounds(X,Y,Width,Height):
	[external "getDefaultBounds"].
set_actual_bounds(X,Y,Width,Height):
	[external "setActualBounds"].
get_actual_bounds(X,Y,Width,Height):
	[external "getActualBounds"].
get_bounds_in_pixels(X,Y,Width,Height):
	[external "getBoundsInPixels"].
--
-- The implementation of the 'DimensionlessFrame' interface:
--
set_title(Title):
	[external "setTitle"].
get_title() = FrameTitle:
	[external "getTitle"].
set_x(X):
	[external "setX"].
get_x() = X:
	[external "getX"].
set_y(Y):
	[external "setY"].
get_y() = Y:
	[external "getY"].
set_default_position(X,Y):
	[external "setDefaultPosition"].
get_default_position(X,Y):
	[external "getDefaultPosition"].
set_actual_position(X,Y):
	[external "setActualPosition"].
get_actual_position(X,Y):
	[external "getActualPosition"].
get_position_in_pixels(X,Y):
	[external "getPositionInPixels"].
set_background_color(Color):
	[external "setBackgroundColor"].
get_background_color() = Color:
	[external "getBackgroundColor"].
set_use_pixel_measurements(YesNo):
	[external "setUsePixelMeasurements"].
get_use_pixel_measurements() = YesNo:
	[external "getUsePixelMeasurements"].
--
-- The implementation of the 'DisplayableFrame' interface:
--
show:
	[external "show"].
show(BranchGroup):
	[external "show"].
show(BranchGroupAndDummyArguments*):
	[external "show"].
redraw:
	[external "redraw"].
hide:
	[external "hide"].
maximize:
	[external "maximize"].
minimize:
	[external "minimize"].
restore:
	[external "restore"].
is_visible:
	[external "isVisible"].
is_hidden:
	[external "isHidden"].
is_maximized:
	[external "isMaximized"].
is_minimized:
	[external "isMinimized"].
is_restored:
	[external "isRestored"].
--
-- The implementation of the 'NamedDataResource' interface:
--
set_backslash_always_is_separator(YesNo):
	[external "setBackslashAlwaysIsSeparator"].
get_backslash_always_is_separator() = YesNo:
	[external "getBackslashAlwaysIsSeparator"].
set_accept_only_uniform_resource_identifiers(YesNo):
	[external "setAcceptOnlyUniformResourceIdentifiers"].
get_accept_only_uniform_resource_identifiers() = YesNo:
	[external "getAcceptOnlyUniformResourceIdentifiers"].
--
-- The default implementation of programmer-defined clauses:
--
action(BehaviorName):
	[external "action"].
--
mouse_clicked(NodeLabels):
	[external "mouseClicked"].
mouse_entered(NodeLabels):
	[external "mouseEntered"].
mouse_exited(NodeLabels):
	[external "mouseExited"].
mouse_pressed(NodeLabels):
	[external "mousePressed"].
mouse_released(NodeLabels):
	[external "mouseReleased"].
mouse_dragged(NodeLabels):
	[external "mouseDragged"].
mouse_moved(NodeLabels):
	[external "mouseMoved"].
--
initialize:
	[external "initialize"].
start:
	[external "start"].
stop:
	[external "stop"].
]

--------------------------------------------------------------------
-- The 'BufferedScene' class is specialized                       --
-- class 'DataAbstraction'.                                       --
--------------------------------------------------------------------

class 'BufferedScene' (specialized 'DataAbstraction'):
--
-- The implementation of the 'DataResourceConsumer' interface:
--
maximal_waiting_time		= 'default';
--
-- The implementation of the 'OperatingSystemResource' interface:
--
name				= "a-prolog.obj";
extension			= ".obj";
--
-- The implementation of the 'AccessibleDataResource' interface:
--
character_set			= 'none';
--
-- The implementation of the 'NamedDataResource' interface:
--
backslash_always_is_separator			= 'yes';
accept_only_uniform_resource_identifiers	= 'no';

[
SOURCE:
	"morozov.built_in.BufferedScene";

CLAUSES:

load:
	[external "load"].
load(FileName):
	[external "load"].
--
save:
	[external "save"].
save(FileName):
	[external "save"].
--
set_scene_group(BranchGroup):
	[external "setSceneGroup"].
--
set_binary(Binary):
	[external "setBinary"].
get_binary() = Binary:
	[external "getBinary"].
--
-- The implementation of the 'DataResourceConsumer' interface:
--
set_maximal_waiting_time(WaitingInterval):
	[external "setMaximalWaitingTime"].
get_maximal_waiting_time() = WaitingInterval:
	[external "getMaximalWaitingTime"].
--
-- The implementation of the 'OperatingSystemResource' interface:
--
delete:
	[external "delete"].
delete(FileName):
	[external "delete"].
rename(NewName):
	[external "rename"].
rename(OldName,NewName):
	[external "rename"].
copy(Destination):
	[external "copy"].
copy(Origin,Destination):
	[external "copy"].
is_standard_file:
	[external "isStandardFile"].
is_standard_file(FileName):
	[external "isStandardFile"].
set_current_directory(Path):
	[external "setCurrentDirectory"].
get_current_directory() = Path:
	[external "getCurrentDirectory"].
extract_path(Path,FileName):
	[external "extractPath"].
extract_path(OldFileName,Path,NewFileName):
	[external "extractPath"].
extract_extension(Name,Extension):
	[external "extractExtension"].
extract_extension(FileName,Name,Extension):
	[external "extractExtension"].
replace_extension(Extension) = NewFileName:
	[external "replaceExtension"].
replace_extension(OldFileName,Extension) = NewFileName:
	[external "replaceExtension"].
set_name(Name):
	[external "setName"].
get_name() = Name:
	[external "getName"].
set_extension(Extension):
	[external "setExtension"].
get_extension() = Extension:
	[external "getExtension"].
--
-- The implementation of the 'AccessibleDataResource' interface:
--
does_exist:
	[external "doesExist"].
does_exist(FileName):
	[external "doesExist"].
is_local_resource:
	[external "isLocalResource"].
is_local_resource(FileName):
	[external "isLocalResource"].
get_full_name = FullName:
	[external "getFullName"].
get_full_name(ShortName) = FullName:
	[external "getFullName"].
get_URL = FileName:
	[external "getURL"].
get_URL(ShortName) = FullName:
	[external "getURL"].
set_character_set(CharacterSet):
	[external "setCharacterSet"].
get_character_set() = CharacterSet:
	[external "getCharacterSet"].
--
-- The implementation of the 'NamedDataResource' interface:
--
set_backslash_always_is_separator(YesNo):
	[external "setBackslashAlwaysIsSeparator"].
get_backslash_always_is_separator() = YesNo:
	[external "getBackslashAlwaysIsSeparator"].
set_accept_only_uniform_resource_identifiers(YesNo):
	[external "setAcceptOnlyUniformResourceIdentifiers"].
get_accept_only_uniform_resource_identifiers() = YesNo:
	[external "getAcceptOnlyUniformResourceIdentifiers"].
]
