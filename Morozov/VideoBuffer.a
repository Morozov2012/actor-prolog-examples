--------------------------------------------------------------------
-- Predefined Classes of Actor Prolog                             --
-- (c) 2018 IRE RAS Alexei A. Morozov                             --
--------------------------------------------------------------------

package "Morozov/VideoBuffer":

--------------------------------------------------------------------
-- The 'ThermalDataAcquisitionBuffer' class is specialized        --
-- class 'ZoomDataAcquisitionBuffer'.                             --
--------------------------------------------------------------------

class 'ThermalDataAcquisitionBuffer'

(specialized 'ZoomDataAcquisitionBuffer'):

autoranging_mode				= 'on';
averaging_mode					= 'off';
--
double_color_map_mode				= 'off';
main_color_map					= 'PURPLE';
auxiliary_color_map				= 'GRAY';
--
lower_temperature_bound				= -10.0;
upper_temperature_bound				= 100.0;
lower_main_temperature_quantile			= 0.0;
upper_main_temperature_quantile			= 100.0;
lower_auxiliary_temperature_quantile		= 0.0;
upper_auxiliary_temperature_quantile		= 100.0;
--
use_recorded_temperature_range_commands		= 'no';
use_recorded_color_map_commands			= 'no';
--
[
SOURCE:
	"morozov.built_in.ThermalDataAcquisitionBuffer";

CLAUSES:
--
get_delivered_color_maps(MainColorMap,AuxiliaryColorMap):
	[external "getDeliveredColorMaps"].
--
set_autoranging_mode(OnOff):
	[external "setAutorangingMode"].
get_autoranging_mode() = OnOff:
	[external "getAutorangingMode"].
--
set_averaging_mode(OnOff):
	[external "setAveragingMode"].
get_averaging_mode() = OnOff:
	[external "getAveragingMode"].
--
set_double_color_map_mode(OnOff):
	[external "setDoubleColorMapMode"].
get_double_color_map_mode() = OnOff:
	[external "getDoubleColorMapMode"].
--
set_main_color_map(DetailedColorMap):
	[external "setMainColorMap"].
get_main_color_map() = DetailedColorMap:
	[external "getMainColorMap"].
--
set_auxiliary_color_map(DetailedColorMap):
	[external "setAuxiliaryColorMap"].
get_auxiliary_color_map() = DetailedColorMap:
	[external "getAuxiliaryColorMap"].
--
set_lower_temperature_bound(Temperature):
	[external "setLowerTemperatureBound"].
get_lower_temperature_bound() = Temperature:
	[external "getLowerTemperatureBound"].
--
set_upper_temperature_bound(Temperature):
	[external "setUpperTemperatureBound"].
get_upper_temperature_bound() = Temperature:
	[external "getUpperTemperatureBound"].
--
set_lower_main_temperature_quantile(Temperature):
	[external "setLowerMainTemperatureQuantile"].
get_lower_main_temperature_quantile() = Temperature:
	[external "getLowerMainTemperatureQuantile"].
--
set_upper_main_temperature_quantile(Temperature):
	[external "setUpperMainTemperatureQuantile"].
get_upper_main_temperature_quantile() = Temperature:
	[external "getUpperMainTemperatureQuantile"].
--
set_lower_auxiliary_temperature_quantile(Temperature):
	[external "setLowerAuxiliaryTemperatureQuantile"].
get_lower_auxiliary_temperature_quantile() = Temperature:
	[external "getLowerAuxiliaryTemperatureQuantile"].
--
set_upper_auxiliary_temperature_quantile(Temperature):
	[external "setUpperAuxiliaryTemperatureQuantile"].
get_upper_auxiliary_temperature_quantile() = Temperature:
	[external "getUpperAuxiliaryTemperatureQuantile"].
--
set_use_recorded_temperature_range_commands(YesNo):
	[external "setUseRecordedTemperatureRangeCommands"].
get_use_recorded_temperature_range_commands() = YesNo:
	[external "getUseRecordedTemperatureRangeCommands"].
--
set_use_recorded_color_map_commands(YesNo):
	[external "setUseRecordedColorMapCommands"].
get_use_recorded_color_map_commands() = YesNo:
	[external "getUseRecordedColorMapCommands"].
]

--------------------------------------------------------------------
-- The 'ZoomDataAcquisitionBuffer' class is                       --
-- specialized class 'DataAcquisitionBuffer'.                     --
--------------------------------------------------------------------

class 'ZoomDataAcquisitionBuffer'

(specialized 'DataAcquisitionBuffer'):

constant:
--
zoom_image				= 'no';
zooming_coefficient			= 5.0;
use_recorded_zooming_commands		= 'no';
--
[
SOURCE:
	"morozov.built_in.ZoomDataAcquisitionBuffer";

CLAUSES:
--
set_zoom_image(YesNo):
	[external "setZoomImage"].
get_zoom_image() = YesNo:
	[external "getZoomImage"].
--
set_zooming_coefficient(YesNo):
	[external "setZoomingCoefficient"].
get_zooming_coefficient() = YesNo:
	[external "getZoomingCoefficient"].
--
set_use_recorded_zooming_commands(YesNo):
	[external "setUseRecordedZoomingCommands"].
get_use_recorded_zooming_commands() = YesNo:
	[external "getUseRecordedZoomingCommands"].
]

--------------------------------------------------------------------
-- The 'DataAcquisitionBuffer' class is                           --
-- specialized class 'DataAbstraction'.                           --
--------------------------------------------------------------------

class 'DataAcquisitionBuffer' (specialized 'ReadWriteBuffer'):
--
constant:
--
operating_mode				= 'LISTENING';
--
connection_attempt_period		= 'default';
maximal_errors_quantity			= 100;
--
[
SOURCE:
	"morozov.built_in.DataAcquisitionBuffer";

CLAUSES:
--
set_operating_mode(DataAcquisitionBufferOperatingMode):
	[external "setOperatingMode"].
get_operating_mode() = DataAcquisitionBufferOperatingMode:
	[external "getOperatingMode"].
--
recent_data_acquisition_error(ExceptionName):
	[external "recentDataAcquisitionError"].
--
set_connection_attempt_period(ActionPeriod):
	[external "setConnectionAttemptPeriod"].
get_connection_attempt_period() = ActionPeriod:
	[external "getConnectionAttemptPeriod"].
--
set_maximal_errors_quantity(NumberOfErrors):
	[external "setMaximalErrorsQuantity"].
get_maximal_errors_quantity() = NumberOfErrors:
	[external "getMaximalErrorsQuantity"].
]

--------------------------------------------------------------------
-- The 'MultimediaBuffer' class is                                --
-- specialized class 'ReadWriteBuffer'.                           --
--------------------------------------------------------------------

class 'MultimediaBuffer' (specialized 'ReadWriteBuffer'):

constant:
--
operating_mode			= 'READING';

[
SOURCE:
	"morozov.built_in.MultimediaBuffer";

CLAUSES:
--
open:
	[external "open"].
open(FileName):
	[external "open"].
--
close:
	[external "close"].
--
assign_frame_time(TimeInMilliseconds):
	[external "assignFrameTime"].
--
insert_data_frame(ComponentName,ReadWriteBuffer):
	[external "insertDataFrame"].
insert_settings_frame(ComponentName,ReadWriteBuffer):
	[external "insertSettingsFrame"].
insert_term(ComponentName,Term):
	[external "insertTerm"].
insert_label(ComponentName):
	[external "insertLabel"].
--
get_recent_frame_number(Number):
	[external "getRecentFrameNumber"].
get_recent_frame_time(Milliseconds):
	[external "getRecentFrameTime"].
get_recent_frame_relative_time(Milliseconds):
	[external "getRecentFrameRelativeTime"].
get_recent_frame_rate(FrameRate):
	[external "getRecentFrameRate"].
--
retrieve_frame(ComponentName,ReadWriteBuffer):
	[external "retrieveFrame"].
retrieve_term(ComponentName) = Term:
	[external "retrieveTerm"].
--
delete_component(ComponentName):
	[external "deleteComponent"].
--
has_component(ComponentName):
	[external "hasComponent"].
frame_is_formed:
	[external "frameIsFormed"].
is_data_frame:
	[external "isDataFrame"].
is_control_frame:
	[external "isControlFrame"].
--
record_data_frame:
	[external "recordDataFrame"].
record_control_frame:
	[external "recordControlFrame"].
--
set_operating_mode(MultimediaBufferOperatingMode):
	[external "setOperatingMode"].
get_operating_mode() = MultimediaBufferOperatingMode:
	[external "getOperatingMode"].
]

--------------------------------------------------------------------
-- The 'ReadWriteBuffer' class is                                 --
-- specialized class 'DataAbstraction'.                           --
--------------------------------------------------------------------

class 'ReadWriteBuffer' (specialized 'DataAbstraction'):
--
constant:
--
description				= 'default';
copyright				= 'default';
registration_date			= 'default';
registration_time			= 'default';
--
write_buffer_size			= 50;
read_buffer_size			= 0;
--
slow_motion_coefficient			= 1;
maximal_frame_delay			= 'default';
--
output_debug_information		= 1;
--
-- The implementation of the 'WritableImageProducer' interface:
--
image_encoding_attributes	= {};
--
-- The implementation of the 'DataResourceConsumer' interface:
--
maximal_waiting_time		= 'default';
--
-- The implementation of the 'OperatingSystemResource' interface:
--
name				= "a-prolog.ap2j";
extension			= ".ap2j";
--
-- The implementation of the 'AccessibleDataResource' interface:
--
character_set			= 'none';
--
-- The implementation of the 'NamedDataResource' interface:
--
backslash_always_is_separator			= 'yes';
accept_only_uniform_resource_identifiers	= 'no';
--
[
SOURCE:
	"morozov.built_in.ReadWriteBuffer";

MODEL:

?frame_obtained().
?data_transfer_completion().
?buffer_overflow().
?buffer_deallocation().
?data_transfer_error(ExceptionName).

CLAUSES:
--
start:
	[external "start"].
pause:
	[external "pause"].
stop:
	[external "stop"].
--
is_open:
	[external "isOpen"].
is_active:
	[external "isActive"].
is_suspended:
	[external "isSuspended"].
is_committed:
	[external "isCommitted"].
contains_new_frame:
	[external "containsNewFrame"].
--
eof:
	[external "eof"].
--
commit:
	[external "commit"].
--
request_buffered_frame(NumberOfFrameInTheBuffer):
	[external "requestBufferedFrame"].
--
retrieve_timed_frame(TimeInMilliseconds):
	[external "retrieveTimedFrame"].
--
reset_all_counters:
	[external "resetAllCounters"].
reset_frame_rate:
	[external "resetFrameRate"].
--
get_delivered_description(Text):
	[external "getDeliveredDescription"].
get_delivered_copyright(Text):
	[external "getDeliveredCopyright"].
get_delivered_registration_date(Text):
	[external "getDeliveredRegistrationDate"].
get_delivered_registration_time(Text):
	[external "getDeliveredRegistrationTime"].
--
recent_reading_error(NumberOfFrameToBeRead,ExceptionName):
	[external "recentReadingError"].
recent_writing_error(NumberOfFrameToBeWriten,ExceptionName):
	[external "recentWritingError"].
--
set_description(TextAttribute):
	[external "setDescription"].
get_description() = TextAttribute:
	[external "getDescription"].
--
set_copyright(TextAttribute):
	[external "setCopyright"].
get_copyright() = TextAttribute:
	[external "getCopyright"].
--
set_registration_date(TextAttribute):
	[external "setRegistrationDate"].
get_registration_date() = TextAttribute:
	[external "getRegistrationDate"].
--
set_registration_time(TextAttribute):
	[external "setRegistrationTime"].
get_registration_time() = TextAttribute:
	[external "getRegistrationTime"].
--
set_write_buffer_size(Size):
	[external "setWriteBufferSize"].
get_write_buffer_size() = Size:
	[external "getWriteBufferSize"].
--
set_read_buffer_size(Size):
	[external "setReadBufferSize"].
get_read_buffer_size() = Size:
	[external "getReadBufferSize"].
--
set_slow_motion_coefficient(Coefficient):
	[external "setSlowMotionCoefficient"].
get_slow_motion_coefficient() = Coefficient:
	[external "getSlowMotionCoefficient"].
--
set_maximal_frame_delay(Milliseconds):
	[external "setMaximalFrameDelay"].
get_maximal_frame_delay() = Milliseconds:
	[external "getMaximalFrameDelay"].
--
set_output_debug_information(VerbosityLevel):
	[external "setOutputDebugInformation"].
get_output_debug_information() = VerbosityLevel:
	[external "getOutputDebugInformation"].
--
-- The implementation of the 'WritableImageProducer' interface:
--
set_image_encoding_attributes(ImageAttributes):
	[external "setImageEncodingAttributes"].
get_image_encoding_attributes() = ImageAttributes:
	[external "getImageEncodingAttributes"].
--
-- The implementation of the 'DataResourceConsumer' interface:
--
set_maximal_waiting_time(TimeInterval):
	[external "setMaximalWaitingTime"].
get_maximal_waiting_time() = TimeInterval:
	[external "getMaximalWaitingTime"].
--
-- The implementation of the 'OperatingSystemResource' interface:
--
delete:
	[external "delete"].
delete(FileName):
	[external "delete"].
rename(NewName):
	[external "rename"].
rename(OldName,NewName):
	[external "rename"].
copy(Destination):
	[external "copy"].
copy(Origin,Destination):
	[external "copy"].
is_standard_file:
	[external "isStandardFile"].
is_standard_file(FileName):
	[external "isStandardFile"].
set_current_directory(Path):
	[external "setCurrentDirectory"].
get_current_directory() = Path:
	[external "getCurrentDirectory"].
extract_path(Path,FileName):
	[external "extractPath"].
extract_path(OldFileName,Path,NewFileName):
	[external "extractPath"].
extract_extension(Name,Extension):
	[external "extractExtension"].
extract_extension(FileName,Name,Extension):
	[external "extractExtension"].
replace_extension(Extension) = NewFileName:
	[external "replaceExtension"].
replace_extension(OldFileName,Extension) = NewFileName:
	[external "replaceExtension"].
set_name(Name):
	[external "setName"].
get_name() = Name:
	[external "getName"].
set_extension(Extension):
	[external "setExtension"].
get_extension() = Extension:
	[external "getExtension"].
--
-- The implementation of the 'AccessibleDataResource' interface:
--
does_exist:
	[external "doesExist"].
does_exist(FileName):
	[external "doesExist"].
is_local_resource:
	[external "isLocalResource"].
is_local_resource(FileName):
	[external "isLocalResource"].
get_full_name = FullName:
	[external "getFullName"].
get_full_name(ShortName) = FullName:
	[external "getFullName"].
get_URL = FileName:
	[external "getURL"].
get_URL(ShortName) = FullName:
	[external "getURL"].
set_character_set(CharacterSet):
	[external "setCharacterSet"].
get_character_set() = CharacterSet:
	[external "getCharacterSet"].
--
-- The implementation of the 'NamedDataResource' interface:
--
set_backslash_always_is_separator(YesNo):
	[external "setBackslashAlwaysIsSeparator"].
get_backslash_always_is_separator() = YesNo:
	[external "getBackslashAlwaysIsSeparator"].
set_accept_only_uniform_resource_identifiers(YesNo):
	[external "setAcceptOnlyUniformResourceIdentifiers"].
get_accept_only_uniform_resource_identifiers() = YesNo:
	[external "getAcceptOnlyUniformResourceIdentifiers"].
--
-- The default implementation of programmer-defined clauses:
--
frame_obtained:
	[external "frameObtained"].
data_transfer_completion:
	[external "dataTransferCompletion"].
buffer_overflow:
	[external "bufferOverflow"].
buffer_deallocation:
	[external "bufferDeallocation"].
data_transfer_error(ExceptionName):
	[external "dataTransferError"].
]
