-------------------------------------------
--                                       --
--         Actor Prolog lessons          --
--      (c) 2015 Alexei A. Morozov       --
--                                       --
-- The topic: Basics of the structured   --
-- logic programming. Ground, reference, --
-- and mixed domains. An example of a    --
-- binary sorting with the help of       --
-- reference domains.                    --
--                                       --
-- In this example, a binary tree with   --
-- deletion of repeated elements is used --
-- for the binary sorting of a list of   --
-- terms.                                --
--                                       --
-- The following basic concepts of the   --
-- structured logic programming are used --
-- in this example:                      --
-- 1) A disassembling of a list;         --
-- 2) An assembling of a list with the   --
-- help of the recursion with the input  --
-- argument;                             --
-- 3) An output argument;                --
-- 4) Reference domains.                 --
--                                       --
-- A new basic concept of the structured --
-- logic programming is used in this     --
-- example:                              --
-- 5) A stepwise instantiation of a      --
-- non-ground term.                      --
--                                       --
-- The following basic elements are      --
-- auxiliary / not important in this     --
-- example:                              --
-- 6) Cuts;                              --
-- 7) Classes.                           --
--                                       --
-- Questions: Please consider the        --
-- step-by-step modification of the      --
-- binary tree and explain how does the  --
-- insert_element predicate work? Please --
-- explain why does this program sort    --
-- the elements of the list in the       --
-- inverse order? Please modify the      --
-- program to sort the elements of the   --
-- list in the direct order.             --
--                                       --
-------------------------------------------

class 'Main' (specialized 'DemoConsole'):
[

DOMAINS:

reference:

BTree	= b(N,BTree,BTree); 'leaf'.
N	= INTEGER.

mixed:

List	= N*.

PREDICATES:

imperative:

sort_list(List,List)		- (i,o);
create_tree(BTree)		- (o);
list_to_tree(List,BTree)	- (i,i);
insert_element(N,BTree)		- (i,i);
tree_to_list(BTree,List,List)	- (i,i,o);

determ:

'<'(N,N)			- (i,i);
'>'(N,N)			- (i,i);

CLAUSES:

goal:-
	L1== [1,5,1,3,2,4,5,2],
	writeln("L1 = ",L1),
	sort_list(L1,L2),
	writeln("L2 = ",L2).

sort_list(L1,L2):-
	create_tree(Tree),
	list_to_tree(L1,Tree),
	tree_to_list(Tree,[],L2).

create_tree(_).

list_to_tree([],_).
list_to_tree([H|Rest],Tree):-
	insert_element(H,Tree),
	writeln(Tree),
	list_to_tree(Rest,Tree).

insert_element(N,b(N,_,_)):-!.
insert_element(N1,b(N2,Left,_)):-
	N1 < N2,!,
	insert_element(N1,Left).
insert_element(N1,b(N2,_,Right)):-
	N1 > N2,!,
	insert_element(N1,Right).
insert_element(_,_):-
	writeln("Error.").

tree_to_list('leaf',List,List):-!.
tree_to_list(b(N,Left,Right),L1,L3):-!,
	tree_to_list(Left,L1,L2),
	tree_to_list(Right,[N|L2],L3).
tree_to_list(_,_,[]):-
	writeln("Error.").
]
