-----------------------------------------------------------------------
--                An example of Actor Prolog program.                --
--              (c) 2011, IRE RAS, Alexei A. Morozov.                --
--     An implementation of the Concurrent Sorting Algorithm.        --
-----------------------------------------------------------------------
--                                                                   --
-- Pentium Q9450, 2.67GHz, 3.25GB, Windows XP, SP3 (Home)            --
-- ======================================================            --
-- Socket775 ASUS "P5K/EPU" (iP35, 4xDDR2, U133, SATA II, 2xPCI-E,   --
-- SB, 1Gbit LAN, IEEE1394a, USB2.0, ATX)                            --
-- Intel "Core 2 Quad Q9450" (2.66GHz, 2x6MB, 1333MHz, EM64T)        --
-- 2 x 2GB DDR2 SDRAM Kingston "ValueRAM" KVR800D2N5/2G (PC6400,     --
-- 800MHz, CL5)                                                      --
--                                                                   --
-- EXE file produced by the Actor Prolog system:                     --
--                                                                   --
-- One iteration takes 1420 msec                                     --
-- [0,2,4,6,7,8,10,11,11,17,18,18,21,27,27,28,28,28,29,31,32,33,37,  --
-- 39,40,46,47,51,53,53,55,59,61,63,65,66,74,74,75,81,82,83,85,85,   --
-- 90,92,94,95,99,99]                                                --
--                                                                   --
-- java version "1.7.0"                                              --
-- Java(TM) SE Runtime Environment (build 1.7.0-b147)                --
-- Java HotSpot(TM) Server VM (build 21.0-b17, mixed mode, sharing)  --
--                                                                   --
-- === BigInteger ===                                                --
-- java -Xrs -XX:+UseNUMA -server -Xbatch -jar main.jar              --
--                                                                   --
-- One iteration takes 31 msec                                       --
-- [0,66,90,94]                                                      --
-- One iteration takes 515 msec                                      --
-- [0,2,4,6,7,8,10,11,11,17,18,18,21,27,27,28,28,28,29,31,32,33,37,  --
-- 39,40,46,47,51,53,53,55,59,61,63,65,66,74,74,75,81,82,83,85,85,   --
-- 90,92,94,95,99,99]                                                --
--                                                                   --
-----------------------------------------------------------------------
--                                                                   --
-- Intel(R) Core(TM) i5-2410M CPU@2.30GHz, 2.30 GHz, 4.00GB          --
-- Windows7 - PM.64 (RUS)                                            --
-- ================================================================= --
-- AS K73E-3DTY, 2410M(I5), DDR3 1333 4GB                            --
--                                                                   --
-- EXE file produced by the Actor Prolog system:                     --
--                                                                   --
-- One iteration takes 1100 msec                                     --
-- [0,2,4,6,7,8,10,11,11,17,18,18,21,27,27,28,28,28,29,31,32,33,37,  --
-- 39,40,46,47,51,53,53,55,59,61,63,65,66,74,74,75,81,82,83,85,85,   --
-- 90,92,94,95,99,99]                                                --
--                                                                   --
-- java version "1.7.0"                                              --
-- Java(TM) SE Runtime Environment (build 1.7.0-b147)                --
-- Java HotSpot(TM) 64-Bit Server VM (build 21.0-b17, mixed mode)    --
--                                                                   --
-- === BigInteger ===                                                --
-- java -Xrs -XX:+UseNUMA -server -Xbatch -jar main.jar              --
--                                                                   --
-- One iteration takes 140 msec                                      --
-- [61]                                                              --
-- One iteration takes 874 msec                                      --
-- [0,2,4,6,7,8,10,11,11,17,18,18,21,27,27,28,28,28,29,31,32,33,37,  --
-- 39,40,46,47,51,53,53,55,59,61,63,65,66,74,74,75,81,82,83,85,85,   --
-- 90,92,94,95,99,99]                                                --
--                                                                   --
-----------------------------------------------------------------------
class 'Main' (specialized 'Alpha'):
--
user_interface	= (('UserInterface',
			protecting:
				output=L1,
			variable:
				input=L2));
--
engine		= (('SortingEngine',
			suspending:
				input=L1,
			protecting:
				output=L2));
--
[
]
-----------------------------------------------------------------------
class 'UserInterface' (specialized 'MyTimer'):
--
-- PROCESS INPUT:
--
variable:
--
	input;		-- Sorted list (term)
--
-- PROCESS OUTPUT:
--
protecting:
--
	output;		-- User input (term)
--
-- AUXILIARY SLOTS:
--
internal:
--
	receiver	= ('Receiver',
				input,
				time1,
				timer=self);
--
variable:
--
	time1;
--
[
goal:-!,
	time1== ?time(),
	form_output_list(output).
--
/*
form_output_list(Output):-
	Output== [
		27,74,17,33,94,18,46,83,65, 2,
		32,53,28,85,99,47,28,82, 6,11,
		55,29,39,81,90,37,10, 0,66,51,
		 7,21,85,27,31,63,75, 4,95,99,
		11,28,61,74,18,92,40,53,59, 8,
		27,74,17,33,94,18,46,83,65, 2,
		32,53,28,85,99,47,28,82, 6,11,
		55,29,39,81,90,37,10, 0,66,51,
		 7,21,85,27,31,63,75, 4,95,99,
		11,28,61,74,18,92,40,53,59, 8,
		27,74,17,33,94,18,46,83,65, 2,
		32,53,28,85,99,47,28,82, 6,11,
		55,29,39,81,90,37,10, 0,66,51,
		 7,21,85,27,31,63,75, 4,95,99,
		11,28,61,74,18,92,40,53,59, 8],!.
*/
form_output_list(Output):-
	Output== [
		27,74,17,33,94,18,46,83,65, 2,
		32,53,28,85,99,47,28,82, 6,11,
		55,29,39,81,90,37,10, 0,66,51,
		 7,21,85,27,31,63,75, 4,95,99,
		11,28,61,74,18,92,40,53,59, 8],!.
-- form_output_list([1,3,2]):-!.
form_output_list(_).
]
-----------------------------------------------------------------------
class 'MyTimer' (specialized 'Timer'):
[
]
-----------------------------------------------------------------------
class 'Receiver' (specialized 'Console'):
--
input;
--
time1;
--
timer;
--
[
goal:-!,
	report_time(input).
--
report_time(SortedList):-
	T2== timer ? time(),
	[time1],
	bound(time1),!,
	Period== (T2 - time1),
	writef("One iteration takes %d msec\n",Period),
	writeln(SortedList).
report_time(_).
]
-----------------------------------------------------------------------
class 'SortingEngine' (specialized 'Alpha'):
--
-- PROCESS INPUT:
--
suspending:
--
	input;
--
-- PROCESS OUTPUT:
--
protecting:
--
	output;
--
-- AUXILIARY PROCESSES:
--
constant:
--
	left		= (('SortingEngine',
				suspending:
					input=A1,
				protecting:
					output=B1));
--
	right		= (('SortingEngine',
				suspending:
					input=A2,
				protecting:
					output=B2));
--
-- AUXILIARY ACTORS:
--
internal:
--
	receiver	= ('Distributor',
				input,
				output1=A1,
				output2=A2);
	sender		= ('Gatherer',
				input0=input,
				input1=B1,
				input2=B2,
				output);
--
[
]
-----------------------------------------------------------------------
class 'Distributor' (specialized 'Alpha'):
--
-- PROCESS INPUT:
--
variable:
--
	input;
--
-- PROCESS OUTPUTS:
--
protecting:
--
	output1;
	output2;
--
[
goal:-!,
	distribute_if_necessary(input,List1,List2),
	output1== List1,
	output2== List2.
--
distribute_if_necessary(#,#,#):-!.
distribute_if_necessary([],#,#):-!.
distribute_if_necessary([_],#,#):-!.
distribute_if_necessary(List1,List2,List3):-
	distribute(List1,List2,List3).
--
distribute([A,B|Rest1],[A|Rest2],[B|Rest3]):-!,
	distribute(Rest1,Rest2,Rest3).
distribute(List,List,[]).
]
-----------------------------------------------------------------------
class 'Gatherer' (specialized 'Alpha'):
--
-- PROCESS INPUTS:
--
variable:
--
	input0;
	input1;
	input2;
--
-- PROCESS OUTPUT:
--
protecting:
--
	output;
--
[
goal:-!,
	gather(input0,input1,input2,List),
	output== List.
--
gather(List,_,_,List):-
	List == [],!.
gather(List,_,_,List):-
	List == [_],!.
gather(_,#,List,List):-!.
gather(_,List,#,List):-!.
gather(_,List1,List2,List3):-
	gather(List1,List2,List3).
--
gather([A|Rest1],List2,[A|Rest3]):-
	List2 == [B|_],
	A < B,!,
	gather(Rest1,List2,Rest3).
gather(List1,[B|Rest2],[B|Rest3]):-!,
	gather(List1,Rest2,Rest3).
gather(List,_,List).
]
-----------------------------------------------------------------------
