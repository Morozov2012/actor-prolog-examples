-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2018 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/TEV1";
import .. from "morozov/ColorMap";
import .. from "morozov/FFmpeg";
-----------------------------------------------------------------------
project: (('Viewer'))
-----------------------------------------------------------------------
class 'Viewer' (specialized 'Dialog'):
--
internal:
--
	buffer		= ('CameraControl',
				viewer=self,
				main_window);
	main_window	= ('Canvas2D',
				background_color='SystemControl');
	writer		= ('FFmpeg',
				operating_mode='WRITING',
				extension=".avi");
	inspector	= ('VideoFileInspector',
				viewer=self);
	export_mode	= ('ExportMode');
	text_operations	= ('Text');
	timer		= ('Timer');
	image		= ('BufferedImage');
	file_operations	= ('File',
				extension=".ap2j");
	con		= ('Console');
	color_maps	= ('ColorMap');
--
constant:
--
	is_top_level_window	= 'yes';
	exit_on_close		= 'yes';
--
constant:
--
	dlg_ctrl_lower_bound			= 1010;
	dlg_ctrl_lower_main_quantile		= 1020;
	dlg_ctrl_lower_auxiliary_quantile	= 1030;
	dlg_ctrl_lower_scrollbar_range		= 1041;
	dlg_ctrl_lower_scrollbar_value		= 1042;
	--
	dlg_ctrl_upper_bound			= 2010;
	dlg_ctrl_upper_main_quantile		= 2020;
	dlg_ctrl_upper_auxiliary_quantile	= 2030;
	dlg_ctrl_upper_scrollbar_range		= 2041;
	dlg_ctrl_upper_scrollbar_value		= 2042;
	--
	dlg_ctrl_togglebutton_bounds		= 3010;
	dlg_ctrl_togglebutton_q1		= 3020;
	dlg_ctrl_togglebutton_q2		= 3030;
	dlg_ctrl_togglebutton_autoranging	= 3040;
	dlg_ctrl_togglebutton_average		= 3050;
	dlg_ctrl_togglebutton_zoom		= 3060;
	--
	dlg_ctrl_togglebutton_double_color_map	= 4010;
	dlg_ctrl_togglebutton_microphone	= 4040;
	dlg_ctrl_editname_record_length		= 4050;
	dlg_ctrl_listbutton_color_map		= 4060;
	--
	dlg_ctrl_togglebutton_connect		= 5010;
	dlg_ctrl_scrollbar_frame_number_range	= 5021;
	dlg_ctrl_scrollbar_frame_number_value	= 5022;
--
[
goal:-!,
	initialize_temperature_ranges,
	update_displaying_mode,
	switch_controls,
	show.
--
action("Load"):-
	FileName== con?input_file_name(
		"Please select data file",
		"*.ap2j",
		[
		"*.ap2j","Data Files",
		"*.*","All Files"
		]),!,
	buffer ? set_name(FileName),
	put('title',"Thermal Video Recorder ["+FileName+"]"),
	buffer ? set_operating_mode('PLAYING'),
	play_video_if_possible,
	switch_controls.
action("Play"):-!,
	buffer ? set_operating_mode('PLAYING'),
	play_video_if_possible,
	switch_controls.
action("Pause"):-!,
	buffer ? pause,
	switch_controls.
action("Record"):-!,
	record_data.
action("AVI"):-!,
	export_data(".avi").
action("GIF"):-!,
	export_data(".gif").
action("Stop"):-
	is_recording_mode,!,
	buffer ? stop,
	buffer ? set_operating_mode('LISTENING'),
	buffer ? flush_audio_buffer,
	buffer ? set_output_audio_data('no'),
	buffer ? start,
	switch_controls.
action("Stop"):-!,
	complete_data_transfer.
action("Save"):-
	NewName== con?input_new_file_name(
		"Please enter the file name",
		"*.ap2j",
		[
		"*.ap2j","Data Files",
		"*.*","All Files"
		]),!,
	CurrentName== buffer?get_full_name(),
	file_operations ? copy(CurrentName,NewName),
	buffer ? set_name(NewName),
	put('title',"Thermal Video Recorder ["+NewName+"]"),
	switch_controls.
action("Photo"):-!,
	FileName== ?create_new_file_name(),
	buffer ? take_photo(FileName+".png").
action("CalibrateCamera"):-!,
	buffer ? calibrate.
action("AdjustRange"):-!,
	Min== buffer?get_minimal_temperature(),
	Max== buffer?get_maximal_temperature(),
	set_temperature_range(Min,Max).
action("ResetRange"):-!,
	set_temperature_range(-10.0,100.0).
--
complete_editing(dlg_ctrl_lower_bound):-
	update_lower_temperature_bound,!,
	refine_upper_bound,
	refine_lower_quantile1,
	refine_upper_quantile1,
	refine_lower_quantile2,
	refine_upper_quantile2,
	buffer ? frame_obtained.
complete_editing(dlg_ctrl_upper_bound):-
	update_upper_temperature_bound,!,
	refine_lower_bound,
	refine_lower_quantile1,
	refine_upper_quantile1,
	refine_lower_quantile2,
	refine_upper_quantile2,
	buffer ? frame_obtained.
complete_editing(dlg_ctrl_lower_main_quantile):-
	check_lower_quantile1,
	Value== ?update_lower_main_temperature_quantile(),!,
	put(dlg_ctrl_lower_scrollbar_value,Value),
	refine_upper_quantile1,
	refine_lower_quantile2,
	refine_upper_quantile2,
	initialize_upper_scroller,
	buffer ? frame_obtained.
complete_editing(dlg_ctrl_upper_main_quantile):-
	check_upper_quantile1,
	Value== ?update_upper_main_temperature_quantile(),!,
	put(dlg_ctrl_upper_scrollbar_value,Value),
	refine_lower_quantile1,
	refine_lower_quantile2,
	refine_upper_quantile2,
	buffer ? frame_obtained.
complete_editing(dlg_ctrl_lower_auxiliary_quantile):-
	check_lower_quantile2,
	Value== ?update_lower_auxiliary_temperature_quantile(),!,
	put(dlg_ctrl_lower_scrollbar_value,Value),
	refine_upper_quantile2,
	initialize_upper_scroller,
	buffer ? frame_obtained.
complete_editing(dlg_ctrl_upper_auxiliary_quantile):-
	check_upper_quantile2,
	Value== ?update_upper_auxiliary_temperature_quantile(),!,
	put(dlg_ctrl_upper_scrollbar_value,Value),
	refine_lower_quantile2,
	buffer ? frame_obtained.
--
modified_control(dlg_ctrl_togglebutton_connect):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_connect)),!,
	set_Connect_mode(Mode),
	switch_controls.
modified_control(dlg_ctrl_lower_scrollbar_value):-!,
	self [<-] accept_lower_scrollbar_value().
modified_control(dlg_ctrl_upper_scrollbar_value):-!,
	self [<-] accept_upper_scrollbar_value().
modified_control(dlg_ctrl_togglebutton_bounds):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_bounds)),!,
	set_Bounds_mode(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_togglebutton_q1):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_q1)),!,
	set_Q1_mode(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_togglebutton_q2):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_q2)),!,
	set_Q2_mode(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_togglebutton_autoranging):-
	Mode== ?on_off(?val("YesNo",
		?get(dlg_ctrl_togglebutton_autoranging))),!,
	buffer ? set_autoranging_mode(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_togglebutton_double_color_map):-
	Mode== ?on_off(?val("YesNo",
		?get(dlg_ctrl_togglebutton_double_color_map))),!,
	buffer ? set_double_color_map_mode(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_togglebutton_average):-
	Mode== ?on_off(?val("YesNo",
		?get(dlg_ctrl_togglebutton_average))),!,
	buffer ? set_averaging_mode(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_togglebutton_zoom):-
	Mode== ?val("YesNo",
		?get(dlg_ctrl_togglebutton_zoom)),!,
	buffer ? set_zoom_image(Mode),
	switch_controls,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_listbutton_color_map):-!,
	update_displaying_mode,
	buffer ? frame_obtained.
modified_control(dlg_ctrl_scrollbar_frame_number_value):-
	Position== ?cast("INTEGER",
		?get(dlg_ctrl_scrollbar_frame_number_value)),
	buffer ? request_buffered_frame(Position),!.
modified_control(dlg_ctrl_togglebutton_microphone):-!,
	update_displaying_mode.
--
accept_lower_scrollbar_value:-
	Value== ?val("INTEGER",?get(dlg_ctrl_lower_scrollbar_value)),!,
	set_lower_scroller(Value),
	initialize_upper_scroller,
	buffer ? frame_obtained.
accept_lower_scrollbar_value.
--
accept_upper_scrollbar_value:-
	Value== ?val("INTEGER",?get(dlg_ctrl_upper_scrollbar_value)),!,
	set_upper_scroller(Value),
	buffer ? frame_obtained.
accept_upper_scrollbar_value.
-----------------------------------------------------------------------
play_video_if_possible:-
	check_file_name,!,
	park_scroll_control,
	buffer ? set_output_audio_data('yes'),
	buffer ? start.
play_video_if_possible.
--
check_file_name:-
	is_loaded,!.
check_file_name:-
	FileName== buffer?get_name(),
	con ? error(
		"Illegal File name",
		text_operations?format(
			"The '%s' file does not exist.",FileName)),
	fail.
--
set_read_buffer_size(Size):-
	put(dlg_ctrl_scrollbar_frame_number_range,[1,Size]).
--
park_scroll_control:-
	Range== ?val("I_List",
		?get(dlg_ctrl_scrollbar_frame_number_range)),
	Range == [_,Right],!,
	put(dlg_ctrl_scrollbar_frame_number_value,Right).
park_scroll_control.
--
complete_data_transfer:-
	writer ? is_open,
	writer ? close,
	fail.
complete_data_transfer:-
	is_recording_mode,
	buffer ? set_operating_mode('LISTENING'),
	buffer ? stop,
	fail.
complete_data_transfer:-
	is_disconnected,
	buffer ? set_operating_mode('PLAYING'),
	buffer ? stop,
	fail.
complete_data_transfer:-
	buffer ? flush_audio_buffer,
	fail.
complete_data_transfer:-
	export_mode ? assign('NONE'),
	buffer ? flush_audio_buffer,
	switch_controls.
-----------------------------------------------------------------------
update_displaying_mode:-
	ZoomImage== ?val("YesNo",?get(dlg_ctrl_togglebutton_zoom)),
	TextCM== ?val("STRING",
		?get(dlg_ctrl_listbutton_color_map)),
	UseMicrophone== ?val("YesNo",
		?get(dlg_ctrl_togglebutton_microphone)),!,
	ColorMap== color_maps?string_to_color_map_name(TextCM),
	buffer ? set_zoom_image(ZoomImage),
	buffer ? set_main_color_map(ColorMap),
	buffer ? set_attach_audio_data(UseMicrophone).
update_displaying_mode.
--
set_Connect_mode('yes'):-!,
	buffer ? stop,
	buffer ? set_operating_mode('LISTENING'),
	buffer ? set_output_audio_data('yes'),
	buffer ? start.
set_Connect_mode('no'):-!,
	buffer ? stop,
	buffer ? set_operating_mode('PLAYING').
set_Connect_mode(_).
--
set_Bounds_mode('yes'):-!,
	put(dlg_ctrl_togglebutton_q1,'no'),
	put(dlg_ctrl_togglebutton_q2,'no'),
	initialize_lower_scroller,
	initialize_upper_scroller.
set_Bounds_mode(_).
--
set_Q1_mode('yes'):-!,
	put(dlg_ctrl_togglebutton_bounds,'no'),
	put(dlg_ctrl_togglebutton_q2,'no'),
	initialize_lower_scroller,
	initialize_upper_scroller.
set_Q1_mode(_).
--
set_Q2_mode('yes'):-!,
	put(dlg_ctrl_togglebutton_bounds,'no'),
	put(dlg_ctrl_togglebutton_q1,'no'),
	initialize_lower_scroller,
	initialize_upper_scroller.
set_Q2_mode(_).
--
is_connected:-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_connect)),
	Mode == 'yes'.
--
is_disconnected:-
	is_connected,!,
	fail.
is_disconnected.
--
do_use_microphone:-
	Mode== ?get(dlg_ctrl_togglebutton_microphone),
	?val("YesNo",Mode) == 'yes'.
--
is_loaded:-
	buffer ? does_exist().
--
is_listening_mode:-
	Mode== ?val("DataAcquisitionBufferOperatingMode",
		buffer?get_operating_mode()),
	Mode == 'LISTENING'.
--
is_playing_mode:-
	Mode== ?val("DataAcquisitionBufferOperatingMode",
		buffer?get_operating_mode()),
	Mode == 'PLAYING'.
--
is_reading_mode:-
	Mode== ?val("DataAcquisitionBufferOperatingMode",
		buffer?get_operating_mode()),
	Mode == 'READING'.
--
is_recording_or_exporting_mode:-
	is_recording_mode,!.
is_recording_or_exporting_mode:-
	export_mode ? export_is_on.
--
is_recording_mode:-
	Mode== ?val("DataAcquisitionBufferOperatingMode",
		buffer?get_operating_mode()),
	Mode == 'RECORDING'.
--
is_Bounds_mode:-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_bounds)),
	Mode == 'yes'.
--
is_Q1_mode:-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_q1)),
	Mode == 'yes'.
--
is_Q2_mode:-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_q2)),
	Mode == 'yes'.
--
initialize_temperature_ranges:-
	update_lower_temperature_bound,
	fail.
initialize_temperature_ranges:-
	update_upper_temperature_bound,
	fail.
initialize_temperature_ranges:-
	update_lower_main_temperature_quantile,
	fail.
initialize_temperature_ranges:-
	update_upper_main_temperature_quantile,
	fail.
initialize_temperature_ranges:-
	update_lower_auxiliary_temperature_quantile,
	fail.
initialize_temperature_ranges:-
	update_upper_auxiliary_temperature_quantile,
	fail.
initialize_temperature_ranges.
--
update_lower_temperature_bound() = Value :-
	Value== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	buffer ? set_lower_temperature_bound(Value).
--
update_upper_temperature_bound() = Value :-
	Value== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	buffer ? set_upper_temperature_bound(Value).
--
update_lower_main_temperature_quantile() = Value :-
	Value== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),
	buffer ? set_lower_main_temperature_quantile(Value).
--
update_upper_main_temperature_quantile() = Value :-
	Value== ?val("REAL",?get(dlg_ctrl_upper_main_quantile)),
	buffer ? set_upper_main_temperature_quantile(Value).
--
update_lower_auxiliary_temperature_quantile() = Value :-
	Value== ?val("REAL",?get(dlg_ctrl_lower_auxiliary_quantile)),
	buffer ? set_lower_auxiliary_temperature_quantile(Value).
--
update_upper_auxiliary_temperature_quantile() = Value :-
	Value== ?val("REAL",?get(dlg_ctrl_upper_auxiliary_quantile)),
	buffer ? set_upper_auxiliary_temperature_quantile(Value).
--
check_lower_quantile1:-
	Value== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),
	LowerBound== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	Value < LowerBound,
	put(dlg_ctrl_lower_bound,Value),
	update_lower_temperature_bound,
	fail.
check_lower_quantile1:-
	Value== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),
	UpperBound== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	Value > UpperBound,
	put(dlg_ctrl_upper_bound,Value),
	update_upper_temperature_bound,
	fail.
check_lower_quantile1.
--
check_upper_quantile1:-
	Value== ?val("REAL",?get(dlg_ctrl_upper_main_quantile)),
	LowerBound== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	Value < LowerBound,
	put(dlg_ctrl_lower_bound,Value),
	update_lower_temperature_bound,
	fail.
check_upper_quantile1:-
	Value== ?val("REAL",?get(dlg_ctrl_upper_main_quantile)),
	UpperBound== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	Value > UpperBound,
	put(dlg_ctrl_upper_bound,Value),
	update_upper_temperature_bound,
	fail.
check_upper_quantile1.
--
check_lower_quantile2:-
	Value== ?val("REAL",?get(dlg_ctrl_lower_auxiliary_quantile)),
	LowerBound== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	Value < LowerBound,
	put(dlg_ctrl_lower_bound,Value),
	update_lower_temperature_bound,
	fail.
check_lower_quantile2:-
	Value== ?val("REAL",?get(dlg_ctrl_lower_auxiliary_quantile)),
	UpperBound== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	Value > UpperBound,
	put(dlg_ctrl_upper_bound,Value),
	update_upper_temperature_bound,
	fail.
check_lower_quantile2.
--
check_upper_quantile2:-
	Value== ?val("REAL",?get(dlg_ctrl_upper_auxiliary_quantile)),
	LowerBound== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	Value < LowerBound,
	put(dlg_ctrl_lower_bound,Value),
	update_lower_temperature_bound,
	fail.
check_upper_quantile2:-
	Value== ?val("REAL",?get(dlg_ctrl_upper_auxiliary_quantile)),
	UpperBound== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	Value > UpperBound,
	put(dlg_ctrl_upper_bound,Value),
	update_upper_temperature_bound,
	fail.
check_upper_quantile2.
--
refine_lower_bound:-
	Value== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	Bound== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	put(dlg_ctrl_lower_bound,?min(Value,Bound)),
	update_lower_temperature_bound,!.
refine_lower_bound.
--
refine_upper_bound:-
	Value== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	Bound== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	put(dlg_ctrl_upper_bound,?max(Value,Bound)),
	update_upper_temperature_bound,!.
refine_upper_bound.
--
refine_lower_quantile1:-
	Value== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),
	LowerBound== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	UpperBound== ?val("REAL",?get(dlg_ctrl_upper_main_quantile)),
	put(dlg_ctrl_lower_main_quantile,
		?max(?min(Value,UpperBound),LowerBound)),
	update_lower_main_temperature_quantile,!.
refine_lower_quantile1.
--
refine_upper_quantile1:-
	Value== ?val("REAL",?get(dlg_ctrl_upper_main_quantile)),
	UpperBound== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	LowerBound== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),
	put(dlg_ctrl_upper_main_quantile,
		?min(?max(Value,LowerBound),UpperBound)),
	update_upper_main_temperature_quantile,!.
refine_upper_quantile1.
--
refine_lower_quantile2:-
	Value== ?val("REAL",
		?get(dlg_ctrl_lower_auxiliary_quantile)),
	LowerBound== ?val("REAL",
		?get(dlg_ctrl_lower_bound)),
	UpperBound== ?val("REAL",
		?get(dlg_ctrl_upper_auxiliary_quantile)),
	put(dlg_ctrl_lower_auxiliary_quantile,
		?max(?min(Value,UpperBound),LowerBound)),
	update_lower_auxiliary_temperature_quantile,!.
refine_lower_quantile2.
--
refine_upper_quantile2:-
	Value== ?val("REAL",
		?get(dlg_ctrl_upper_auxiliary_quantile)),
	UpperBound== ?val("REAL",
		?get(dlg_ctrl_upper_bound)),
	LowerBound== ?val("REAL",
		?get(dlg_ctrl_lower_auxiliary_quantile)),
	put(dlg_ctrl_upper_auxiliary_quantile,
		?min(?max(Value,LowerBound),UpperBound)),
	update_upper_auxiliary_temperature_quantile,!.
refine_upper_quantile2.
-----------------------------------------------------------------------
initialize_lower_scroller:-
	is_Q1_mode,
	LB== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	UB== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	CV== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),!,
	put(dlg_ctrl_lower_scrollbar_range,[LB,UB]),
	put(dlg_ctrl_lower_scrollbar_value,CV).
initialize_lower_scroller:-
	is_Q2_mode,
	LB== ?val("REAL",?get(dlg_ctrl_lower_bound)),
	UB== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	CV== ?val("REAL",?get(dlg_ctrl_lower_auxiliary_quantile)),!,
	put(dlg_ctrl_lower_scrollbar_range,[LB,UB]),
	put(dlg_ctrl_lower_scrollbar_value,CV).
initialize_lower_scroller:-
	put(dlg_ctrl_lower_scrollbar_range,[0,1]),
	put(dlg_ctrl_lower_scrollbar_value,0).
--
initialize_upper_scroller:-
	is_Q1_mode,
	LB== ?val("REAL",?get(dlg_ctrl_lower_main_quantile)),
	UB== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	CV== ?val("REAL",?get(dlg_ctrl_upper_main_quantile)),!,
	put(dlg_ctrl_upper_scrollbar_range,[LB,UB]),
	put(dlg_ctrl_upper_scrollbar_value,CV).
initialize_upper_scroller:-
	is_Q2_mode,
	LB== ?val("REAL",?get(dlg_ctrl_lower_auxiliary_quantile)),
	UB== ?val("REAL",?get(dlg_ctrl_upper_bound)),
	CV== ?val("REAL",?get(dlg_ctrl_upper_auxiliary_quantile)),!,
	put(dlg_ctrl_upper_scrollbar_range,[LB,UB]),
	put(dlg_ctrl_upper_scrollbar_value,CV).
initialize_upper_scroller:-
	put(dlg_ctrl_upper_scrollbar_range,[0,1]),
	put(dlg_ctrl_upper_scrollbar_value,0).
--
set_lower_scroller(Value):-
	is_Q1_mode,
	put(dlg_ctrl_lower_main_quantile,Value),
	update_lower_main_temperature_quantile,!.
set_lower_scroller(Value):-
	is_Q2_mode,
	put(dlg_ctrl_lower_auxiliary_quantile,Value),
	update_lower_auxiliary_temperature_quantile,!.
set_lower_scroller(_).
--
set_upper_scroller(Value):-
	is_Q1_mode,
	put(dlg_ctrl_upper_main_quantile,Value),
	update_upper_main_temperature_quantile,!.
set_upper_scroller(Value):-
	is_Q2_mode,
	put(dlg_ctrl_upper_auxiliary_quantile,Value),
	update_upper_auxiliary_temperature_quantile,!.
set_upper_scroller(_).
-----------------------------------------------------------------------
set_temperature_range(Min,Max):-
	is_Bounds_mode,!,
	put(dlg_ctrl_lower_bound,Min),
	put(dlg_ctrl_upper_bound,Max),
	complete_editing(dlg_ctrl_lower_bound),
	complete_editing(dlg_ctrl_upper_bound).
set_temperature_range(Min,Max):-
	is_Q1_mode,!,
	put(dlg_ctrl_lower_main_quantile,Min),
	put(dlg_ctrl_upper_main_quantile,Max),
	complete_editing(dlg_ctrl_lower_main_quantile),
	complete_editing(dlg_ctrl_upper_main_quantile).
set_temperature_range(Min,Max):-
	is_Q2_mode,!,
	put(dlg_ctrl_lower_auxiliary_quantile,Min),
	put(dlg_ctrl_upper_auxiliary_quantile,Max),
	complete_editing(dlg_ctrl_lower_auxiliary_quantile),
	complete_editing(dlg_ctrl_upper_auxiliary_quantile).
set_temperature_range(_,_).
-----------------------------------------------------------------------
switch_controls:-
	switch_lower_bound_editor,
	switch_upper_bound_editor,
	switch_lower_quantile1_editor,
	switch_upper_quantile1_editor,
	switch_lower_quantile2_editor,
	switch_upper_quantile2_editor,
	switch_lower_scale_scroller,
	switch_upper_scale_scroller,
	switch_scale_control_buttons,
	initialize_lower_scroller,
	initialize_upper_scroller,
	switch_frame_number_scroller,
	switch_microphone_state,
	switch_buttons.
--
switch_lower_bound_editor:-
	is_Bounds_mode,!,
	enable(dlg_ctrl_lower_bound).
switch_lower_bound_editor:-
	disable(dlg_ctrl_lower_bound).
--
switch_upper_bound_editor:-
	is_Bounds_mode,!,
	enable(dlg_ctrl_upper_bound).
switch_upper_bound_editor:-
	disable(dlg_ctrl_upper_bound).
--
switch_lower_quantile1_editor:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_lower_main_quantile).
switch_lower_quantile1_editor:-
	is_Q1_mode,!,
	enable(dlg_ctrl_lower_main_quantile).
switch_lower_quantile1_editor:-
	disable(dlg_ctrl_lower_main_quantile).
--
switch_upper_quantile1_editor:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_upper_main_quantile).
switch_upper_quantile1_editor:-
	is_Q1_mode,!,
	enable(dlg_ctrl_upper_main_quantile).
switch_upper_quantile1_editor:-
	disable(dlg_ctrl_upper_main_quantile).
--
switch_lower_quantile2_editor:-
	M1== buffer?get_autoranging_mode(),
	M1 == 'on',!,
	disable(dlg_ctrl_lower_auxiliary_quantile).
switch_lower_quantile2_editor:-
	is_Q2_mode,
	M2== buffer?get_double_color_map_mode(),
	M2== 'on',!,
	enable(dlg_ctrl_lower_auxiliary_quantile).
switch_lower_quantile2_editor:-
	disable(dlg_ctrl_lower_auxiliary_quantile).
--
switch_upper_quantile2_editor:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_upper_auxiliary_quantile).
switch_upper_quantile2_editor:-
	is_Q2_mode,
	M2== buffer?get_double_color_map_mode(),
	M2== 'on',!,
	enable(dlg_ctrl_upper_auxiliary_quantile).
switch_upper_quantile2_editor:-
	disable(dlg_ctrl_upper_auxiliary_quantile).
--
switch_lower_scale_scroller:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_lower_scrollbar_range).
switch_lower_scale_scroller:-
	is_Q1_mode,!,
	enable(dlg_ctrl_lower_scrollbar_range).
switch_lower_scale_scroller:-
	is_Q2_mode,!,
	enable(dlg_ctrl_lower_scrollbar_range).
switch_lower_scale_scroller:-
	disable(dlg_ctrl_lower_scrollbar_range).
--
switch_upper_scale_scroller:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_upper_scrollbar_range).
switch_upper_scale_scroller:-
	is_Q1_mode,!,
	enable(dlg_ctrl_upper_scrollbar_range).
switch_upper_scale_scroller:-
	is_Q2_mode,!,
	enable(dlg_ctrl_upper_scrollbar_range).
switch_upper_scale_scroller:-
	disable(dlg_ctrl_upper_scrollbar_range).
--
switch_scale_control_buttons:-
	switch_quantile1_button,
	switch_quantile2_button,
	switch_double_color_map_button.
--
switch_quantile1_button:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_togglebutton_q1).
switch_quantile1_button:-
	enable(dlg_ctrl_togglebutton_q1).
--
switch_quantile2_button:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_togglebutton_q2).
switch_quantile2_button:-
	M2== buffer?get_double_color_map_mode(),
	M2== 'on',!,
	enable(dlg_ctrl_togglebutton_q2).
switch_quantile2_button:-
	disable(dlg_ctrl_togglebutton_q2).
--
switch_double_color_map_button:-
	Mode== buffer?get_autoranging_mode(),
	Mode == 'on',!,
	disable(dlg_ctrl_togglebutton_double_color_map).
switch_double_color_map_button:-
	enable(dlg_ctrl_togglebutton_double_color_map).
--
switch_frame_number_scroller:-
	is_connected,!,
	disable(dlg_ctrl_scrollbar_frame_number_range).
switch_frame_number_scroller:-
	enable(dlg_ctrl_scrollbar_frame_number_range).
--
switch_buttons:-
	switch_load_button,
	switch_play_button,
	switch_pause_button,
	switch_record_button,
	switch_export_button,
	switch_GIF_button,
	switch_stop_button,
	switch_save_button,
	switch_microphone_button.
--
switch_load_button:-
	is_recording_or_exporting_mode,!,
	disable("Load").
switch_load_button:-
	buffer ? is_active,
	is_playing_mode,!,
	disable("Load").
switch_load_button:-
	is_connected,!,
	disable("Load").
switch_load_button:-
	enable("Load").
--
switch_play_button:-
	is_recording_or_exporting_mode,!,
	disable("Play"),
	set_control_text_color("Play",'default').
switch_play_button:-
	is_connected,!,
	disable("Play"),
	set_control_text_color("Play",'default').
switch_play_button:-
	buffer ? is_active,
	is_playing_mode,!,
	enable("Play"),
	set_control_text_color("Play",'DkGreen').
switch_play_button:-
	buffer ? does_exist,!,
	enable("Play"),
	set_control_text_color("Play",'default').
switch_play_button:-
	disable("Play"),
	set_control_text_color("Play",'default').
--
switch_pause_button:-
	is_connected,!,
	disable("Pause").
switch_pause_button:-
	buffer ? is_active,
	is_playing_mode,!,
	enable("Pause").
switch_pause_button:-
	disable("Pause").
--
switch_record_button:-
	export_mode ? export_is_on,!,
	disable("Record"),
	set_control_text_color("Record",'default').
switch_record_button:-
	is_connected,
	is_recording_mode,!,
	enable("Record"),
	set_control_text_color("Record",'Red').
switch_record_button:-
	is_connected,
	is_listening_mode,!,
	enable("Record"),
	set_control_text_color("Record",'default').
switch_record_button:-
	disable("Record"),
	set_control_text_color("Record",'default').
--
switch_export_button:-
	export_mode ? export_to_AVI,!,
	enable("AVI"),
	set_control_text_color("AVI",'Red').
switch_export_button:-
	is_recording_or_exporting_mode,!,
	disable("AVI"),
	set_control_text_color("AVI",'default').
switch_export_button:-
	is_connected,!,
	enable("AVI"),
	set_control_text_color("AVI",'default').
switch_export_button:-
	buffer ? is_active,!,
	disable("AVI"),
	set_control_text_color("AVI",'default').
switch_export_button:-
	is_loaded,!,
	enable("AVI"),
	set_control_text_color("AVI",'default').
switch_export_button:-
	disable("AVI"),
	set_control_text_color("AVI",'default').
--
switch_GIF_button:-
	export_mode ? export_to_GIF,!,
	enable("GIF"),
	set_control_text_color("GIF",'Red').
switch_GIF_button:-
	is_recording_or_exporting_mode,!,
	disable("GIF"),
	set_control_text_color("GIF",'default').
switch_GIF_button:-
	is_connected,!,
	enable("GIF"),
	set_control_text_color("GIF",'default').
switch_GIF_button:-
	buffer ? is_active,!,
	disable("GIF"),
	set_control_text_color("GIF",'default').
switch_GIF_button:-
	is_loaded,!,
	enable("GIF"),
	set_control_text_color("GIF",'default').
switch_GIF_button:-
	disable("GIF"),
	set_control_text_color("GIF",'default').
--
switch_stop_button:-
	buffer ? is_active,
	writer ? is_open,!,
	enable("Stop").
switch_stop_button:-
	buffer ? is_active,
	is_listening_mode,!,
	disable("Stop").
switch_stop_button:-
	buffer ? is_active,!,
	enable("Stop").
switch_stop_button:-
	disable("Stop").
--
switch_save_button:-
	is_recording_or_exporting_mode,!,
	disable("Save").
switch_save_button:-
	buffer ? is_active,
	is_playing_mode,!,
	disable("Save").
switch_save_button:-
	is_loaded,!,
	enable("Save").
switch_save_button:-
	disable("Save").
--
switch_microphone_button:-
	buffer ? is_active,
	is_recording_mode,!,
	paint_button_Microphone('DkGreen').
switch_microphone_button:-
	buffer ? is_active,
	export_mode ? export_to_video_with_sound,!,
	paint_button_Microphone('DkGreen').
switch_microphone_button:-
	paint_button_Microphone('default').
--
paint_button_Microphone(Color):-
	do_use_microphone,
	buffer ? microphone_is_active,!,
	set_control_text_color(
		dlg_ctrl_togglebutton_microphone,Color).
paint_button_Microphone(_):-
	set_control_text_color(
		dlg_ctrl_togglebutton_microphone,'default').
--
switch_microphone_state:-
	buffer ? microphone_is_available,!,
	enable(dlg_ctrl_togglebutton_microphone).
switch_microphone_state:-
	disable(dlg_ctrl_togglebutton_microphone).
-----------------------------------------------------------------------
record_data:-
	is_recording_or_exporting_mode,!.
record_data:-
	buffer ? stop,
	FileName== ?create_new_file_name(),
	buffer ? set_name(FileName),
	buffer ? set_operating_mode('RECORDING'),
	buffer ? reset_frame_rate,
	put(dlg_ctrl_editname_record_length,""),
	buffer ? set_output_audio_data('no'),
	buffer ? start,
	switch_controls.
--
export_data(_):-
	is_recording_or_exporting_mode,!.
export_data(Extension):-
	is_connected,
	buffer ? get_recent_frame_rate(FrameRate),
	FrameRate > 0,!,
	tune_up_writer(Extension),
	DestinationFileName== ?create_new_file_name(),
	buffer ? get_image_size_in_pixels(Width,Height),
	writer ? set_automatic_frame_rate_correction('on'),
	writer ? open(
		DestinationFileName,
		[{
		codec_type: 'AVMEDIA_TYPE_VIDEO',
		destination_image_width: Width,
		destination_image_height: Height,
		time_base: 1/FrameRate,
		bit_rate: 5_000_000
		},
		{
		codec_type: 'AVMEDIA_TYPE_AUDIO',
		bit_rate: 64_000,
		time_base: 1/44100,
		sample_rate: 44100,
		channels: 2,
		sample_fmt: 'AV_SAMPLE_FMT_S16',
		channel_layout: 'AV_CH_LAYOUT_STEREO',
		nb_samples: 100000
		}]),
	buffer ? stop,
	buffer ? set_operating_mode('LISTENING'),
	buffer ? reset_frame_rate,
	put(dlg_ctrl_editname_record_length,""),
	buffer ? set_output_audio_data('no'),
	buffer ? start,
	switch_controls.
export_data(Extension):-
	is_disconnected,!,
	tune_up_writer(Extension),
	buffer ? stop,
	SourceFileName== buffer?get_full_name(),
	inspector ? inspect_file(SourceFileName).
export_data(_).
--
tune_up_writer(Extension):-
	export_mode ? select_mode(Extension),
	writer ? set_extension(Extension),
	fail.
tune_up_writer(_).
--
continue_export:-
	SourceFileName== buffer?get_full_name(),
	Extension== writer?get_extension(),
	DestinationFileName== file_operations
		?replace_extension(SourceFileName,Extension),
	inspector ? get_image_size_in_pixels(Width,Height),
	inspector ? get_recent_frame_rate(FrameRate),
	writer ? set_automatic_frame_rate_correction('off'),
	writer ? open(
		DestinationFileName,
		[{
		codec_type: 'AVMEDIA_TYPE_VIDEO',
		destination_image_width: Width,
		destination_image_height: Height,
		time_base: 1/FrameRate,
		bit_rate: 5_000_000
		},{
		codec_type: 'AVMEDIA_TYPE_AUDIO',
		bit_rate: 64_000,
		time_base: 1/44100,
		sample_rate: 44100,
		channels: 2,
		sample_fmt: 'AV_SAMPLE_FMT_S16',
		channel_layout: 'AV_CH_LAYOUT_STEREO',
		nb_samples: 100000
		}]),
	buffer ? set_operating_mode('READING'),
	buffer ? reset_frame_rate,
	put(dlg_ctrl_editname_record_length,""),
	buffer ? set_output_audio_data('no'),
	buffer ? start,
	switch_controls.
-----------------------------------------------------------------------
export_image_if_necessary(FrameTime,RelativeTime):-
	writer ? is_open,
	main_window ? get_image(image),
	writer ? write_realtime_image(image,FrameTime),
	flush_writer_if_necessary,
	TimeInSeconds== RelativeTime / 1000.0,
	TS== text_operations?format("%3.2f",TimeInSeconds),
	put(dlg_ctrl_editname_record_length,TS),
	fail.
export_image_if_necessary(_,RelativeTime):-
	is_recording_mode,
	TimeInSeconds== RelativeTime / 1000.0,
	TS== text_operations?format("%3.2f",TimeInSeconds),
	put(dlg_ctrl_editname_record_length,TS),
	fail.
export_image_if_necessary(_,_):-
	is_reading_mode,
	buffer ? start,
	fail.
export_image_if_necessary(_,_).
--
continue_reading_if_necessary:-
	buffer ? eof,!.
continue_reading_if_necessary:-
	is_reading_mode,
	buffer ? set_output_audio_data('no'),
	buffer ? start,
	fail.
continue_reading_if_necessary.
-----------------------------------------------------------------------
export_audio_data_if_necessary(AudioData,Time):-
	export_mode ? export_to_video_with_sound,
	writer ? write_realtime_audio_data(AudioData,Time),
	flush_writer_if_necessary,
	fail.
export_audio_data_if_necessary(_,_):-
	is_reading_mode,
	continue_reading_if_necessary,
	fail.
export_audio_data_if_necessary(_,_).
--
flush_writer_if_necessary:-
	is_reading_mode,
	writer ? flush,
	fail.
flush_writer_if_necessary.
-----------------------------------------------------------------------
on_off('yes') = 'on' :-!.
on_off(_) = 'off'.
--
create_new_file_name() = FileName :-
	timer ? date(Year,Month,Day),
	timer ? time(Hour,Minute,Second),
	FileName== text_operations?format(
		"%04d-%02d-%02d-%02d-%02d-%02d",
		Year,Month,Day,
		Hour,Minute,Second).
]
-----------------------------------------------------------------------
class 'CameraControl' (specialized 'TEV1'):
--
constant:
--
	operating_mode				= 'LISTENING';
	read_time_out				= 70; /*25;*/
	write_time_out				= 70;
	read_buffer_size			= 10;
	use_recorded_temperature_range_commands	= 'yes';
	use_recorded_color_map_commands		= 'yes';
	use_recorded_zooming_commands		= 'yes';
	output_debug_information		= 4;
--
internal:
--
	viewer;
	main_window;
--
	image1				= ('BufferedImage');
	image2				= ('BufferedImage');
	text_operations			= ('Text');
	timer				= ('Timer');
	con				= ('Console');
--
[
goal:-!,
	viewer ? set_read_buffer_size(read_buffer_size).
--
take_photo(FileName):-
	main_window ? get_image(image2),
	image2 ? save(FileName).
--
frame_obtained:-
	commit,
	get_recent_frame_number(FrameNumber),
	FrameNumber > 0,!,
	get_recent_image(image1),
	get_image_size_in_pixels(IW,IH),
	get_recent_frame_time(FrameTime),
	get_recent_frame_relative_time(FrameRelativeTime),
	get_recent_frame_rate(FrameRate),
	main_window ? suspend_redrawing,
	resize_main_window(IW,IH),
	main_window ? clear,
	main_window ? draw_image(image1,0,0,1,1),
	main_window ? set_rendering_mode({
		colorRendering:'QUALITY',
		antialiasing:'on',
		textAntialiasing:'on'
		}),
	report_time(FrameNumber,FrameTime,FrameRate),
	report_copyright,
	main_window ? draw_now,
	viewer ? export_image_if_necessary(
		FrameTime,FrameRelativeTime).
frame_obtained:-!,
	viewer ? continue_reading_if_necessary.
--
audio_data_obtained:-
	commit_audio_data,!,
	get_recent_audio_data_time(Time),
	Binary== ?get_recent_audio_data(),
	viewer ? export_audio_data_if_necessary(Binary,Time).
--
resize_main_window(IW,IH):-
	IW > 0,
	IH > 0,!,
	main_window ? refine_width(IW/IH).
resize_main_window(_,_).
--
complete_calibration:-!.
--
data_transfer_completion:-!,
	viewer ? complete_data_transfer.
--
data_transfer_error(ErrorName):-!,
	con ? error("Data Transfer Error",ErrorName).
--
report_time(_,_,_):-
	main_window ? set_brush('Green'),
	main_window ? set_font({size:18}),
	fail.
report_time(FrameNumber,FrameTime,_):-
	FrameNumber >= 0,
	Time== timer?convert_to_time(FrameTime),
	Time == time(Hours,Minutes,Seconds,Milliseconds),
	main_window ? set_text_alignment('LEFT','TOP'),
	main_window ? draw_text(
		0.02, 0.02,
		text_operations?format(
			"Time: %02d:%02d:%02d.%03d; Frame: %d",
			Hours,Minutes,Seconds,Milliseconds,
			FrameNumber)),
	fail.
report_time(_,_,FrameRate):-
	FrameRate >= 0,
	main_window ? set_text_alignment('RIGHT','TOP'),
	main_window ? draw_text(
		0.91, 0.02,
		text_operations?format(
			"Frame Rate: %2.1f",FrameRate)),
	fail.
report_time(_,_,_).
--
report_copyright:-
	main_window ? set_font({
		name:'SANS_SERIF',
		weight:'WEIGHT_REGULAR',
		width:'WIDTH_EXTENDED',
		posture:'POSTURE_REGULAR',
		size:24,
		tracking:'TRACKING_LOOSE',
		kerning:'on',
		foreground:'White'
		}),
	main_window ? set_text_alignment('LEFT','BOTTOM'),
	main_window ? draw_text(0.02,0.98,"www.fullvision.ru").
]
-----------------------------------------------------------------------
class 'ExportMode' (specialized 'Database'):
--
internal:
--
	text_operations		= ('Text');
--
[
assign(Mode):-
	retract_all,
	insert(Mode).
--
select_mode(Name):-
	select_mode(text_operations?lower(Name),Mode),
	assign(Mode).
--
select_mode(".jpg",'JPG'):-!.
select_mode(".jpeg",'JPG'):-!.
select_mode(".avi",'AVI'):-!.
select_mode(".gif",'GIF'):-!.
select_mode(Name,_):-
	break("Unknown export mode: " + Name).
--
export_is_on:-
	export_is_on(?get()),!.
--
export_is_on('JPG'):-!.
export_is_on('AVI'):-!.
export_is_on('GIF').
--
export_is_off:-
	Mode== ?get(),!,
	export_is_off(Mode).
export_is_off.
--
export_is_off('NONE').
--
export_to_frames:-
	export_to_frames(?get()),!.
--
export_to_frames('JPG').
--
export_to_video:-
	export_to_video(?get()),!.
--
export_to_video('AVI'):-!.
export_to_video('GIF').
--
export_to_JPG:-
	?get()=='JPG'.
--
export_to_AVI:-
	?get()=='AVI'.
--
export_to_GIF:-
	?get()=='GIF'.
--
export_to_video_with_sound:-
	export_to_video_with_sound(?get()),!.
--
export_to_video_with_sound('AVI').
--
get() = Mode :-
	find(Mode),!.
]
-----------------------------------------------------------------------
class 'VideoFileInspector' (specialized 'TEV1'):
--
internal:
--
	viewer;
--
	dialog	= ('FileInspection',
			inspector= self);
--
constant:
--
	operating_mode			= 'READING';
	output_audio_data		= 'no';
	read_buffer_size		= 0;
	output_debug_information	= 1;
--
[
inspect_file(FileName):-
	set_name(FileName),
	dialog ? show,
	reset_frame_rate,
	start.
--
frame_obtained:-
	commit,!,
	get_recent_frame_number(FrameNumber),
	dialog ? put(1010,FrameNumber),
	start.
--
audio_data_obtained:-
	commit_audio_data,!,
	start.
--
data_transfer_completion:-
	dialog ? is_visible,!,
	dialog ? hide,
	viewer ? continue_export.
data_transfer_completion:-!.
--
cancel_inspection:-
	dialog ? hide,
	stop.
]
-----------------------------------------------------------------------
class 'FileInspection' (specialized 'Dialog'):
--
internal:
--
	inspector;
--
constant:
--
	is_top_level_window	= 'yes';
--
[
action("Cancel"):-!,
	inspector ? cancel_inspection.
]
-----------------------------------------------------------------------
