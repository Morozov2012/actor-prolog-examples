-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2017 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Vision";
import .. from "morozov/FFmpeg";
-----------------------------------------------------------------------
project: (('DialogHSB'))
-----------------------------------------------------------------------
class 'DialogHSB' (specialized 'Dialog'):
--
constant:
--
	data_directory =
		"L:/= Video =/W_L_Object 10 07 2017/"
		"22 object/2 session";
--
	file_name		= "time 17-07-10 15-16-42.avi";
	frame_rate		= 30.0;
--
internal:
--
	video		= ('VideoReader',
				target_world= self);
	vpm		= ('VideoProcessingMachine',
				minimal_training_interval= -1,
				-- maximal_training_interval= 100,
				horizontal_blob_border= 10,
				vertical_blob_border= 10,
				horizontal_extra_border_coefficient= -1.0,
				vertical_extra_border_coefficient= -1.0,
				minimal_blob_intersection_area= 1,
				minimal_blob_size= 1,
				maximal_blob_invisibility_interval= 30,
				minimal_track_duration= 50,
				maximal_track_retention_interval= 50,
				synthesized_image_transparency= 48);
	timer		= ('Timer');
	graphics_window	= ('Canvas2D',
				background_color= 'SystemControl',
				y= 0,
				height= 22);
	text		= ('Text');
	image1		= ('BufferedImage');
	image2		= ('BufferedImage');
	state		= ('ProgramState');
	con		= ('Console');
--
variable:
--
	minimal_hue;
	maximal_hue;
	minimal_saturation;
	maximal_saturation;
	minimal_brightness;
	maximal_brightness;
--
constant:
--
	circle_radius	= 0.005;
--
[
goal:-!,
	maximize,
	VideoToBeRead== data_directory + "/" + file_name,
	video ? set_name(VideoToBeRead),
	Time0== timer?milliseconds(),
	state ? set_beginning_time(Time0),
	put('minimal_hue',15),
	put('maximal_hue',200),
	put('minimal_saturation',5),
	put('maximal_saturation',55),
	put('maximal_brightness',150),
	modified_control(0),
	video ? start.
--
modified_control(_):-
	MinimalHue== ?val("INTEGER",?get('minimal_hue')),
	MaximalHue== ?val("INTEGER",?get('maximal_hue')),
	MinimalSaturation==
		?val("INTEGER",?get('minimal_saturation')),
	MaximalSaturation==
		?val("INTEGER",?get('maximal_saturation')),
	MinimalBrightness==
		?val("INTEGER",?get('minimal_brightness')),
	MaximalBrightness==
		?val("INTEGER",?get('maximal_brightness')),!,
	vpm ? suspend_processing,
	vpm ? retract_all_instructions,
	vpm ? img_resize_image(320,-1),
	L11== [	p(57,89),p(589,61),p(606,212),p(602,411),
		p(357,409),p(217,421),p(51,417)],
	divide_list(2,L11,L12),
	vpm ? msk_select_polygon(L12),
	vpm ? msk_select_foreground(
		'HUE',MinimalHue,MaximalHue),
	vpm ? msk_select_foreground(
		'SATURATION',MinimalSaturation,MaximalSaturation),
	vpm ? msk_select_foreground(
		'BRIGHTNESS',MinimalBrightness,MaximalBrightness),
	vpm ? msk_erode_foreground(7),
	vpm ? msk_dilate_foreground(7),
	vpm ? blb_extract_blobs('Rats','TWO_PASS_BLOB_EXTRACTION'),
	vpm ? blb_fill_blobs,
	vpm ? blb_track_blobs,
	vpm ? trk_select_superior_track(
		'NUMBER_OF_FRAMES','DESCENDING_ORDER'),
	vpm ? pxl_select_image_channel('ALL'),
	vpm ? process_now.
--
divide_list(K,[p(X,Y)|R1],[p(X/K,Y/K)|R2]):-!,
	divide_list(K,R1,R2).
divide_list(_,_,[]).
--
frame_obtained:-
	video ? commit,
	T2== timer?milliseconds(),
	state ? get_beginning_time(T1),
	Delta== (T2 - T1) / 1000.0 * frame_rate,
	N== ?convert_to_integer(?round(Delta)),!,
	state ? set_current_frame(N),
	video ? get_recent_image(image1),
	vpm ? process_realtime_frame(image1),
	state ? increase_global_counter,
	draw_scene.
frame_obtained:-!.
--
data_transfer_completion:-!,
	-- con ? writeln("End of file!"),
	T2== timer?milliseconds(),
	state ? set_beginning_time(T2),
	video ? close,
	video ? open,
	video ? start.
--
data_transfer_error(ErrorCode):-!,
	con ? writeln("Error: ",ErrorCode).
--
draw_scene:-
	vpm ? commit,
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	-- vpm ? get_recent_image(image2),
	-- vpm ? get_preprocessed_image(image2),
	-- vpm ? get_background_image(image2),
	-- vpm ? get_sigma_image(image2),
	-- vpm ? get_foreground_image(image2),
	vpm ? get_synthesized_image(image2),
	graphics_window ? draw_image(image2,0,0,1,1),
	vpm ? get_tracks(Tracks),
	image2 ? get_size_in_pixels(IW,IH),
	draw_tracks(Tracks,IW,IH),
	draw_legend,
	graphics_window ? draw_now.
--
draw_tracks([Track|Rest],IW,IH):-!,
	draw_track(Track,IW,IH),
	draw_tracks(Rest,IW,IH).
draw_tracks(_,_,_).
--
draw_track({	identifier:Id,
		is_mature:IsMature,
		segments:Segments|_},
		IW,IH):-
	NC== ?mod(Id,26)+1,
	select_color(NC,Color),
	draw_first_blob_rectangle(Segments,IsMature,Color,IW,IH),
	draw_track_segments(Segments,{},IsMature,Color,IW,IH),
	fail.
draw_track(_,_,_).
--
select_color(1,'Green'):-!.
select_color(2,'DkGreen'):-!.
select_color(3,'Blue'):-!.
select_color(4,'Cyan'):-!.
select_color(5,'Magenta'):-!.
select_color(6,'Yellow'):-!.
select_color(7,'Orange'):-!.
select_color(8,'Pink'):-!.
select_color(9,'Violet'):-!.
select_color(10,'Brown'):-!.
select_color(11,'Maroon'):-!.
select_color(12,'Purple'):-!.
select_color(13,'Fuchsia'):-!.
select_color(14,'Lime'):-!.
select_color(15,'Olive'):-!.
select_color(16,'Navy'):-!.
select_color(17,'Teal'):-!.
select_color(18,'Aqua'):-!.
select_color(19,'Terracotta'):-!.
select_color(20,'Lilac'):-!.
select_color(21,'Gold'):-!.
select_color(22,'Indigo'):-!.
select_color(23,'RoyalBlue'):-!.
select_color(24,'Lemon'):-!.
select_color(25,'Emerald'):-!.
select_color(_,'SkyBlue').
--
draw_first_blob_rectangle([Segment|_],IsMature,Color,IW,IH):-
	Segment == {coordinates:[Blob|_]|_},!,
	draw_blob_rectangle(Blob,IsMature,Color,1,IW,IH).
draw_first_blob_rectangle(_,_,_,_,_).
--
draw_track_segments([Segment2],Segment1,IsMature,C,IW,IH):-!,
	draw_track_segment(
		Segment2,Segment1,'yes',IsMature,C,IW,IH).
draw_track_segments([Segment2|Rest],Segment1,IsMature,C,IW,IH):-
	draw_track_segment(
		Segment2,Segment1,'no',IsMature,C,IW,IH),
	draw_track_segments(Rest,Segment2,IsMature,C,IW,IH).
draw_track_segments([],_,_,_,_,_).
--
draw_track_segment(Segment2,Segment1,IsLast,IsMature,Color,IW,IH):-
	Segment2 == {coordinates:TrackOfBlob|_},!,
	draw_track_of_blob(
		TrackOfBlob,{},IsLast,IsMature,Color,IW,IH),
	draw_segment_link(Segment2,Segment1,IW,IH).
draw_track_segment(_,_,_,_,_,_,_).
--
draw_track_of_blob([Blob2],Blob1,'yes',IsMature,Color,IW,IH):-!,
	draw_blob_rectangle(Blob2,IsMature,Color,3,IW,IH),
	draw_blob_link(Blob2,Blob1,Color,IW,IH).
draw_track_of_blob([Blob2|Rest],Blob1,IsLast,IsMature,Color,IW,IH):-!,
	draw_blob_link(Blob2,Blob1,Color,IW,IH),
	draw_track_of_blob(Rest,Blob2,IsLast,IsMature,Color,IW,IH).
draw_track_of_blob(_,_,_,_,_,_,_).
--
draw_blob_rectangle(Blob,IsMature,Color,LW,IW,IH):-
	Blob == {x:X0,y:Y0,width:W1,height:H1|_},
	select_dash_array(IsMature,DashArray),
	graphics_window ? set_pen(
		{color:Color,lineWidth:LW|DashArray}),!,
	graphics_window ? set_brush('off'),
	X2== (X0 - W1 / 2) / IW,
	Y2== (Y0 - H1 / 2) / IH,
	W2== W1 / IW,
	H2== H1 / IH,
	graphics_window ? draw_rectangle(X2,Y2,W2,H2).
draw_blob_rectangle(_,_,_,_,_,_).
--
select_dash_array('no',{dashArray:[3,5]}):-!.
select_dash_array(_,{}).
--
draw_blob_link(Blob2,Blob1,Color,IW,IH):-
	Blob2== {centroid_x:X2a,centroid_y:Y2a|_},
	Blob1== {centroid_x:X1a,centroid_y:Y1a|_},!,
	X1b== X1a / IW,
	Y1b== Y1a / IH,
	X2b== X2a / IW,
	Y2b== Y2a / IH,
	graphics_window ? set_brush('off'),
	graphics_window ? set_pen({color:Color,lineWidth:1}),
	graphics_window ? draw_line(X1b,Y1b,X2b,Y2b).
draw_blob_link(_,_,_,_,_).
--
draw_segment_link(Segment2,Segment1,IW,IH):-
	Segment2== {centroid_x1:X2a,centroid_y1:Y2a|_},
	Segment1== {centroid_x2:X1a,centroid_y2:Y1a|_},!,
	X1r== X1a / IW,
	Y1r== Y1a / IH,
	X2r== X2a / IW,
	Y2r== Y2a / IH,
	graphics_window ? set_brush('Green'),
	graphics_window ? set_pen({color:'Black',lineWidth:1}),
	graphics_window ? draw_line(X1r,Y1r,X2r,Y2r),
	draw_circle(X1r,Y1r),
	draw_circle(X2r,Y2r).
draw_segment_link(_,_,_,_).
--
draw_circle(X0,Y0):-
	X1== X0 - circle_radius,
	Y1== Y0 - circle_radius,
	Width== circle_radius * 2,
	Height== circle_radius * 2,
	graphics_window ? draw_ellipse(X1,Y1,Width,Height).
--
draw_legend:-
	state ? get_current_frame(FrameNumber),!,
	state ? get_stopwatch_time(Delay),
	state ? get_frame_counter(FrameQuantity),
	state ? get_global_counter(GlobalCounter),
	Time== Delay / 1000.0,
	FrameRate== FrameQuantity / Time,
	graphics_window ? set_brush('Red'),
	graphics_window ? set_font({size:18}),
	graphics_window ? set_text_alignment('LEFT','TOP'),
	graphics_window ? draw_text(
		0.02, 0.02,
		text?format(
			"Time: %3.2f [sec]; Frame: %d (%d)",
			Time,FrameNumber,GlobalCounter)),
	graphics_window ? set_text_alignment('RIGHT','TOP'),
	graphics_window ? draw_text(
		0.98, 0.02,
		text?format(
			"Frame Rate: %3.2f [Hz]",
			FrameRate)).
draw_legend.
]
-----------------------------------------------------------------------
class 'VideoReader' (specialized 'FFmpeg'):
--
constant:
--
	operating_mode		= 'PLAYING';
	-- operating_mode	= 'READING';
--
internal:
--
target_world;
--
[
frame_obtained:-!,
	target_world ? frame_obtained.
--
data_transfer_completion:-!,
	target_world ? data_transfer_completion.
--
data_transfer_error(ErrorCode):-!,
	target_world ? data_transfer_error(ErrorCode).
]
-----------------------------------------------------------------------
class 'ProgramState' (specialized 'Database'):
--
internal:
--
timer		= ('Timer');
--
[
CLAUSES:
--
get_beginning_time(Time):-
	Item== ?match(beginning_time(_)),
	Item == beginning_time(Time),!.
--
set_beginning_time(Time):-
	retract_all(beginning_time(_)),
	append(beginning_time(Time)),
	reset_stopwatch,
	reset_frame_counter.
--
get_current_frame(N):-
	Item== ?match(current_frame(_)),
	Item == current_frame(N),!.
--
set_current_frame(N):-
	retract_all(current_frame(_)),
	append(current_frame(N)),
	increase_frame_counter.
--
reset_stopwatch:-
	retract_all(stop_watch_time(_)),
	append(stop_watch_time(timer?milliseconds())).
--
get_stopwatch_time(Delay):-
	T2== timer?milliseconds(),
	Item== ?match(stop_watch_time(_)),
	Item == stop_watch_time(T1),!,
	Delay== T2 - T1.
get_stopwatch_time(0).
--
reset_frame_counter:-
	retract_all(frame_counter(_)).
--
increase_frame_counter:-
	Item== ?match(frame_counter(_)),
	Item == frame_counter(N),!,
	retract_all(frame_counter(_)),
	append(frame_counter(N+1)).
increase_frame_counter:-
	append(frame_counter(1)).
--
get_frame_counter(N):-
	Item== ?match(frame_counter(_)),
	Item == frame_counter(N),!.
get_frame_counter(0).
--
increase_global_counter:-
	Item== ?match(global_counter(_)),
	Item == global_counter(N),!,
	retract_all(global_counter(_)),
	append(global_counter(N+1)).
increase_global_counter:-
	append(global_counter(1)).
--
get_global_counter(N):-
	Item== ?match(global_counter(_)),
	Item == global_counter(N),!.
get_global_counter(0).
]
-----------------------------------------------------------------------
