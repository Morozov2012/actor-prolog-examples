-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2017 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Vision";
-----------------------------------------------------------------------
class 'Main' (specialized 'Timer'):
--
constant:
--
	data_directory		= "F:/= Video =/DSC_0109";
	file_name_format	= "DSC_0109%05d.jpg";
	frame_rate		= 29.97;
--
internal:
--
	vpm		= ('VideoProcessingMachine',
				minimal_training_interval= 100,
				minimal_blob_size= 300,
				horizontal_blob_border= 3,
				vertical_blob_border= 3,
				horizontal_extra_border_coefficient= -1.0,
				vertical_extra_border_coefficient= -1.0,
				synthesized_image_transparency= 48);
	graphics_window	= ('Canvas2D',
				background_color= 'SystemControl',
				y= 0,
				height= 22);
	prompt_window	= ('Report',
				y= 22,
				height= 3);
	text		= ('Text');
	image1		= ('BufferedImage');
	image2		= ('BufferedImage');
	state		= ('ProgramState');
--
[
goal:-!,
	graphics_window ? show,
	prompt_window ? write(
		"The data are coming from "
		"the Actor Prolog project."),
	Time0== ?milliseconds(),
	state ? set_beginning_time(Time0),
	set_period(1/(frame_rate*2),0),
	input_instructions,
	activate.
--
input_instructions:-
	vpm ? suspend_processing,
	vpm ? retract_all_instructions,
	vpm ? img_get_subimage(444,250,-1,-1),
	-- vpm ? img_apply_gaussian_filter(1),
	vpm ? pxl_select_image_channel('RED'),
	vpm ? msk_subtract_nonparametric_background(25,0.01,1000),
	vpm ? msk_apply_rank_filter(5),
	vpm ? msk_push_foreground('SELECT_ALL'),
	vpm ? pxl_select_image_channel('GREEN'),
	vpm ? msk_subtract_nonparametric_background(25,0.01,1000),
	vpm ? msk_apply_rank_filter(5),
	vpm ? msk_push_foreground('SELECT_ALL'),
	vpm ? pxl_select_image_channel('BLUE'),
	vpm ? msk_subtract_nonparametric_background(25,0.01,1000),
	vpm ? msk_apply_rank_filter(5),
	vpm ? msk_pop_foreground('OR'),
	vpm ? msk_pop_foreground('OR'),
	vpm ? msk_apply_rank_filter(5),
	vpm ? blb_extract_blobs('MovingObjects','MULTIPASS_BLOB_EXTRACTION'),
	vpm ? pxl_select_image_channel('ALL'),
	vpm ? process_now.
--
tick:-
	T2== ?milliseconds(),
	state ? get_beginning_time(T1),
	Delta== (T2 - T1) / 1000.0 * frame_rate,
	N== ?convert_to_integer(?round(Delta)),!,
	load_figure(N,T2).
--
load_figure(N2,_):-
	state ? get_current_frame(N1),
	N1 == N2,!.
load_figure(N,_):-
	state ? set_current_frame(N),
	ImageToBeLoaded==
		data_directory + "/" +
		text?format(file_name_format,N),
	image1 ? does_exist(ImageToBeLoaded),!,
	-- image1 ? load(ImageToBeLoaded,3,3,0,0),
	image1 ? load(ImageToBeLoaded,2,2,0,0),
	-- image1 ? load(ImageToBeLoaded),
	vpm ? process_realtime_frame(image1),
	state ? increase_global_counter,
	draw_scene.
load_figure(_,T2):-
	state ? set_beginning_time(T2).
--
draw_scene:-
	vpm ? commit,
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	-- vpm ? get_recent_image(image2),
	-- vpm ? get_preprocessed_image(image2),
	-- vpm ? get_background_image(image2),
	-- vpm ? get_sigma_image(image2),
	-- vpm ? get_foreground_image(image2),
	vpm ? get_synthesized_image(image2),
	vpm ? get_blobs(BlobList),
	graphics_window ? draw_image(image2,0,0,1,1),
	image2 ? get_size_in_pixels(IW,IH),
	draw_blob_list(BlobList,IW,IH),
	draw_legend,
	graphics_window ? draw_now.
--
draw_blob_list([Blob|Rest],IW,IH):-
	draw_blob(Blob,IW,IH),
	draw_blob_list(Rest,IW,IH).
draw_blob_list([],_,_).
--
draw_blob(Blob,IW,IH):-
	Blob == {identifier:Id,x:X0,y:Y0,width:W1,height:H1|_},
	graphics_window ? set_pen({color:'Yellow',lineWidth:3}),
	graphics_window ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	X2== (X0 - W1 / 2) / IW,
	Y2== (Y0 - H1 / 2) / IH,
	W2== W1 / IW,
	H2== H1 / IH,
	graphics_window ? draw_rectangle(X2,Y2,W2,H2),
	draw_blob_identifier(Id,X0,Y0,IW,IH),
	fail.
draw_blob(_,_,_).
--
draw_blob_identifier(Id,X0,Y0,IW,IH):-!,
	Text== text?format("%d",Id),
	graphics_window ? set_font({size:18}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	graphics_window ? draw_text(X0/IW,Y0/IH,Text).
--
draw_legend:-
	state ? get_current_frame(FrameNumber),!,
	state ? get_stopwatch_time(Delay),
	state ? get_frame_counter(FrameQuantity),
	state ? get_global_counter(GlobalCounter),
	Time== Delay / 1000.0,
	FrameRate== FrameQuantity / Time,
	graphics_window ? set_brush('Red'),
	graphics_window ? set_font({size:32}),
	graphics_window ? set_text_alignment('LEFT','TOP'),
	graphics_window ? draw_text(
		0.02, 0.02,
		text?format(
			"Time: %3.2f [sec]; Frame: %d (%d)",
			Time,FrameNumber,GlobalCounter)),
	graphics_window ? set_text_alignment('RIGHT','TOP'),
	graphics_window ? draw_text(
		0.98, 0.02,
		text?format(
			"Frame Rate: %3.2f [Hz]",
			FrameRate)).
draw_legend.
]
-----------------------------------------------------------------------
class 'ProgramState' (specialized 'Database'):
--
internal:
--
timer		= ('Timer');
--
[
CLAUSES:
--
get_beginning_time(Time):-
	Item== ?match(beginning_time(_)),
	Item == beginning_time(Time),!.
--
set_beginning_time(Time):-
	retract_all(beginning_time(_)),
	append(beginning_time(Time)),
	reset_stopwatch,
	reset_frame_counter.
--
get_current_frame(N):-
	Item== ?match(current_frame(_)),
	Item == current_frame(N),!.
--
set_current_frame(N):-
	retract_all(current_frame(_)),
	append(current_frame(N)),
	increase_frame_counter.
--
reset_stopwatch:-
	retract_all(stop_watch_time(_)),
	append(stop_watch_time(timer?milliseconds())).
--
get_stopwatch_time(Delay):-
	T2== timer?milliseconds(),
	Item== ?match(stop_watch_time(_)),
	Item == stop_watch_time(T1),!,
	Delay== T2 - T1.
get_stopwatch_time(0).
--
reset_frame_counter:-
	retract_all(frame_counter(_)).
--
increase_frame_counter:-
	Item== ?match(frame_counter(_)),
	Item == frame_counter(N),!,
	retract_all(frame_counter(_)),
	append(frame_counter(N+1)).
increase_frame_counter:-
	append(frame_counter(1)).
--
get_frame_counter(N):-
	Item== ?match(frame_counter(_)),
	Item == frame_counter(N),!.
get_frame_counter(0).
--
increase_global_counter:-
	Item== ?match(global_counter(_)),
	Item == global_counter(N),!,
	retract_all(global_counter(_)),
	append(global_counter(N+1)).
increase_global_counter:-
	append(global_counter(1)).
--
get_global_counter(N):-
	Item== ?match(global_counter(_)),
	Item == global_counter(N),!.
get_global_counter(0).
]
-----------------------------------------------------------------------
