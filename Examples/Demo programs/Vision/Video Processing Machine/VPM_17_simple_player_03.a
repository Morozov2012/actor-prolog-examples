-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2017 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Vision";
-----------------------------------------------------------------------
project: (('DialogHSB'))
-----------------------------------------------------------------------
class 'DialogHSB' (specialized 'Dialog'):
--
constant:
--
	data_directory =
		"F:/= Video =/W_L_Object 10 07 2017/"
		"22 object/2 session";
--
	file_name_format	= "time 17-07-10 15-16-42 %04d.jpg";
	frame_rate		= 30.0;
	subsampling		= 2;
--
constant:
--
-- Warning: This matrix corresponds to
-- the "time 17-07-10 15-16-42.avi" data set only.
--
inverse_transformation_matrix	= [
		[ 0.0011, 0.0000,0.0001],
		[ 0.0000, 0.0010,0.0001],
		[-0.0670,-0.0839,1.0000]];
--
internal:
--
	vpm		= ('VideoProcessingMachine',
				minimal_training_interval= -1,
				-- maximal_training_interval= 100,
				horizontal_blob_border= 10,
				vertical_blob_border= 10,
				horizontal_extra_border_coefficient= -1.0,
				vertical_extra_border_coefficient= -1.0,
				minimal_blob_intersection_area= 1,
				minimal_blob_size= 1,
				maximal_blob_invisibility_interval= 30,
				minimal_track_duration= 50,
				maximal_track_retention_interval= 50,
				maximal_chronicle_length= 1000,
				inverse_transformation_matrix,
				synthesized_image_transparency= 48);
	timer		= ('SpecialTimer',
				target_world= self);
	graphics_window	= ('Canvas2D',
				background_color= 'SystemControl',
				y= 0,
				height= 22);
	text		= ('Text');
	image1		= ('BufferedImage');
	image2		= ('BufferedImage');
	state		= ('ProgramState');
	accumulator	= ('Accumulator');
	protocol	= ('Protocol');
	con		= ('Console');
--
variable:
--
	first_frame;
	last_frame;
--
constant:
--
	circle_radius	= 0.005;
--
[
goal:-!,
	maximize,
	timer ? set_period(1/(frame_rate*2),0),
	detect_minimal_file_number(1,MinFileNumber),
	detect_maximal_file_number(1,MaxFileNumber,MinFileNumber),
	put(1002,[MinFileNumber,MaxFileNumber]),
	put(1004,[MinFileNumber,MaxFileNumber]),
	put('first_frame',MinFileNumber),
	put('last_frame',MaxFileNumber),
	set_control_text_color("rewind",'Blue'),
	modified_control(0),
	play_video.
--
detect_minimal_file_number(N,N):-
	ImageToBeLoaded==
		data_directory + "/" +
		text?format(file_name_format,N),
	image1 ? does_exist(ImageToBeLoaded),!.
detect_minimal_file_number(N1,N2):-
	N1 < 1_000_000,!,
	detect_minimal_file_number(N1+1,N2).
detect_minimal_file_number(_,1).
--
detect_maximal_file_number(N1,N3,Min):-
	N2== N1 + 1,
	ImageToBeLoaded==
		data_directory + "/" +
		text?format(file_name_format,N2),
	image1 ? does_exist(ImageToBeLoaded),!,
	show_frame_range_if_necessary(Min,N2),
	detect_maximal_file_number(N2,N3,Min).
detect_maximal_file_number(N,N,_).
--
show_frame_range_if_necessary(Min,Max):-
	?mod(Max,1000) == 0,!,
	put(1004,[Min,Max]),
	put('last_frame',Max).
show_frame_range_if_necessary(_,_).
-----------------------------------------------------------------------
action("rewind"):-!,
	pause_video,
	protocol ? retract_all(),
	MinFileNumber== ?cast("INTEGER",?get('first_frame')),
	T2== timer?milliseconds(),
	load_figure(MinFileNumber,T2).
action("100_steps_back"):-!,
	go_forward(100).
action("10_steps_back"):-!,
	go_forward(10).
action("1_step_back"):-!,
	go_forward(1).
action("play"):-!,
	play_or_pause_video.
action("1_step_forward"):-!,
	go_backward(1).
action("10_steps_forward"):-!,
	go_backward(10).
action("100_steps_forward"):-!,
	go_backward(100).
--
go_forward(StepNumber):-
	state ? get_current_frame(N),!,
	pause_video,
	MinFileNumber== ?cast("INTEGER",?get('first_frame')),
	T2== timer?milliseconds(),
	load_figure(?max(N-StepNumber,MinFileNumber),T2).
go_forward(_).
--
go_backward(StepNumber):-
	state ? get_current_frame(N),!,
	pause_video,
	MaxFileNumber== ?cast("INTEGER",?get('last_frame')),
	T2== timer?milliseconds(),
	load_figure(?min(N+StepNumber,MaxFileNumber),T2).
go_backward(_).
--
play_or_pause_video:-
	timer ? is_active,!,
	pause_video.
play_or_pause_video:-
	play_video.
--
play_video:-
	state ? get_current_frame(N1),
	FFN== ?val("INTEGER",?get('first_frame')),!,
	T2== timer?milliseconds(),
	N0== N1 - FFN + 2,
	T1== ?round(T2 - N0 / frame_rate * 1000.0),
	state ? set_beginning_time(T1),
	activate_timer.
play_video:-
	Time0== timer?milliseconds(),
	state ? set_beginning_time(Time0),
	activate_timer.
--
activate_timer:-
	timer ? activate,
	set_control_text("play","&Pause"),
	set_control_text_color("play",'Red').
--
pause_video:-
	timer ? suspend,
	set_control_text("play","&Play"),
	set_control_text_color("play",'DkGreen').
-----------------------------------------------------------------------
modified_control(_):-!,
	vpm ? suspend_processing,
	vpm ? retract_all_instructions,
	L11== [	p(57,89),p(589,61),p(606,212),p(602,411),
		p(357,409),p(217,421),p(51,417)],
	divide_list(subsampling,L11,L12),
	vpm ? msk_select_polygon(L12),
	--
	vpm ? msk_push_foreground,
	vpm ? msk_select_foreground('SATURATION',0,50),
	vpm ? msk_select_foreground('BRIGHTNESS',0,150),
	vpm ? pxl_select_image_channel('BRIGHTNESS'),
	vpm ? pxl_compute_gradient('MODULUS'),
	vpm ? pxl_normalize_pixels(0,10),
	vpm ? pxl_smooth_image(13),
	vpm ? msk_select_foreground(0,150),
	vpm ? msk_erode_foreground(5),
	vpm ? msk_dilate_foreground(5),
	vpm ? blb_extract_blobs('body','TWO_PASS_BLOB_EXTRACTION'),
	vpm ? blb_select_superior_blob('FOREGROUND_AREA'),
	vpm ? blb_fill_blobs,
	vpm ? msk_pop_foreground,
	--
	vpm ? blb_set_blob_borders(15,15),
	--
	vpm ? pxl_withdraw_pixel_preprocessing,
	vpm ? msk_push_foreground,
	vpm ? msk_select_foreground('HUE',185,245),
	vpm ? msk_select_foreground('SATURATION',50,255),
	vpm ? msk_select_foreground('BRIGHTNESS',0,150),
	vpm ? msk_erode_foreground(2),
	vpm ? msk_dilate_foreground(2),
	vpm ? blb_extract_blobs('cap','TWO_PASS_BLOB_EXTRACTION'),
	vpm ? blb_select_superior_blob('FOREGROUND_AREA'),
	vpm ? blb_fill_blobs,
	vpm ? msk_pop_foreground,
	--
	vpm ? blb_set_blob_borders(1,1),
	--
	vpm ? msk_push_foreground,
	vpm ? msk_select_foreground('HUE',111,138),
	vpm ? msk_select_foreground('SATURATION',50,255),
	vpm ? msk_erode_foreground(2),
	vpm ? msk_dilate_foreground(2),
	vpm ? blb_extract_blobs('green_object','TWO_PASS_BLOB_EXTRACTION'),
	vpm ? blb_select_superior_blob('FOREGROUND_AREA'),
	vpm ? blb_fill_blobs,
	vpm ? msk_pop_foreground,
	--
	vpm ? msk_push_foreground,
	vpm ? msk_select_foreground('HUE',147,183),
	vpm ? msk_select_foreground('SATURATION',103,255),
	vpm ? msk_erode_foreground(2),
	vpm ? msk_dilate_foreground(2),
	vpm ? blb_extract_blobs('blue_object','TWO_PASS_BLOB_EXTRACTION'),
	vpm ? blb_select_superior_blob('FOREGROUND_AREA'),
	vpm ? blb_fill_blobs,
	vpm ? msk_pop_foreground,
	--
	vpm ? blb_track_blobs,
	vpm ? pxl_select_image_channel('ALL'),
	vpm ? process_now.
--
divide_list(K,[p(X,Y)|R1],[p(X/K,Y/K)|R2]):-!,
	divide_list(K,R1,R2).
divide_list(_,_,[]).
-----------------------------------------------------------------------
tick:-
	T2== timer?milliseconds(),
	state ? get_beginning_time(T1),
	Delta== (T2 - T1) / 1000.0 * frame_rate,
	N== ?convert_to_integer(?round(Delta)),
	FFN== ?val("INTEGER",?get('first_frame')),!,
	load_figure(N+FFN-1,T2).
tick.
--
load_figure(N2,_):-
	state ? get_current_frame(N1),
	N1 == N2,!.
load_figure(N,_):-
	LFN== ?val("INTEGER",?get('last_frame')),
	N <= LFN,
	state ? set_current_frame(N),
	ImageToBeLoaded==
		data_directory + "/" +
		text?format(file_name_format,N),
	image1 ? does_exist(ImageToBeLoaded),!,
	image1 ? load(	ImageToBeLoaded,
			subsampling,subsampling,0,0),
	vpm ? process_realtime_frame(image1),
	state ? increase_global_counter,
	draw_scene(N).
load_figure(_,T2):-
	protocol ? save_protocol("SimplePlayer.log"),
	protocol ? retract_all(),
	state ? set_beginning_time(T2).
--
draw_scene(N):-
	vpm ? commit,
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	-- vpm ? get_recent_image(image2),
	-- vpm ? get_preprocessed_image(image2),
	-- vpm ? get_background_image(image2),
	-- vpm ? get_sigma_image(image2),
	-- vpm ? get_foreground_image(image2),
	vpm ? get_synthesized_image(image2),
	graphics_window ? draw_image(image2,0,0,1,1),
	-- vpm ? select_superior_track(
	--	'NUMBER_OF_FRAMES','DESCENDING_ORDER'),
	vpm ? get_chronicle(Chronicle),
	image2 ? get_size_in_pixels(IW,IH),
	draw_chronicle(Chronicle,N,IW,IH),
	draw_legend,
	graphics_window ? draw_now.
--
draw_chronicle(Chronicle,FN,IW,IH):-
	draw_dynamic_object('cap',Chronicle,IW,IH),
	draw_dynamic_object('body',Chronicle,IW,IH),
	draw_static_object('green_object',Chronicle,IW,IH),
	draw_static_object('blue_object',Chronicle,IW,IH),
	draw_arrows(Chronicle,FN,IW,IH).
--
draw_dynamic_object(Type,Chronicle,IW,IH):-
	Chronicle == [{blobs:Blobs|_}|_],
	get_blob_of_type(Type,Blobs,Object),
	Object== {x:X0,y:Y0,width:W1,height:H1|_},
	compute_object_color(Type,Color),
	graphics_window ? set_pen({color:Color,lineWidth:2}),!,
	graphics_window ? set_brush('off'),
	X2== (X0 - W1 / 2) / IW,
	Y2== (Y0 - H1 / 2) / IH,
	W2== W1 / IW,
	H2== H1 / IH,
	graphics_window ? draw_rectangle(X2,Y2,W2,H2).
draw_dynamic_object(_,_,_,_).
--
draw_static_object(Type,Chronicle,_,_):-
	Chronicle == [{blobs:Blobs|_}|_],
	get_blob_of_type(Type,Blobs,Object),
	Object== {x:X0,y:Y0,width:Width,height:Height|_},
	HalfWidth== Width / 2,
	HalfHeight== Height / 2,
	X1== X0 - HalfWidth,
	X2== X0 + HalfWidth,
	Y1== Y0 - HalfHeight,
	Y2== Y0 + HalfHeight,
	accumulator ? add_value(Type,'x1',X1),
	accumulator ? add_value(Type,'x2',X2),
	accumulator ? add_value(Type,'y1',Y1),
	accumulator ? add_value(Type,'y2',Y2),
	fail.
draw_static_object(Type,_,IW,IH):-
	accumulator ? get_average_value(Type,'x1',X1b),
	accumulator ? get_average_value(Type,'x2',X2b),
	accumulator ? get_average_value(Type,'y1',Y1b),
	accumulator ? get_average_value(Type,'y2',Y2b),!,
	compute_object_color(Type,Color),
	graphics_window ? set_pen({color:Color,lineWidth:2}),!,
	graphics_window ? set_brush('off'),
	X1p== X1b / IW,
	X2p== X2b / IW,
	Y1p== Y1b / IH,
	Y2p== Y2b / IH,
	Width== X2p - X1p,
	Height== Y2p - Y1p,
	graphics_window ? draw_rectangle(X1p,Y1p,Width,Height).
draw_static_object(_,_,_,_).
--
compute_object_color('cap','Cyan'):-!.
compute_object_color('body','Orange'):-!.
compute_object_color('green_object','DkGreen'):-!.
compute_object_color('blue_object','Navy'):-!.
compute_object_color(_,'Magenta').
--
draw_arrows(Chronicle,FrameNumber,IW,IH):-
	Chronicle == [{time:Time,blobs:Blobs|_}|_],
	get_blob_of_type('body',Blobs,Body),
	get_recent_blob_of_type('cap',Chronicle,0,Cap),
	get_blob_of_type('green_object',Blobs,GreenObject),
	get_blob_of_type('blue_object',Blobs,BlueObject),
	Body== {centroid_x:X1a,centroid_y:Y1a|_},
	Cap== {centroid_x:X2a,centroid_y:Y2a|_},
	compute_distance(Body,Cap,RatLength),
	RatLength <= 0.25,!,
	select_object(
		Cap,GreenObject,BlueObject,
		Object3,X3a,Y3a,Distance3),
	X1b== X1a / IW,
	Y1b== Y1a / IH,
	X2b== X2a / IW,
	Y2b== Y2a / IH,
	X3b== X3a / IW,
	Y3b== Y3a / IH,
	compute_angle(Body,Cap,X3a,Y3a,Angle),
	determine_nearest_point(Body,Object3,X4a,Y4a,Distance4),
	X4b== X4a / IW,
	Y4b== Y4a / IH,
	compute_velocity_of_body(
		Chronicle,0.0,0.0,0,0.0,0,10,Velocity),
	detect_sniffing(
		Distance3,Distance4,Angle,Velocity,Sniffing),
	select_sniffing_color(Sniffing,FrameNumber,ArrowColor),
	-- Draw line: body - nearest point (3) of the object.
	graphics_window ? set_brush('Blue'),
	graphics_window ? set_pen(
		{color:'Blue',lineWidth:1,dashArray:[3,5]}),
	graphics_window ? draw_line(X1b,Y1b,X3b,Y3b),
	-- draw_circle(X3b,Y3b,1.0),
	-- Draw line: cap - nearest point (3) of the object.
	graphics_window ? set_brush('Lemon'),
	graphics_window ? set_pen(
		{color:'Lemon',lineWidth:1,dashArray:[3,5]}),
	graphics_window ? draw_line(X2b,Y2b,X3b,Y3b),
	draw_circle(X3b,Y3b,1.0),
	-- Draw line: body - nearest point (4) of the object.
	graphics_window ? set_brush('Pink'),
	graphics_window ? set_pen(
		{color:'Pink',lineWidth:1,dashArray:[3,5]}),
	graphics_window ? draw_line(X1b,Y1b,X4b,Y4b),
	draw_circle(X4b,Y4b,1.0),
	-- Draw line: body - cap.
	graphics_window ? set_brush(ArrowColor),
	graphics_window ? set_pen({color:ArrowColor,lineWidth:1}),
	graphics_window ? draw_line(X1b,Y1b,X2b,Y2b),
	draw_circle(X1b,Y1b,1.0),
	draw_circle(X2b,Y2b,3.0),
	-- Draw text label: angle.
	graphics_window ? set_pen({color:'Aqua',lineWidth:1}),
	draw_text_label(X1b,Y1b-0.02,text?format("%1.2f",Angle)),
	-- Draw text label: velocity.
	graphics_window ? set_pen({color:'Fuchsia',lineWidth:1}),
	draw_text_label(X1b,Y1b+0.02,text?format("%1.3f",Velocity)),
	-- Draw text label: the distance between the cap and
	-- the nearest point (3) of the object.
	X5b== (X2b + X3b) / 2,
	Y5b== (Y2b + Y3b) / 2,
	graphics_window ? set_pen({color:'Lemon',lineWidth:1}),
	draw_text_label(X5b,Y5b-0.02,text?format("%1.3f",Distance3)),
	-- Draw text label: the distance between the body and
	-- the nearest point (4) of the object.
	X6b== (X1b + X4b) / 2,
	Y6b== (Y1b + Y4b) / 2,
	graphics_window ? set_pen({color:'Pink',lineWidth:1}),
	draw_text_label(X6b,Y6b-0.02,text?format("%1.3f",Distance4)),
	--
	protocol ? add_frame(
		Time,FrameNumber,Distance3,Distance4,
		Angle,Velocity,Sniffing),
	show_recognition_results.
draw_arrows(_,_,_,_).
--
detect_sniffing(Distance3,_,_,_,1):-
	Distance3 <= 0.02,!.
detect_sniffing(Distance3,Distance4,Angle,Velocity,0):-
	M1== 1-?fuzzy_metrics(Distance3,0.04,0.005),
	M2== ?fuzzy_metrics(Distance4/Distance3,1.3,0.05),
	M3== 1-?fuzzy_metrics(Angle,50.0,5.0),
	M4== 1-?fuzzy_metrics(Angle/Distance3,1700.0,100.0),
	M5== 1-?fuzzy_metrics(Velocity,0.03,0.01),
	P== M1*M2*M3*M4*M5,
	P < ?power(0.5,5),!.
detect_sniffing(_,_,_,_,1).
--
fuzzy_metrics(X,Threshold,Halfwidth) = 1.0 :-
	X >= Threshold + Halfwidth,!.
fuzzy_metrics(X,Threshold,Halfwidth) = 0.0 :-
	X <= Threshold - Halfwidth,!.
fuzzy_metrics(X,Threshold,Halfwidth) = Value :-
	Value== (X-Threshold+Halfwidth) * (1 / (2*Halfwidth)).
--
select_sniffing_color(1,FrameNumber,'Green'):-
	is_marked_by_expert(FrameNumber),!,
	protocol ? register_a_true_positive_detection.
select_sniffing_color(0,FrameNumber,'Yellow'):-
	is_marked_by_expert(FrameNumber),!,
	protocol ? register_a_false_negative_detection.
select_sniffing_color(1,_,'Magenta'):-!,
	protocol ? register_a_false_positive_detection.
select_sniffing_color(_,_,'Gray'):-
	protocol ? register_a_true_negative_detection.
--
is_marked_by_expert(FrameNumber):-
	ground_truth(Beginning,End),
	Beginning <= FrameNumber,
	FrameNumber <= End,!.
--
ground_truth(127,390).
ground_truth(1352,1728). -- 1573 (1728)
ground_truth(1816,1901).
ground_truth(1946,2903).
ground_truth(2990,3057).
ground_truth(3425,3538).
ground_truth(4213,5434).
-----------------------------------------------------------------------
select_object(Cap,Object1,Object2,Object3,X3,Y3,Distance3):-
	determine_nearest_point(Cap,Object1,X1,Y1,Distance1),
	determine_nearest_point(Cap,Object2,X2,Y2,Distance2),
	select_nearest_object(
		Object1,X1,Y1,Distance1,
		Object2,X2,Y2,Distance2,
		Object3,X3,Y3,Distance3).
--
select_nearest_object(
		Object1,X1,Y1,Distance1,
		_,_,_,Distance2,
		Object1,X1,Y1,Distance1):-
	Distance1 <= Distance2,!.
select_nearest_object(
		_,_,_,_,
		Object2,X2,Y2,Distance2,
		Object2,X2,Y2,Distance2).
--
determine_nearest_point(Cap,Object,Xn,Yn,Distance):-
	Cap== {centroid_x:X1,centroid_y:Y1|_},
	Object== {type:ObjectType|_},
	accumulator ? get_average_value(ObjectType,'x1',X21),
	accumulator ? get_average_value(ObjectType,'x2',X22),
	accumulator ? get_average_value(ObjectType,'y1',Y21),
	accumulator ? get_average_value(ObjectType,'y2',Y22),!,
	determine_nearest_point(
		X1,Y1,X21,X22,Y21,Y22,Xn,Yn,Distance).
determine_nearest_point(_,_,_,_,_):-
	break('Error: a blob has no co-ordinates.').
--
determine_nearest_point(X1,Y1,X21,X22,Y21,Y22,X3,Y3,0.0):-
	X21 <= X1, X1 <= X22,
	Y21 <= Y1, Y1 <= Y22,!,
	convert_integer_to_real(X1,X3),
	convert_integer_to_real(Y1,Y3).
determine_nearest_point(X1,Y1,X21,_,Y21,Y22,X21,Y3,Distance):-
	X1 < X21,
	Y21 <= Y1, Y1 <= Y22,!,
	convert_integer_to_real(Y1,Y3),
	compute_physical_distance(X1,Y1,X21,Y3,Distance).
determine_nearest_point(X1,Y1,_,X22,Y21,Y22,X22,Y3,Distance):-
	X1 > X22,
	Y21 <= Y1, Y1 <= Y22,!,
	convert_integer_to_real(Y1,Y3),
	compute_physical_distance(X1,Y1,X22,Y3,Distance).
determine_nearest_point(X1,Y1,X21,X22,Y21,_,X3,Y21,Distance):-
	Y1 < Y21,
	X21 <= X1, X1 <= X22,!,
	convert_integer_to_real(X1,X3),
	compute_physical_distance(X1,Y1,X3,Y21,Distance).
determine_nearest_point(X1,Y1,X21,X22,_,Y22,X3,Y22,Distance):-
	Y1 > Y22,
	X21 <= X1, X1 <= X22,!,
	convert_integer_to_real(X1,X3),
	compute_physical_distance(X1,Y1,X3,Y22,Distance).
determine_nearest_point(X1,Y1,X21,_,Y21,_,X21,Y21,Distance):-
	X1 < X21, Y1 < Y21,!,
	compute_physical_distance(X1,Y1,X21,Y21,Distance).
determine_nearest_point(X1,Y1,X21,_,_,Y22,X21,Y22,Distance):-
	X1 < X21, Y1 > Y22,!,
	compute_physical_distance(X1,Y1,X21,Y22,Distance).
determine_nearest_point(X1,Y1,_,X22,Y21,_,X22,Y21,Distance):-
	X1 > X22, Y1 < Y21,!,
	compute_physical_distance(X1,Y1,X22,Y21,Distance).
determine_nearest_point(X1,Y1,_,X22,_,Y22,X22,Y22,Distance):-
	X1 > X22, Y1 > Y22,!,
	compute_physical_distance(X1,Y1,X22,Y22,Distance).
determine_nearest_point(_,_,_,_,_,_,_,_,_):-
	break('Error: I cannot compute a distance.').
-----------------------------------------------------------------------
compute_angle(Body,Cap,X3a,Y3a,Angle):-
	compute_distance(Cap,X3a,Y3a,A),
	compute_distance(Body,X3a,Y3a,B),
	compute_distance(Body,Cap,C),
	P== (A+B+C)/2,
	R== ?sqrt((P-A)*(P-B)*(P-C)/P),
	Angle== ?arctan(R/(P-A)) / ?pi() * 360.
--
compute_distance(Body,Object,Distance):-
	Body== {centroid_x:X1,centroid_y:Y1|_},
	Object== {centroid_x:X2,centroid_y:Y2|_},!,
	compute_physical_distance(X1,Y1,X2,Y2,Distance).
compute_distance(_,_,_):-
	break('Error: a blob has no co-ordinates.').
--
compute_distance(Body,X2,Y2,Distance):-
	Body== {centroid_x:X1,centroid_y:Y1|_},!,
	compute_physical_distance(X1,Y1,X2,Y2,Distance).
compute_distance(_,_,_,_):-
	break('Error: a blob has no co-ordinates.').
--
compute_physical_distance(X1a,Y1a,X2a,Y2a,Distance):-
	convert_numerical_to_integer(X1a,X1p),
	convert_numerical_to_integer(Y1a,Y1p),
	convert_numerical_to_integer(X2a,X2p),
	convert_numerical_to_integer(Y2a,Y2p),
	vpm ? physical_coordinates(X1p,Y1p,X1r,Y1r),
	vpm ? physical_coordinates(X2p,Y2p,X2r,Y2r),
	Distance== ?sqrt(?power(X1r-X2r,2)+?power(Y1r-Y2r,2)).
-----------------------------------------------------------------------
compute_velocity_of_body(
		[{time:Time2,blobs:Blobs|_}|Rest],
		X1r,Y1r,Time1,
		Sum,N,Interval,MeanVelocity):-
	Interval > 0,
	N > 0,
	get_blob_of_type('body',Blobs,Body),
	Body== {centroid_x:X2p,centroid_y:Y2p|_},!,
	vpm ? physical_coordinates(X2p,Y2p,X2r,Y2r),
	Distance== ?sqrt(?power(X1r-X2r,2)+?power(Y1r-Y2r,2)),
	TimeInSeconds== (Time1 - Time2) / 1000,
	Velocity== Distance / TimeInSeconds,
	compute_velocity_of_body(
		Rest,X2r,Y2r,Time2,
		Sum+Velocity,N+1,
		Interval-1,MeanVelocity).
compute_velocity_of_body(
		[{time:Time2,blobs:Blobs|_}|Rest],
		_,_,_,_,N,Interval,MeanVelocity):-
	Interval > 0,
	N == 0,
	get_blob_of_type('body',Blobs,Body),
	Body== {centroid_x:X2p,centroid_y:Y2p|_},!,
	vpm ? physical_coordinates(X2p,Y2p,X2r,Y2r),
	compute_velocity_of_body(
		Rest,X2r,Y2r,Time2,
		0.0,1,Interval-1,
		MeanVelocity).
compute_velocity_of_body(
		[_|Rest],X1r,Y1r,
		Time1,	Sum,N,
		Interval,MeanVelocity):-!,
	compute_velocity_of_body(
		Rest,X1r,Y1r,Time1,Sum,N,
		Interval-1,MeanVelocity).
compute_velocity_of_body(_,_,_,_,Sum,N,_,MeanVelocity):-
	N > 1,!,
	MeanVelocity== Sum / (N-1).
compute_velocity_of_body(_,_,_,_,_,_,_,0.0).
-----------------------------------------------------------------------
convert_integer_to_real(I,R):-
	R== ?convert_to_real(I),!.
convert_integer_to_real(_,_):-
	break('Error: I cannot convert an integer to the real.').
--
convert_integer_to_real(I,R):-
	R== ?convert_to_real(I),!.
convert_integer_to_real(_,_):-
	break('Error: I cannot convert an integer to the real.').
--
convert_numerical_to_integer(N,I):-
	I== ?trunc(N),!.
convert_numerical_to_integer(_,_):-
	break('Error: I cannot convert a number to the integer.').
-----------------------------------------------------------------------
get_blob_of_type(Type,[Blob|_],Blob):-
	Blob == {type:Type|_},!.
get_blob_of_type(Type,[_|Rest],Blob):-
	get_blob_of_type(Type,Rest,Blob).
--
get_recent_blob_of_type(Type,Chronicle,_,Blob):-
	Chronicle == [{blobs:Blobs|_}|_],
	get_blob_of_type(Type,Blobs,Blob),!.
get_recent_blob_of_type(Type,[_|Rest],TimeLag,Blob):-
	TimeLag < 2,!,
	get_recent_blob_of_type(Type,Rest,TimeLag+1,Blob).
-----------------------------------------------------------------------
draw_circle(X0,Y0,C):-
	X1== X0 - circle_radius * C,
	Y1== Y0 - circle_radius * C,
	Width== circle_radius * 2 * C,
	Height== circle_radius * 2 * C,
	graphics_window ? draw_ellipse(X1,Y1,Width,Height).
--
draw_text_label(_,_,""):-!.
draw_text_label(X,Y,Text):-!,
	graphics_window ? set_font({size:18}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	graphics_window ? draw_text(X,Y,Text).
--
show_recognition_results:-
	protocol ? get_cumulative_interval(1,SniffingTime),
	protocol ? get_cumulative_interval(0,BackgroundTime),
	put(2001,text?format("%1.2f",SniffingTime/1000)),
	put(2002,text?format("%1.2f",BackgroundTime/1000)),
	put(2003,text?format("%1.2f",SniffingTime/BackgroundTime)),
	fail.
show_recognition_results:-
	protocol ? get_number_of_true_positive_detections(TP),
	protocol ? get_number_of_false_positive_detections(FP),
	protocol ? get_number_of_true_negative_detections(TN),
	protocol ? get_number_of_false_negative_detections(FN),
	TP + FN > 0,
	TN + FP > 0,
	Sensitivity== TP/(TP+FN),
	Specificity== TN/(TN+FP),
	put(2004,text?format("%1.2f",Sensitivity)),
	put(2005,text?format("%1.2f",Specificity)),
	fail.
show_recognition_results.
--
draw_legend:-
	state ? get_current_frame(FrameNumber),!,
	state ? get_stopwatch_time(DelayInMilliseconds),
	state ? get_frame_counter(FrameQuantity),
	state ? get_global_counter(GlobalCounter),
	DelayInSeconds== DelayInMilliseconds / 1000.0,
	FrameRate== FrameQuantity / DelayInSeconds,
	FrameTime== (FrameNumber-1) / frame_rate,
	graphics_window ? set_brush('Red'),
	graphics_window ? set_font({size:18}),
	graphics_window ? set_text_alignment('LEFT','TOP'),
	graphics_window ? draw_text(
		0.02, 0.02,
		text?format(
			"Time: %3.2f [sec]; Frame: %d (%d)",
			FrameTime,FrameNumber,GlobalCounter)),
	graphics_window ? set_text_alignment('RIGHT','TOP'),
	graphics_window ? draw_text(
		0.98, 0.02,
		text?format(
			"Frame Rate: %3.2f [Hz]",
			FrameRate)).
draw_legend.
]
-----------------------------------------------------------------------
class 'SpecialTimer' (specialized 'Timer'):
--
internal:
--
target_world;
--
[
tick:-!,
	target_world ? tick.
]
-----------------------------------------------------------------------
class 'ProgramState' (specialized 'Database'):
--
internal:
--
timer		= ('Timer');
--
[
CLAUSES:
--
get_beginning_time(Time):-
	Item== ?match(beginning_time(_)),
	Item == beginning_time(Time),!.
--
set_beginning_time(Time):-
	retract_all(beginning_time(_)),
	append(beginning_time(Time)),
	reset_stopwatch,
	reset_frame_counter.
--
get_current_frame(N):-
	Item== ?match(current_frame(_)),
	Item == current_frame(N),!.
--
set_current_frame(N):-
	retract_all(current_frame(_)),
	append(current_frame(N)),
	increase_frame_counter.
--
reset_stopwatch:-
	retract_all(stop_watch_time(_)),
	append(stop_watch_time(timer?milliseconds())).
--
get_stopwatch_time(Delay):-
	T2== timer?milliseconds(),
	Item== ?match(stop_watch_time(_)),
	Item == stop_watch_time(T1),!,
	Delay== T2 - T1.
get_stopwatch_time(0).
--
reset_frame_counter:-
	retract_all(frame_counter(_)).
--
increase_frame_counter:-
	Item== ?match(frame_counter(_)),
	Item == frame_counter(N),!,
	retract_all(frame_counter(_)),
	append(frame_counter(N+1)).
increase_frame_counter:-
	append(frame_counter(1)).
--
get_frame_counter(N):-
	Item== ?match(frame_counter(_)),
	Item == frame_counter(N),!.
get_frame_counter(0).
--
increase_global_counter:-
	Item== ?match(global_counter(_)),
	Item == global_counter(N),!,
	retract_all(global_counter(_)),
	append(global_counter(N+1)).
increase_global_counter:-
	append(global_counter(1)).
--
get_global_counter(N):-
	Item== ?match(global_counter(_)),
	Item == global_counter(N),!.
get_global_counter(0).
]
-----------------------------------------------------------------------
class 'Accumulator' (specialized 'Database'):
[
add_value(BlobType,Label,Value):-
	Item== ?match(accumulated_sum(_,_,_,_)),
	Item == accumulated_sum(BlobType,Label,N,Sum),!,
	retract_all(accumulated_sum(BlobType,Label,N,Sum)),
	append(accumulated_sum(BlobType,Label,N+1,Sum+Value)).
add_value(BlobType,Label,Value):-
	append(accumulated_sum(BlobType,Label,1,Value)).
--
get_average_value(BlobType,Label,Mean):-
	Item== ?match(accumulated_sum(_,_,_,_)),
	Item == accumulated_sum(BlobType,Label,N,Sum),!,
	Mean== Sum / N.
]
-----------------------------------------------------------------------
class 'Protocol' (specialized 'Database'):
--
file		= ('File');
--
[
add_frame(Time,FrameNumber,Distance1,Distance2,Angle,Velocity,Flag):-
	modify_counter_mode(Flag,Time),
	append(frame(
		Time,FrameNumber,
		Distance1,Distance2,
		Angle,Velocity,Flag)).
--
modify_counter_mode(Mode2,Time2):-
	get_current_mode(Mode1,Time1),!,
	modify_mode_if_necessary(Mode1,Mode2,Time1,Time2).
modify_counter_mode(Mode2,Time2):-
	insert(current_mode(Mode2,Time2)).
--
get_current_mode(Mode,Time):-
	Item== ?match(current_mode(_,_)),
	Item == current_mode(Mode,Time),!.
--
modify_mode_if_necessary(Mode,Mode,Time1,Time2):-!,
	retract_all(current_mode(Mode,_)),
	insert(current_mode(Mode,Time2)),
	increase_cumulative_interval(Mode,Time2-Time1).
modify_mode_if_necessary(Mode1,Mode2,Time1,Time2):-
	retract_all(current_mode(Mode2,_)),
	insert(current_mode(Mode2,Time2)),
	increase_cumulative_interval(Mode1,Time2-Time1).
--
increase_cumulative_interval(Mode,Interval):-
	Item== ?match(cumulative_interval(_,_)),
	Item == cumulative_interval(Mode,Sum),!,
	retract_all(cumulative_interval(Mode,_)),
	append(cumulative_interval(Mode,Sum+Interval)).
increase_cumulative_interval(Mode,Interval):-
	append(cumulative_interval(Mode,Interval)).
--
get_cumulative_interval(Mode,Sum):-
	Item== ?match(cumulative_interval(_,_)),
	Item == cumulative_interval(Mode,Sum),!.
get_cumulative_interval(_,0).
--
save_protocol(FileName):-
	file ? open(FileName,'writing'),
	fail.
save_protocol(_):-
	Item== ?match(frame(_,_,_,_,_,_,_)),
		Item == frame(
			Time,FN,Distance1,Distance2,
			Angle,Velocity,Flag),
		file ? writef(
			"%d\t%d\t%e\t%e\t%e\t%e\t%s\n",
			Time,FN,Distance1,Distance2,
			Angle,Velocity,Flag),
		fail.
save_protocol(_):-
	file ? close.
--
register_a_true_positive_detection:-
	Item== ?match(true_positive_detections(_)),
	Item == true_positive_detections(N),!,
	retract_all(true_positive_detections(_)),
	append(true_positive_detections(N+1)).
register_a_true_positive_detection:-
	append(true_positive_detections(1)).
--
register_a_false_positive_detection:-
	Item== ?match(false_positive_detections(_)),
	Item == false_positive_detections(N),!,
	retract_all(false_positive_detections(_)),
	append(false_positive_detections(N+1)).
register_a_false_positive_detection:-
	append(false_positive_detections(1)).
--
register_a_true_negative_detection:-
	Item== ?match(true_negative_detections(_)),
	Item == true_negative_detections(N),!,
	retract_all(true_negative_detections(_)),
	append(true_negative_detections(N+1)).
register_a_true_negative_detection:-
	append(true_negative_detections(1)).
--
register_a_false_negative_detection:-
	Item== ?match(false_negative_detections(_)),
	Item == false_negative_detections(N),!,
	retract_all(false_negative_detections(_)),
	append(false_negative_detections(N+1)).
register_a_false_negative_detection:-
	append(false_negative_detections(1)).
--
get_number_of_true_positive_detections(N):-
	Item== ?match(true_positive_detections(_)),
	Item == true_positive_detections(N),!.
get_number_of_true_positive_detections(0).
--
get_number_of_false_positive_detections(N):-
	Item== ?match(false_positive_detections(_)),
	Item == false_positive_detections(N),!.
get_number_of_false_positive_detections(0).
--
get_number_of_true_negative_detections(N):-
	Item== ?match(true_negative_detections(_)),
	Item == true_negative_detections(N),!.
get_number_of_true_negative_detections(0).
--
get_number_of_false_negative_detections(N):-
	Item== ?match(false_negative_detections(_)),
	Item == false_negative_detections(N),!.
get_number_of_false_negative_detections(0).
]
-----------------------------------------------------------------------
