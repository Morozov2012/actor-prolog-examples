-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2016 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
--
-- Note: one should start three instances of the Editor
-- environment to study this example. Please compile and
-- execute this example in the first environment,
-- the agent_002_consumer_** (Detection of Running People) example
-- in the second environment, and the agent_003_consumer_**
-- (Detection of Abandoned Things) in the third environment.
-- Please translate these examples to Java.
--
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Vision";
-----------------------------------------------------------------------
project: (('VideoInput'))
-----------------------------------------------------------------------
class 'VideoInput' (specialized 'Timer'):
--
constant:
--
	data_directory		= "data";
	target_directory	= "020008_jpeg";
	sampling_rate		= 33.3;
--
internal:
--
	datastore	= ('DataStore',
				name= "AgentBlackboard.db",
				sharing_mode= 'shared_access',
				access_mode= 'modifying');
	database	= ('VideoDataSources',
				place= shared(
					datastore,
					"VideoDataSources"));
	text		= ('Text');
	image		= ('BufferedImage');
	state		= ('ProgramState');
	con		= ('Console');
--
	trap		= ('Trap',
				world= self,
				handler= self);
--
[
MODEL:
--
?register_consumer(ExternalAgent).
?forget_consumer(ExternalAgent).
--
CLAUSES:
--
goal:-
	con ? set_color('Orange'),
	con ? write("OPENING THE DATA STORE... "),
	datastore ? open,
	con ? writeln("DONE."),
	con ? set_color('Violet'),
	con ? write("UPDATING THE TABLE... "),
	database ? begin_transaction('modifying'),!,
	database ? retract_all(),
	database ? insert(self),
	database ? end_transaction,
	con ? writeln("DONE."),
	con ? set_color('Orange'),
	con ? write("CLOSING THE DATA STORE... "),
	datastore ? close,
	con ? writeln("DONE."),
	con ? set_color('default'),
	Time0== ?milliseconds(),
	state ? set_beginning_time(Time0),
	set_period(1/sampling_rate,0),
	activate.
--
tick:-
	T2== ?milliseconds(),
	state ? get_beginning_time(T1),
	Delta== (T2 - T1) / 1000.0 * sampling_rate,
	N== ?convert_to_integer(?round(Delta)),!,
	load_figure(N,T2).
--
load_figure(N2,_):-
	state ? get_current_frame(N1),
	N1 == N2,!.
load_figure(N,_):-
	state ? set_current_frame(N),
	ShortFileName== text?format("%08d",N) + ".jpg",
	ImageToBeLoaded==
		"jar:" + data_directory + "/" +
		target_directory + "/" +
		ShortFileName,
	-- con ? writeln("Does exist? ",ImageToBeLoaded),
	image ? does_exist(ImageToBeLoaded),!,
	-- con ? writeln("Load: ",ImageToBeLoaded),
	image ? load(ImageToBeLoaded),
	-- con ? writeln("O.K.: ",ImageToBeLoaded),
	notify_all_customers(N).
load_figure(_,T2):-
	state ? set_beginning_time(T2),
	reset_all_customers().
--
register_consumer(ExternalAgent):-
	state ? register_consumer(ExternalAgent),
	con ? set_color('DkGreen'),
	con ? writeln(
		"A new consumer is connected: ",
		ExternalAgent),
	con ? set_color('default').
--
forget_consumer(ExternalAgent):-
	state ? forget_consumer(ExternalAgent),
	con ? set_color('Violet'),
	con ? writeln(
		"This consumer is disconnected: ",
		ExternalAgent),
	con ? set_color('default').
--
notify_all_customers(N):-
	state ? get_any_customer(ExternalAgent),
		trap ? notify_customer(ExternalAgent,N),
		fail.
notify_all_customers(_).
--
notify_customer(ExternalAgent,N):-
	[ExternalAgent] [<<] new_frame(N,image?get_binary(),sampling_rate).
--
reset_all_customers:-
	state ? get_any_customer(ExternalAgent),
		trap ? reset_customer(ExternalAgent),
		fail.
reset_all_customers.
--
reset_customer(ExternalAgent):-
	[ExternalAgent] [<<] reset(),
	con ? set_color('Magenta'),
	con ? writeln(
		"The reset message is dispatched to ",
		ExternalAgent),
	con ? set_color('default').
--
alarm(_,'reset_customer',ExternalAgent):-
	forget_consumer(ExternalAgent).
alarm(_,'notify_customer',ExternalAgent,_):-
	forget_consumer(ExternalAgent).
]
-----------------------------------------------------------------------
class 'ProgramState' (specialized 'Database'):
[
get_beginning_time(T):-
	Item== ?match(beginning_time(_)),
	Item == beginning_time(T),!.
--
set_beginning_time(T):-
	retract_all(beginning_time(_)),
	append(beginning_time(T)).
--
get_current_frame(N):-
	Item== ?match(current_frame(_)),
	Item == current_frame(N),!.
--
set_current_frame(N):-
	retract_all(current_frame(_)),
	append(current_frame(N)).
--
register_consumer(ExternalAgent):-
	find(customer(ExternalAgent)),!.
register_consumer(ExternalAgent):-
	append(customer(ExternalAgent)).
--
forget_consumer(ExternalAgent):-
	retract_all(customer(ExternalAgent)).
--
get_any_customer(ExternalAgent):-
	Item== ?match(customer(_)),
	Item == customer(ExternalAgent).
]
-----------------------------------------------------------------------
class 'VideoDataSources' (specialized 'Database'):
[
]
-----------------------------------------------------------------------
