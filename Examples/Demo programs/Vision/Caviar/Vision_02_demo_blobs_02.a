-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2013 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Vision";
-----------------------------------------------------------------------
class 'Main' (specialized 'Timer'):
--
constant:
--
	data_directory		= "data";
	target_directory	= "Fight_RunAway1";
	sampling_rate		= 25.0;
--
internal:
--
	subtractor	= ('ImageSubtractor',
				extract_blobs= 'yes',
				track_blobs= 'yes',
				use_grayscale_colors= 'yes',
				apply_gaussian_filtering_to_background= 'no',
				background_gaussian_filter_radius= 1,
				apply_rank_filtering_to_background= 'yes',
				background_rank_filter_threshold= 4,
				make_rectangular_blobs_in_synthesized_image= 'no',
				inverse_transformation_matrix= [],
				sampling_rate,
				apply_median_filtering_to_velocity= 'yes',
				velocity_median_filter_halfwidth= 3,
				refuse_slow_tracks= 'no',
				fuzzy_velocity_threshold= 0.3,
				fuzzy_distance_threshold= 40.0);
	graphics_window	= ('Canvas2D',
				background_color= 'SystemControl',
				y= 0,
				height= 22);
	prompt_window	= ('Report',
				y= 22,
				height= 3);
	text		= ('Text');
	image		= ('BufferedImage');
	state		= ('ProgramState');
--
[
goal:-!,
	graphics_window ? show,
	prompt_window ? write(
		"The data are coming from the EC Funded CAVIAR ",
		"project / IST 2001 37540,\n",
		"found at URL: ",
		"http://homepages.inf.ed.ac.uk/rbf/CAVIAR/."),
	Time0== ?milliseconds(),
	state ? set_beginning_time(Time0),
	set_period((1/sampling_rate/2),0),
	activate.
--
tick:-
	T2== ?milliseconds(),
	state ? get_beginning_time(T1),
	Delta== (T2 - T1) / 1000.0 * sampling_rate,
	N== ?convert_to_integer(?round(Delta)),!,
	load_figure(N,T2).
--
load_figure(N2,_):-
	state ? get_current_frame(N1),
	N1 == N2,!.
load_figure(N,_):-
	state ? set_current_frame(N),
	ImageToBeLoaded==
		"jar:" + data_directory + "/" +
		target_directory + "_jpg" + "/JPEGS/" +
		target_directory +
		text?format("%03d",N) + ".jpg",
	image ? does_exist(ImageToBeLoaded),!,
	image ? load(ImageToBeLoaded),
	subtractor ? subtract(N,image),
	draw_scene.
load_figure(_,T2):-
	state ? set_beginning_time(T2).
--
draw_scene:-
	subtractor ? commit,
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	subtractor ? get_recent_image(image),
	-- subtractor ? get_sigma_image(image),
	graphics_window ? draw_image(image,0,0,1,1),
	subtractor ? get_blobs(Blobs),
	image ? get_size_in_pixels(IW,IH),
	draw_blobs(IW,IH,Blobs),
	graphics_window ? draw_now.
--
draw_blobs(IW,IH,[Blob|Rest]):-!,
	draw_blob(IW,IH,Blob),
	draw_blobs(IW,IH,Rest).
draw_blobs(_,_,_).
--
draw_blob(IW,IH,Blob):-
	Blob == {identifier:Id,x:X0,y:Y0,width:W1,height:H1|_},
	graphics_window ? set_pen({color:'Yellow',lineWidth:3}),
	graphics_window ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	X2== (X0 - W1 / 2) / IW,
	Y2== (Y0 - H1 / 2) / IH,
	W2== W1 / IW,
	H2== H1 / IH,
	graphics_window ? draw_rectangle(X2,Y2,W2,H2),
	draw_blob_identifier(X0,Y0,IW,IH,Id),
	fail.
draw_blob(_,_,_).
--
draw_blob_identifier(X0,Y0,IW,IH,Id):-!,
	Text== text?format("%d",Id),
	graphics_window ? draw_text(X0/IW,Y0/IH,Text).
]
-----------------------------------------------------------------------
class 'ProgramState' (specialized 'Database'):
[
CLAUSES:
--
get_beginning_time(T):-
	Item== ?match(beginning_time(_)),
	Item == beginning_time(T),!.
--
set_beginning_time(T):-
	retract_all(beginning_time(_)),
	append(beginning_time(T)).
--
get_current_frame(N):-
	Item== ?match(current_frame(_)),
	Item == current_frame(N),!.
--
set_current_frame(N):-
	retract_all(current_frame(_)),
	append(current_frame(N)).
]
-----------------------------------------------------------------------
