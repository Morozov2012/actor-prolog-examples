-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2013-2017 IRE RAS Alexei A. Morozov                           --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Vision";
-----------------------------------------------------------------------
class 'Main' (specialized 'Alpha'):
--
constant:
--
data_directory		= "data";
target_directory	= "Fight_RunAway1";
--
inverse_transformation_matrix	= [
		[0.3945,0.0468,0.0168],
		[0.0996,-0.1625,0.0056],
		[-34.0116,28.5636,1.0000]];
--
sampling_rate	= 25.0;
--
stage_one		= (('ImagePreprocessor',
				data_directory,
				target_directory,
				sampling_rate,
				low_level_analyzer,
				stage_two));
stage_two		= (('ImageAnalyzer',
				low_level_analyzer));
--
internal:
--
low_level_analyzer	= ('ImageSubtractor',
				extract_blobs= 'yes',
				track_blobs= 'yes',
				use_grayscale_colors= 'yes',
				apply_gaussian_filtering_to_background= 'yes',
				background_gaussian_filter_radius= 1,
				background_standard_deviation_factor= 1.2,
				apply_rank_filtering_to_background= 'yes',
				background_rank_filter_threshold= 4,
				minimal_track_duration= 5,
				make_rectangular_blobs_in_synthesized_image= 'no',
				inverse_transformation_matrix,
				sampling_rate,
				apply_median_filtering_to_velocity= 'yes',
				velocity_median_filter_halfwidth= 3,
				refuse_slow_tracks= 'yes',
				fuzzy_velocity_threshold= 0.3,
				fuzzy_distance_threshold= 40.0,
				fuzzy_threshold_border= 0.50);
--
[
]
-----------------------------------------------------------------------
class 'ImagePreprocessor' (specialized 'Timer'):
--
constant:
--
	data_directory;
	target_directory;
	sampling_rate;
--
	low_level_analyzer;
	stage_two;
--
internal:
--
	subtractor	= ('SynchronizedImageSubtractor',
				image_subtractor= low_level_analyzer);
--
	text		= ('Text');
	image		= ('BufferedImage');
	state		= ('ProgramState');
--
[
goal:-!,
	Time0== ?milliseconds(),
	state ? set_beginning_time(Time0),
	set_period((1/sampling_rate/2),0),
	activate.
--
tick:-
	T2== ?milliseconds(),
	state ? get_beginning_time(T1),
	Delta== (T2 - T1) / 1000.0 * sampling_rate,
	N== ?convert_to_integer(?round(Delta)),!,
	load_figure(N,T2).
--
load_figure(N2,_):-
	state ? get_current_frame(N1),
	N1 == N2,!.
load_figure(N,_):-
	state ? set_current_frame(N),
	ShortFileName== text?format("%03d",N) + ".jpg",
	ImageToBeLoaded==
		"jar:" + data_directory + "/" +
		target_directory + "_jpg" + "/JPEGS/" +
		target_directory +
		ShortFileName,
	image ? does_exist(ImageToBeLoaded),!,
	image ? load(ImageToBeLoaded),
	subtractor ? subtract(N,image),
	stage_two [<<] draw_scene().
load_figure(_,T2):-
	state ? set_beginning_time(T2),
	subtractor ? reset_results.
]
-----------------------------------------------------------------------
class 'ImageAnalyzer' (specialized 'Alpha'):
--
constant:
--
	low_level_analyzer;
--
internal:
--
	subtractor	= ('SynchronizedImageSubtractor',
				image_subtractor= low_level_analyzer);
--
constant:
--
	circle_radius		= 0.01;
--
internal:
--
	graphics_window	= ('Canvas2D',
				background_color= 'SystemControl',
				y= 0,
				height= 22);
	prompt_window	= ('Report',
				y= 22,
				height= 3);
	text		= ('Text');
	image		= ('BufferedImage');
	timer		= ('Timer');
--
[
goal:-!,
	timer ? set_priority('minimal'),
	graphics_window ? show,
	prompt_window ? write(
		"The data are coming from the EC Funded CAVIAR ",
		"project / IST 2001 37540,\n",
		"found at URL: ",
		"http://homepages.inf.ed.ac.uk/rbf/CAVIAR/.").
--
draw_scene():-
	subtractor ? commit,
	subtractor ? get_recent_frame_number(N),
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	graphics_window ? set_font({size:18}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	subtractor ? get_background_image(image),
	graphics_window ? draw_image(image,0,0,1,1),
	subtractor ? get_synthesized_image(image),
	graphics_window ? draw_image(image,0,0,1,1),
	subtractor ? get_connected_graphs(Graphs),
	image ? get_size_in_pixels(IW,IH),
	draw_graphs(1,IW,IH,Graphs),
	graphics_window ? set_brush('Green'),
	graphics_window ? set_text_alignment('LEFT','CENTER'),
	graphics_window ? draw_text(
		10 / IW, 10 / IH,
		text?format("%s",N)),
	graphics_window ? draw_now.
--
draw_graphs(N,IW,IH,[Graph|Rest]):-!,
	draw_graph(N,IW,IH,Graph,Graph),
	draw_graphs(N+1,IW,IH,Rest).
draw_graphs(_,_,_,_).
--
draw_graph(N,IW,IH,[Edge|Rest],Graph):-!,
	draw_edge(N,IW,IH,Edge,Graph),
	draw_graph(N,IW,IH,Rest,Graph).
draw_graph(_,_,_,_,_).
--
draw_edge(	N,IW,IH,
		{	x1:X1a,y1:Y1a,x2:X2a,y2:Y2a,
			inputs:Origins,
			coordinates:TrackOfBlobs|_},
		Graph):-
	X1r== X1a / IW,
	Y1r== Y1a / IH,
	X2r== X2a / IW,
	Y2r== Y2a / IH,
	graphics_window ? set_brush('Blue'),
	draw_origins(X1a,Y1a,IW,IH,Origins,Graph),
	graphics_window ? set_pen({color:'Magenta',lineWidth:2}),
	draw_track_of_blobs(IW,IH,TrackOfBlobs),
	graphics_window ? set_pen({color:'Green',lineWidth:1}),
	graphics_window ? draw_line(X1r,Y1r,X2r,Y2r),
	draw_circle(X1r,Y1r),
	draw_circle(X2r,Y2r),
	draw_blob_identifier(X1r,Y1r,X2r,Y2r,N),
	fail.
draw_edge(_,_,_,_,_).
--
draw_origins(Sx,Sy,IW,IH,[Origin|Rest],Graph):-!,
	draw_origin(Sx,Sy,IW,IH,Origin,Graph),
	draw_origins(Sx,Sy,IW,IH,Rest,Graph).
draw_origins(_,_,_,_,_,_).
--
draw_origin(SxA,SyA,IW,IH,N,Graph):-
	get_edge(N,Graph,Edge),
	Edge == {x2:Nx2a,y2:Ny2a|_},!,
	draw_origin_arrow(SxA,SyA,Nx2a,Ny2a,IW,IH).
draw_origin(_,_,_,_,_,_).
--
draw_origin_arrow(X,Y,X,Y,_,_):-!.
draw_origin_arrow(SxA,SyA,Nx2a,Ny2a,IW,IH):-
	SxR== SxA / IW,
	SyR== SyA / IH,
	Nx2r== Nx2a / IW,
	Ny2r== Ny2a / IH,
	graphics_window ? draw_line(SxR,SyR,Nx2r,Ny2r).
--
draw_branches(Sx,Sy,IW,IH,[Origin|Rest],Graph):-!,
	draw_branch(Sx,Sy,IW,IH,Origin,Graph),
	draw_branches(Sx,Sy,IW,IH,Rest,Graph).
draw_branches(_,_,_,_,_,_).
--
draw_branch(SxA,SyA,IW,IH,N,Graph):-
	get_edge(N,Graph,Edge),
	Edge == {x1:Nx1a,y1:Ny1a|_},!,
	draw_origin_arrow(SxA,SyA,Nx1a,Ny1a,IW,IH).
draw_branch(_,_,_,_,_,_).
--
draw_branch_arrow(X,Y,X,Y,_,_):-!.
draw_branch_arrow(SxA,SyA,Nx2a,Ny2a,IW,IH):-
	SxR== SxA / IW,
	SyR== SyA / IH,
	Nx2r== Nx2a / IW,
	Ny2r== Ny2a / IH,
	graphics_window ? draw_line(SxR,SyR,Nx2r,Ny2r).
--
get_edge(1,[Edge|_],Edge):-!.
get_edge(N,[_|Rest],Edge):-
	N > 0,
	get_edge(N-1,Rest,Edge).
--
draw_track_of_blobs(IW,IH,[Blob|Rest]):-
	Blob== {x:Xa,y:Ya|_},!,
	Xr== Xa / IW,
	Yr== Ya / IH,
	draw_track_of_blobs(IW,IH,Xr,Yr,Rest).
draw_track_of_blobs(_,_,_).
--
draw_track_of_blobs(IW,IH,X1,Y1,[Blob|Rest]):-
	Blob== {x:Xa,y:Ya|_},!,
	X2== Xa / IW,
	Y2== Ya / IH,
	graphics_window ? draw_line(X1,Y1,X2,Y2),
	draw_track_of_blobs(IW,IH,X2,Y2,Rest).
draw_track_of_blobs(_,_,_,_,_).
--
draw_circle(X0,Y0):-
	X1== X0 - circle_radius,
	Y1== Y0 - circle_radius,
	Width== circle_radius * 2,
	Height== circle_radius * 2,
	graphics_window ? draw_ellipse(X1,Y1,Width,Height).
--
draw_blob_identifier(X1,Y1,X2,Y2,Id):-!,
	Text== text?format("%d",Id),
	graphics_window ? draw_text((X1+X2)/2,(Y1+Y2)/2,Text).
]
-----------------------------------------------------------------------
class 'ProgramState' (specialized 'Database'):
[
CLAUSES:
--
get_beginning_time(T):-
	Item== ?match(beginning_time(_)),
	Item == beginning_time(T),!.
--
set_beginning_time(T):-
	retract_all(beginning_time(_)),
	append(beginning_time(T)).
--
get_current_frame(N):-
	Item== ?match(current_frame(_)),
	Item == current_frame(N),!.
--
set_current_frame(N):-
	retract_all(current_frame(_)),
	append(current_frame(N)).
]
-----------------------------------------------------------------------
