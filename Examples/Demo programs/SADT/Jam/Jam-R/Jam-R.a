------------------------------------------------------------------------
--                Пример визуальной экспертной системы.               --
--               Программа написана на Акторном Прологе.              --
--              (c) Алексей А. Морозов. 19 марта 1999 г.              -
------------------------------------------------------------------------
-- Это моя самая любимая программа. Она помогает варить варенье из    --
-- чёрной рябины, яблок и земляники. На самом деле, когда я писал эту --
-- программу, мне хотелось потренироваться в проведении интервью по   --
-- правилам SADT методологии. Для этого я не придумал ничего лучше,   --
-- как попросить мою собственную матушку рассказать мне, как надо     --
-- варить варенье. Поскольку я старался нарисовать модель как можно   --
-- более подробно, интервью затянулось на два дня. Результат оказался --
-- неожиданным для нас обоих. Матушка была очень удивлена, когда я    --
-- показал ей полный перечень посуды и инструментов, которые ей       --
-- приходится использовать во время приготовления обычного варенья.   --
-- Заодно я немного научился готовить. Матушка, спасибо за помощь!    --
------------------------------------------------------------------------
-- Логическое описание блоков SADT модели.                            --
------------------------------------------------------------------------
-- Этот класс просто заглушка, вызывающая диалоговое окно             --
-- выбора ягод и фруктов.                                             --
------------------------------------------------------------------------
class '_Выбрать_ягоды_и_фрукты' (specialized '_Block'):
value_o1;
[
show(_,_):-!,
	show.
]
------------------------------------------------------------------------
-- Далее следуют классы, соответствующие блокам SADT модели.          --
-- Основное предназначение этих классов - хранить перечень посуды и   --
-- инструментов, соответствующих различным блокам SADT модели.        --
-- В дополнение к этому некоторые блоки:                              --
-- 1) Передают на выход значения (наименования выбранных ягод и       --
--    фруктов), полученные на входе.                                  --
-- 2) Проверяют, соответствуют ли выбранные ягоды и фрукты данному    --
--    блоку. Если не соответствуют, исполнение актора goal            --
--    заканчивается неудачей, процесс переходит в состояние           --
--    "неудачный", и соответствующий блок на экране краснеет.         --
-- 3) Вычисляют рекомендуемое время нагрева сахарной смеси для        --
--    выбранных ягод и фруктов.                                       --
-- Классы, соответствующие составным блокам, являются потомками       --
-- класса '_Block', назначение которого будет рассмотрено ниже, когда --
-- мы будем обсуждать устройство блока "Анализ модели".               --
------------------------------------------------------------------------
class '_Вымыть_банки_и_крышки' (specialized '_Block'):
[
]
------------------------------------------------------------------------
class '_Вскипятить_воду_в_чайнике' (specialized '_Block'):
[
instrument()= "Чайник".
]
------------------------------------------------------------------------
class '_Обработать_крышки_кипятком' (specialized '_Block'):
[
instrument()= "Кастрюля для кипячения воды".
]
------------------------------------------------------------------------
class '_Обработать_банки_кипятком' (specialized '_Block'):
[
instrument()= "Чайник".
]
------------------------------------------------------------------------
class '_Просушить_банки_и_крышки' (specialized '_Block'):
[
]
------------------------------------------------------------------------
class '_Вымыть_ягоды_и_фрукты' (specialized '_Block'):
--
value_i1	: Ingredient;
--
protecting:
--
value_o1	: Ingredient;
--
[
goal:-!,
	value_o1 == value_i1,!.
--
instrument()= "Дуршлаг".
]
------------------------------------------------------------------------
class '_Подготовить_смесь_из_твёрдых_ягод_и_сахара'
(specialized '_Block'):
value_i1;
[
goal:-!,
	check_fruits(value_i1).
--
check_fruits("Чёрная рябина"):-!.
]
------------------------------------------------------------------------
class '_Подготовить_смесь_из_крупных_фруктов_и_сахара'
(specialized '_Block'):
value_i1;
[
goal:-!,
	check_fruits(value_i1).
--
check_fruits("Яблоки \"Антоновка\""):-!.
]
------------------------------------------------------------------------
class '_Подготовить_смесь_из_мягких_ягод_и_сахара'
(specialized '_Block'):
value_i1;
[
goal:-!,
	check_fruits(value_i1).
--
check_fruits("Земляника"):-!.
]
------------------------------------------------------------------------
class '_Вскипятить_воду_в_кастрюле' (specialized '_Block'):
[
instrument()= "Кастрюля для кипячения воды".
]
------------------------------------------------------------------------
class '_Приготовить_сироп' (specialized '_Block'):
--
value_i1	: Ingredient;
value_o1	: Ingredient;
--
[
goal:-!,
	value_o1 == value_i1.
--
instrument()= "Кастрюля или медная миска".
instrument()= "Деревянная ложка".
]
------------------------------------------------------------------------
class '_Бланшировать_ягоды' (specialized '_Block'):
--
value_i2	: Ingredient;
value_o1	: Ingredient;
--
[
goal:-!,
	value_o1 == value_i2.
--
instrument()= "Дуршлаг".
instrument()= "Кастрюля для кипячения воды".
]
------------------------------------------------------------------------
class '_Положить_ягоды_в_сироп' (specialized '_Block'):
value_i1;
value_o1;
[
goal:-!,
	value_o1 == value_i1.
--
instrument()= "Кастрюля или медная миска".
]
------------------------------------------------------------------------
class '_Порезать_на_дольки' (specialized '_Block'):
--
value_i1	: Ingredient;
value_o1	: Ingredient;
--
[
goal:-!,
	value_o1 == value_i1.
--
instrument()= "Нож из нержавеющей стали".
]
------------------------------------------------------------------------
class '_Пересыпать_сахаром' (specialized '_Block'):
--
value_i1	: Ingredient;
value_o1	: Ingredient;
--
[
goal:-!,
	value_o1 == value_i1.
--
instrument()= "Кастрюля или медная миска".
]
------------------------------------------------------------------------
class '_Выстаивать_6-8_часов' (specialized '_Block'):
--
value_i1	: Ingredient;
value_o1	: Ingredient;
--
[
goal:-!,
	value_o1 == value_i1.
--
instrument()= "Кастрюля или медная миска".
]
------------------------------------------------------------------------
class '_Добавить_в_смесь_воду' (specialized '_Block'):
value_i1;
value_o1;
[
goal:-!,
	value_o1 == value_i1.
--
instrument()= "Кастрюля или медная миска".
]
------------------------------------------------------------------------
class '_Цикл_варки_твёрдых_ягод_и_фруктов'
(specialized '_Block'):
value_i1;
[
goal:-!,
	check_fruits(value_i1).
--
check_fruits("Чёрная рябина"):-!.
check_fruits("Яблоки \"Антоновка\""):-!.
]
------------------------------------------------------------------------
class '_Цикл_варки_мягких_ягод_и_фруктов'
(specialized '_Block'):
value_i1;
[
goal:-!,
	check_fruits(value_i1).
--
check_fruits("Земляника"):-!.
]
------------------------------------------------------------------------
class '_Нагреть_смесь' (specialized 'НагретьСмесь'):
--
variable:
--
	value_i2;
	time;
--
variable:
--
	fruits		= value_i2;
--
[
goal:-!,
	set_time(value_i2,time).
--
set_time(#,"3-5"):-!.
set_time("Чёрная рябина","3"):-!.
set_time("Яблоки \"Антоновка\"",5):-!.
set_time("Земляника","---"):-!.
set_time(_,"3-5"):-!.
--
instrument()= "Кастрюля или медная миска".
instrument()= "Деревянная ложка".
]
------------------------------------------------------------------------
class 'НагретьСмесь' (specialized '_Block'):
--
protecting:
--
	time;
--
variable:
--
	fruits;
--
[
show(_,_):-!,
	show.
]
------------------------------------------------------------------------
class '_Выстаивание' (specialized '_Block'):
[
instrument()= "Кастрюля или медная миска".
]
------------------------------------------------------------------------
class '_Проверить_готовность_варенья' (specialized '_Block'):
[
instrument()= "Деревянная ложка".
instrument()= "Блюдце".
]
------------------------------------------------------------------------
class '_Основной_этап_варки' (specialized 'НагретьСмесь'):
--
variable:
--
	value_i1;
	time;
--
variable:
--
	fruits		= value_i1;
--
[
goal:-!,
	set_time(value_i1,time).
--
set_time(#,"---"):-!.
set_time("Земляника","10"):-!.
set_time(_,"---"):-!.
--
instrument()= "Кастрюля или медная миска".
instrument()= "Деревянная ложка".
]
------------------------------------------------------------------------
class '_Дополнительный_этап_варки' (specialized '_Block'):
[
instrument()= "Кастрюля или медная миска".
instrument()= "Деревянная ложка".
]
------------------------------------------------------------------------
class '_Охладить_варенье' (specialized '_Block'):
[
instrument()= "Кастрюля или медная миска".
]
------------------------------------------------------------------------
class '_Разлить_варенье_в_банки' (specialized '_Block'):
[
instrument()= "Деревянная ложка".
instrument()= "Машинка для закатки".
]
------------------------------------------------------------------------
-- Этот блок строит и выводит на экран полный перечень посуды и       --
-- инструментов, необходимых для приготовления варенья из выбранных   --
-- ягод и фруктов. Принцип работы блока состоит в следующем:          --
-- 1) Слот container, автоматически создаваемый во время трансляции   --
--    SADT диаграмм, содержит процесс, соответствующий блоку,         --
--    объемлющему данный, то есть блоку "Приготовление варенья".      --
--    С помощью специального резидента в этом блоке доказывается      --
--    предикат instrument.                                            --
-- 2) Блок "Приготовление варенья", а также все остальные составные   --
--    блоки в ходе трансляции модели реализуются с помощью классов.   --
--    Все эти классы являются потомками класса '_Block'.     --
-- 3) Класс '_Block' определён в тексте программы. При этом  --
--    в классе '_Block' определена функция instrument, таким --
--    образом что её значением является значение функции component.   --
-- 4) Функция component является недетерминированной и определяется   --
--    автоматически в ходе трансляции всех составных блоков.          --
--    В качестве значения эта функция возвращает процессы,            --
--    соответствующие блокам, входящим в состав рассматриваемого      --
--    составного блока.                                               --
-- 5) Таким образом, с помощью резидента блок "Анализ модели"         --
--    получает список процессов, соответствующих соседним блокам.     --
-- 6) Полученный список передаётся другому резиденту в рекурсивном    --
--    определении процесса 'Instruments', который доказывает в этих   --
--    мирах тот же самый предикат instrument.                         --
-- 7) Если предикат instrument доказывается в простом блоке,          --
--    соответствующий процесс возвращает наименования посуды и        --
--    инструментов, относящихся к данному блоку. Если предикат        --
--    доказывается в составном блоке, исполнение предиката происходит --
--    так же как в блоке "Приготовление варенья", рассмотренном       --
--    выше. Таким образом, резидент вычисляет список, в состав        --
--    которого могут входить как списки посуды и инструментов, так и  --
--    процессы, соответствующие некоторым блокам.                     --
-- 8) Полученный список передаётся на следующий виток рекурсии и      --
--    обрабатывается следующим резидентом. Такая рекурсивная          --
--    обработка списка продолжается до тех пор, пока на очередном     --
--    витке список не окажется равным списку, поступившему на         --
--    предыдущий уровень рекурсии. Если список окажется равным, это   --
--    означает, что просмотр дерева блоков достиг всех его вершин, и  --
--    в составе списка больше нет процессов.                          --
-- 9) Вычисленный таким образом список посуды и инструментов          --
--    сортируется с удалением повторов и выводится на экран с помощью --
--    диалогового окна.                                               --
------------------------------------------------------------------------
class '_Анализ_модели:_Какие_необходимы_посуда_и_инструменты?'
(specialized '_Block'):
--
constant:
--
	title;
	name;
	number;
	total_model;
	x;
	y;
	text_color;
	container;
	con;
--
variable:
--
	result;
--
protecting:
--
	instruments;
--
constant:
--
	agent	= (('FindInstruments',
			container,
			result));
--
[
goal:-
	refine_list(result,[],instruments),!.
goal:-!,
	[result].
--
refine_list([],List,List):-!.
refine_list([#|Rest],List1,List2):-!,
	refine_list(Rest,List1,List2).
refine_list([Item|Rest],List1,List3):-
	is_list(Item),!,
	refine_list(Item,List1,List2),
	refine_list(Rest,List2,List3).
refine_list([Item|Rest],List1,List2):-
	is_not_element(Item,List1),!,
	refine_list(Rest,[Item|List1],List2).
refine_list([_|Rest],List1,List2):-!,
	refine_list(Rest,List1,List2).
refine_list(_,List,List):-!.
--
is_list([]):-!.
is_list([_|_]):-!.
--
is_not_element(_,[]):-!.
is_not_element(Item,[Item|_]):-!,
	fail.
is_not_element(Item,[_|List]):-!,
	is_not_element(Item,List).
--
show(_,_):-!,
	show.
]
------------------------------------------------------------------------
class 'FindInstruments':
--
constant:
--
	container;
--
variable:
--
	result;
--
constant:
--
	agent	= (('Instruments',
			suspending:
				source_list= [],
			variable:
				target_list= [container],
			protecting:
				result
		));

[
goal:-!.
--
alarm(_):-
	fail.
]
------------------------------------------------------------------------
class 'Instruments' (specialized 'Alpha'):
--
variable:
--
	source_list;
	target_list;
	result;
--
protecting:
--
	tail_list;
--
variable:
--
	tail_result;
--
constant:
--
	tail	= (('Instruments',
			suspending:
				source_list =
					tail_list,
			variable:
				target_list =
					target_list ?? instrument(),
			protecting:
				result =
					tail_result
			));
--
[
goal:-
	-- source_list == target_list,
	contains_no_worlds(target_list),
	result == target_list,!.
goal:-
	tail_list== target_list,
	result== tail_result,!.
--
contains_no_worlds(#):-!.
contains_no_worlds(Name):-
	string(Name),!.
contains_no_worlds([Item|Rest]):-!,
	contains_no_worlds(Item),
	contains_no_worlds(Rest).
contains_no_worlds([]).
]
------------------------------------------------------------------------
class '_Block' (specialized 'Dialog'):
--
total_model;
--
[
component(_):-
	fail.
--
instrument()= Block
	:-!,
	component(Block).
--
check_fruits(_):-
	fail.
--
show(Identifier,_):-!,
	total_model << show_description(Identifier).
]
------------------------------------------------------------------------
