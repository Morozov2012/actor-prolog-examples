-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2018 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
--
import .. from "morozov/Java2D";
import .. from "morozov/Java3D";
import .. from "morozov/Kinect";
--
-----------------------------------------------------------------------
--
DOMAINS:
--
ground:
--
TextLabel	= STRING.
--
-----------------------------------------------------------------------
interface 'Main' (specialized 'KinectBuffer'):
--
constant:
--
	first_frame	: INTEGER;
	end_frame	: INTEGER;
	frame_type	: KinectFrameType;
	people_index	: KinectPeopleIndexMode;
	skeletons	: KinectSkeletonsMode;
--
internal:
--
	main_label	: NodeLabel;
	window		: 'Canvas3D';
	dialog		: 'Dialog';
	buffer2D	: 'BufferedImage';
	buffer3D	: 'BufferedScene';
	image		: 'BufferedImage';
	thermal_data	: 'ThermalData';
	state		: 'ProgramState';
	text		: 'Text';
	con		: 'Console';
--
constant:
--
	cylinder_radius		: Radius;
	joint_radius		: Radius;
	head_radius		: Radius;
	limb_transparency	: Numerical;
	up_vector		: Point3D;
--
	texture_file_format	: STRING;
	texture_directory	: STRING;
	texture_frame_rate	: REAL;
	texture_time_shift	: INTEGER;
	lookup_table_file_name	: STRING;
--
[
PREDICATES:
--
imperative:
--
process_frame(FrameNumber,INTEGER)		- (i,i);
--
compute_time(
	INTEGER,INTEGER,INTEGER,INTEGER,REAL)	- (i,i,i,i,o);
--
create_list_of_nodes(NodeList)			- (o);
create_main_group(Node)				- (o);
--
form_skeletons(
	Skeletons,
	'BufferedImage') = NodeList	- (i,i);
--
determ:
--
form_skeleton(
	Skeleton,
	'BufferedImage') = Node		- (i,i);
form_spine(
	SkeletonJoint,
	SkeletonSpine,
	'BufferedImage') = Node		- (i,i,i);
form_arm(
	SkeletonSpine,
	SkeletonArm,
	'BufferedImage',
	TextLabel) = Node		- (i,i,i,i);
form_hand(
	SkeletonJoint,
	SkeletonJoint,
	SkeletonArm,
	'BufferedImage',
	TextLabel) = Node		- (i,i,i,i,i);
form_leg(
	SkeletonSpine,
	SkeletonLeg,
	'BufferedImage',
	TextLabel) = Node		- (i,i,i,i);
--
form_link(
	SkeletonJoint,
	SkeletonJoint,
	'BufferedImage',
	TextLabel) = Node		- (i,i,i,i);
form_joint(
	SkeletonJoint,
	'BufferedImage',
	TextLabel) = Node		- (i,i,i);
form_head(
	SkeletonJoint,
	'BufferedImage') = Node		- (i,i);
--
imperative:
--
select_link_color(
	SkeletonJointStatus,
	SkeletonJointStatus,
	Point2D,
	Point2D,
	'BufferedImage',
	TextLabel,
	AppearanceAttributes)		- (i,i,i,i,i,i,o);
--
average_color(
	INTEGER,
	Numerical,
	PointX,PointY,
	PointX,PointY,
	'BufferedImage',
	INTEGER,INTEGER,INTEGER,
	INTEGER,
	INTEGER,INTEGER,INTEGER)
	- (i,i, i,i,i,i, i, i,i,i, i, o,o,o);
--
select_joint_color(
	SkeletonJointStatus,
	Point2D,
	'BufferedImage',
	TextLabel,
	MaterialAttributes)	- (i,i,i,i,o);
--
calc_rotation(Point3D) = Rotation		- (i);
--
normalize(Point3D) = Point3D			- (i);
--
cross(Point3D,Point3D) = Point3D		- (i,i);
--
angle(Point3D,Point3D) = Numerical		- (i,i);
angle(Numerical) = Numerical			- (i);
--
dot(Point3D,Point3D) = Numerical		- (i,i);
scale(Point3D,Numerical) = Point3D		- (i,i);
length(Point3D) = Numerical			- (i);
--
PREDICATES:
--
imperative:
--
'-'(Numerical) = Numerical			- (i);
'-'(Numerical,Numerical) = Numerical		- (i,i);
'+'(Numerical,Numerical) = Numerical		- (i,i);
'*'(Point3D,Point3D) = Numerical		- (i,i);
'*'(Numerical,Numerical) = Numerical		- (i,i);
'/'(Numerical,Numerical) = Numerical		- (i,i);
sqrt(Numerical) = Numerical			- (i);
power(Numerical,INTEGER) = Numerical		- (i,i);
arccos(Numerical) = Numerical			- (i);
round(PointX) = INTEGER				- (i);
round(PointY) = INTEGER				- (i);
]
-----------------------------------------------------------------------
interface 'MainDialog' (specialized 'Dialog'):
--
internal:
--
	kinect_buffer	: 'KinectBuffer';
	graphic_window	: 'Canvas3D';
--
[
]
-----------------------------------------------------------------------
interface 'ProgramState' (specialized 'Database'):
[
DOMAINS:
--
Target		= f(INTEGER,INTEGER).
--
PREDICATES:
--
imperative:
--
set_first_frame_time(INTEGER,INTEGER)		- (i,i);
get_first_frame_time(INTEGER,INTEGER)		- (o,o);
]
-----------------------------------------------------------------------
interface 'ThermalData' (specialized 'HashMap'):
[
DOMAINS:
--
ground:
--
TargetKey	= TextLabel.
TargetValue	= value(INTEGER,INTEGER,INTEGER,INTEGER).
--
PREDICATES:
--
imperative:
--
average(TextLabel,
	INTEGER,INTEGER,INTEGER,
	INTEGER,INTEGER,INTEGER)	- (i,i,i,i,o,o,o);
]
-----------------------------------------------------------------------
