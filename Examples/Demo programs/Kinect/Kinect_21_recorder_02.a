-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2017 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Kinect";
import .. from "morozov/ColorMap";
-----------------------------------------------------------------------
project: (('VideoRecorder'))
-----------------------------------------------------------------------
class 'VideoRecorder' (specialized 'Dialog'):
--
internal:
--
buffer			= ('ControllableBuffer',
				name=temporary_file_name,
				input_device=device(kinect,'auto'),
				main_window,
				legend_window,
				video_recorder=self);
recorder		= ('DataRecorder',
				name=temporary_file_name,
				input_device=device(kinect,'auto'));
kinect			= ('Kinect',
				skeleton_release_time=3);
main_window		= ('Canvas2D',
				background_color='SystemControl');
legend_window		= ('Canvas2D',
				background_color='SystemControl');
kinect_error_handler	= ('KinectErrorHandler',
				world=buffer);
data_are_to_be_saved	= ('Switch');
image_size_ratio	= ('FrameSizeRatio');
file_operations		= ('File');
text_operations		= ('Text');
color_maps		= ('ColorMap');
con			= ('Console');
--
constant:
--
temporary_file_name	= "recorder.k2j";
is_top_level_window	= 'yes';
exit_on_close		= 'yes';
--
[
goal:-!,
	switch_buttons,
	-- maximize,
	show,
	load_temporary_file_if_possible,
	switch_buttons.
--
action("Connect"):-
	buffer ? is_active,
	buffer?get_operating_mode() == 'LISTENING',
	kinect_error_handler ? stop,!,
	recorder ? stop,
	buffer ? set_operating_mode('PLAYING'),
	switch_buttons.
action("Connect"):-
	kinect_error_handler ? stop,
	update_recorder_mode,
	buffer ? set_operating_mode('LISTENING'),
	kinect_error_handler ? start,!,
	recorder ? connect,
	switch_buttons.
action("Choose"):-
	FileName== con?input_file_name(
		"Please select data file",
		"*.k2j",
		[
		"*.k2j","2.5D video data",
		"*.*","All Files"
		]),
	kinect_error_handler ? stop,!,
	choose_file(FileName).
action("Play"):-
	buffer?get_operating_mode() == 'LISTENING',!,
	buffer ? start,
	continue_recording_if_necessary,
	switch_buttons.
action("Play"):-!,
	buffer ? set_operating_mode('PLAYING'),
	start_reading,
	switch_buttons.
action("Pause"):-!,
	recorder ? pause,
	buffer ? pause,
	switch_buttons.
action("Stop"):-
	recorder ? is_active,!,
	recorder ? stop,
	switch_buttons.
action("Stop"):-!,
	buffer ? stop,
	switch_buttons.
action("Record"):-
	buffer ? is_active,
	check_whether_data_are_to_be_saved,
	buffer ? set_name(temporary_file_name),
	update_dialog_title(""),
	update_recorder_mode,
	recorder ? start,
	buffer ? start,!,
	data_are_to_be_saved ? assign('yes'),
	switch_buttons.
action("Save"):-
	buffer ? check_file_name,
	TargetFileName== con?input_new_file_name(
		"Please select a new file name",
		"*.k2j",
		[
		"*.k2j","2.5D video data",
		"*.*","All files"
		]),
	buffer ? rename_temporary_file(TargetFileName),!,
	data_are_to_be_saved ? assign('no'),
	choose_file(TargetFileName).
action("Export"):-
	buffer ? check_file_name,
	Directory== con?input_directory_name(
		"Please select output directory",
		""),
	buffer ? create_directory_if_necessary(Directory),!,
	update_recorder_mode,
	buffer ? set_output_directory(Directory),
	buffer ? set_operating_mode('READING'),
	buffer ? read_all_frames,
	buffer ? start,
	switch_buttons.
action("Calibrate"):-!,
	buffer ? get_computed_correction(Dx,Dy),
	kinect ? set_correction(Dx,Dy),
	switch_buttons.
action("Reset"):-!,
	kinect ? set_correction('default','default'),
	switch_buttons.
--
load_temporary_file_if_possible:-
	buffer ? does_exist,!,
	buffer ? set_operating_mode('READING'),
	buffer ? read_only_the_first_frame,
	start_reading,
	switch_buttons.
load_temporary_file_if_possible.
--
choose_file(FileName):-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	buffer ? set_name(FileName),
	update_dialog_title(FileName),
	switch_buttons.
choose_file(FileName):-
	buffer ? set_name(FileName),
	update_dialog_title(FileName),
	buffer ? set_operating_mode('READING'),
	buffer ? read_only_the_first_frame,
	start_reading,
	switch_buttons.
--
update_dialog_title(""):-!,
	put('title',"2.5D Video Recorder").
update_dialog_title(FileName):-
	put('title',"2.5D Video Recorder ["+FileName+"]").
--
start_reading:-
	buffer ? check_file_name,!,
	update_recorder_mode,
	park_scroll_control,
	buffer ? start.
start_reading.
--
check_whether_data_are_to_be_saved:-
	data_are_to_be_saved ? is_true,!,
	con ? ask(
		"Data are not saved!",
		"Do you want to rewrite the data?").
check_whether_data_are_to_be_saved.
--
park_scroll_control:-
	Range== ?val("I_List",?get(3011)),
	Range == [_,Right],!,
	put(3012,Right).
park_scroll_control.
--
continue_recording_if_necessary:-
	recorder ? is_active,!,
	recorder ? start.
continue_recording_if_necessary.
--
modified_control(2050):-!,
	update_color_map,
	redraw_recent_frame.
modified_control(2060):-!,
	update_people_coloring,
	redraw_recent_frame.
modified_control(3012):-!,
	scroll_video.
modified_control(_):-!,
	update_recorder_mode,
	redraw_recent_frame.
--
redraw_recent_frame:-
	buffer ? frame_obtained.
--
scroll_video:-
	buffer ? request_buffered_frame(?cast("INTEGER",?get(3012))),!.
scroll_video.
--
update_recorder_mode:-
	update_acquisition_mode,
	update_displaying_mode,
	update_color_map,
	update_people_coloring,
	switch_buttons.
--
update_acquisition_mode:-
	TextFT== ?cast("STRING",?get(2010)),
	FrameType== ?string_to_frame_type(TextFT),!,
	assemble_data_acquisition_mode(
		[1011,1012,1013,1014,1015,1016,1017],
		[
		'DEPTH_MAPS','COLORED_DEPTH_MAPS',
		'INFRARED','LONG_EXPOSURE_INFRARED',
		'MAPPED_COLOR','POINT_CLOUDS','COLOR'],
		[FrameType],Mode),
	buffer ? set_input_device(device(kinect,Mode)),
	recorder ? set_input_device(device(kinect,Mode)).
update_acquisition_mode.
--
assemble_data_acquisition_mode([Identifier|Rest1],[Mode|Rest2],L1,L2):-
	?val("YesNoUnknown",?get(Identifier)) == 'yes',!,
	assemble_data_acquisition_mode(Rest1,Rest2,[Mode|L1],L2).
assemble_data_acquisition_mode([_|Rest1],[_|Rest2],L1,L2):-!,
	assemble_data_acquisition_mode(Rest1,Rest2,L1,L2).
assemble_data_acquisition_mode(_,_,List,List).
--
update_displaying_mode:-
	TextFT== ?cast("STRING",?get(2010)),
	TextPIM== ?cast("STRING",?get(2020)),
	TextCM== ?cast("STRING",?get(2030)),
	TextSM== ?cast("STRING",?get(2040)),
	FrameType== ?string_to_frame_type(TextFT),
	PeopleIndexMode== ?string_to_people_index(TextPIM),
	CircumscriptionMode== ?string_to_circumscription(TextCM),
	SkeletonsMode== ?string_to_skeletons(TextSM),!,
	collect_circumscription_modes(
		[1021,1022,1023,1024],
		[
		'TOTAL_RECTANGLES','SKELETON_RECTANGLES',
		'TOTAL_PARALLELEPIPEDS','SKELETON_PARALLELEPIPEDS'],
		[CircumscriptionMode],
		CircumscriptionModes),
	DisplayingMode1== {
		frame_type: FrameType,
		people_index: PeopleIndexMode,
		circumscription: [CircumscriptionMode],
		skeletons: SkeletonsMode
		},
	DisplayingMode2== {
		frame_type: FrameType,
		people_index: PeopleIndexMode,
		circumscription: CircumscriptionModes,
		skeletons: SkeletonsMode
		},
	buffer ? set_displaying_mode(DisplayingMode1),
	recorder ? set_displaying_mode(DisplayingMode2).
update_displaying_mode.
--
collect_circumscription_modes([Identifier|Rest1],[Mode|Rest2],L1,L2):-
	?val("YesNoUnknown",?get(Identifier)) == 'yes',!,
	collect_circumscription_modes(Rest1,Rest2,[Mode|L1],L2).
collect_circumscription_modes([_|Rest1],[_|Rest2],L1,L2):-!,
	collect_circumscription_modes(Rest1,Rest2,L1,L2).
collect_circumscription_modes(_,_,List,List).
--
update_color_map:-
	TextCM== ?cast("STRING",?get(2050)),
	ColorMap== color_maps?string_to_color_map_name(TextCM),
	buffer ? set_color_map(ColorMap).
--
update_people_coloring:-
	TextPC== ?cast("STRING",?get(2060)),
	PeopleColors== ?string_to_people_colors(TextPC),!,
	buffer ? set_people_colors(PeopleColors).
update_people_coloring.
--
string_to_frame_type("Depth Maps")= 'DEPTH_MAPS'.
string_to_frame_type("Colored Depth Maps")= 'COLORED_DEPTH_MAPS'.
string_to_frame_type("Infrared")= 'INFRARED'.
string_to_frame_type(
	"Long Exposure Infrared")= 'LONG_EXPOSURE_INFRARED'.
string_to_frame_type("Mapped Color")= 'MAPPED_COLOR'.
string_to_frame_type("Point Clouds")= 'POINT_CLOUDS'.
string_to_frame_type("Color")= 'COLOR'.
string_to_frame_type("Device Tuning")= 'DEVICE_TUNING'.
string_to_frame_type("None")= 'NONE'.
--
string_to_people_index("Tincture People")= 'TINCTURE_PEOPLE'.
string_to_people_index("Paint People")= 'PAINT_PEOPLE'.
string_to_people_index("Extract People")= 'EXTRACT_PEOPLE'.
string_to_people_index(
	"Adaptively Extract People")= 'ADAPTIVELY_EXTRACT_PEOPLE'.
string_to_people_index("Project People")= 'PROJECT_PEOPLE'.
string_to_people_index("None")= 'NONE'.
--
string_to_circumscription("Total Rectangles")= 'TOTAL_RECTANGLES'.
string_to_circumscription(
	"Skeleton Rectangles")= 'SKELETON_RECTANGLES'.
string_to_circumscription(
	"Total Parallelepipeds")= 'TOTAL_PARALLELEPIPEDS'.
string_to_circumscription(
	"Skeleton Parallelepipeds")= 'SKELETON_PARALLELEPIPEDS'.
string_to_circumscription("None")= 'NONE'.
--
string_to_skeletons("Detect Skeletons")= 'DETECT_SKELETONS'.
string_to_skeletons("Track Skeletons")= 'DETECT_AND_TRACK_SKELETONS'.
string_to_skeletons("None")= 'NONE'.
--
string_to_people_colors("Rainbow")
	= ['Red','Green','Blue','Yellow','Magenta','Cyan'].
string_to_people_colors("Red")= ['Red'].
string_to_people_colors("Orange")= ['Orange'].
string_to_people_colors("Yellow")= ['Yellow'].
string_to_people_colors("Green")= ['Green'].
string_to_people_colors("Cyan")= ['Cyan'].
string_to_people_colors("Blue")= ['Blue'].
string_to_people_colors("Magenta")= ['Magenta'].
--
set_read_buffer_size(Size):-
	put(3011,[1,Size]).
--
refine_width(WidthToHeightRatio):-
	image_size_ratio ? is_current_ratio(WidthToHeightRatio),!.
refine_width(WidthToHeightRatio):-
	main_window ? refine_width(WidthToHeightRatio),
	image_size_ratio ? assign(WidthToHeightRatio).
--
retrieve_video_attributes:-
	buffer ? get_delivered_data_acquisition_mode(
		DataAcquisitionMode),
	buffer ? get_delivered_circumscription_modes(
		CircumscriptionModes),
	put(1011,'no'),
	put(1012,'no'),
	put(1013,'no'),
	put(1014,'no'),
	put(1015,'no'),
	put(1016,'no'),
	put(1017,'no'),
	put(1021,'no'),
	put(1022,'no'),
	put(1023,'no'),
	put(1024,'no'),
	disable(1011),
	disable(1012),
	disable(1013),
	disable(1014),
	disable(1015),
	disable(1016),
	disable(1017),
	disable(1021),
	disable(1022),
	disable(1023),
	disable(1024),
	update_data_acquisition_mode(DataAcquisitionMode),
	update_circumscription_modes(CircumscriptionModes).
--
update_data_acquisition_mode([Item|Rest]):-!,
	update_frame_type_flag(Item),
	update_data_acquisition_mode(Rest).
update_data_acquisition_mode(_).
--
update_frame_type_flag('DEPTH_MAPS'):-!,
	put(1011,'yes').
update_frame_type_flag('COLORED_DEPTH_MAPS'):-!,
	put(1012,'yes').
update_frame_type_flag('INFRARED'):-!,
	put(1013,'yes').
update_frame_type_flag('LONG_EXPOSURE_INFRARED'):-!,
	put(1014,'yes').
update_frame_type_flag('MAPPED_COLOR'):-!,
	put(1015,'yes').
update_frame_type_flag('POINT_CLOUDS'):-!,
	put(1016,'yes').
update_frame_type_flag('COLOR'):-!,
	put(1017,'yes').
update_frame_type_flag(_).
--
update_circumscription_modes([Item|Rest]):-!,
	update_circumscription_mode(Item),
	update_circumscription_modes(Rest).
update_circumscription_modes([]):-!.
update_circumscription_modes(Item):-
	update_circumscription_mode(Item).
--
update_circumscription_mode('TOTAL_RECTANGLES'):-!,
	put(1021,'yes').
update_circumscription_mode('SKELETON_RECTANGLES'):-!,
	put(1022,'yes').
update_circumscription_mode('TOTAL_PARALLELEPIPEDS'):-!,
	put(1023,'yes').
update_circumscription_mode('SKELETON_PARALLELEPIPEDS'):-!,
	put(1024,'yes').
update_circumscription_mode(_).
--
switch_buttons:-
	switch_button_Connect,
	switch_button_Choose,
	switch_button_Play,
	switch_button_Pause,
	switch_button_Record,
	switch_button_Stop,
	switch_button_Save,
	switch_button_Export,
	switch_button_Calibrate,
	switch_button_Reset,
	switch_text_area_Correction,
	switch_text_area_Description,
	switch_auxiliary_controls.
--
switch_button_Connect:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	enable("Connect"),
	set_control_text("Connect","Disco&nnect"),
	set_control_text_color("Connect",'Blue').
switch_button_Connect:-
	enable("Connect"),
	set_control_text("Connect","Co&nnect"),
	set_control_text_color("Connect",'default').
--
switch_button_Choose:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	disable("Choose").
switch_button_Choose:-
	enable("Choose").
--
switch_button_Play:-
	buffer ? is_active,
	buffer ? is_suspended,!,
	enable("Play"),
	set_control_text_color("Play",'default').
switch_button_Play:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	disable("Play"),
	set_control_text_color("Play",'default').
switch_button_Play:-
	buffer ? is_active,!,
	enable("Play"),
	set_control_text_color("Play",'DkGreen').
switch_button_Play:-
	buffer ? does_exist,!,
	enable("Play"),
	set_control_text_color("Play",'default').
switch_button_Play:-
	disable("Play"),
	set_control_text_color("Play",'default').
--
switch_button_Pause:-
	buffer ? is_active,
	buffer ? is_suspended,!,
	enable("Pause"),
	set_control_text_color("Pause",'Orange').
switch_button_Pause:-
	buffer ? is_active,!,
	enable("Pause"),
	set_control_text_color("Pause",'default').
switch_button_Pause:-
	disable("Pause"),
	set_control_text_color("Pause",'default').
--
switch_button_Record:-
	buffer?get_operating_mode() == 'LISTENING',
	recorder ? is_active,!,
	enable("Record"),
	set_control_text_color("Record",'Red').
switch_button_Record:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	enable("Record"),
	set_control_text_color("Record",'default').
switch_button_Record:-
	disable("Record"),
	set_control_text_color("Record",'default').
--
switch_button_Stop:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,
	recorder ? is_active,!,
	enable("Stop"),
	set_control_text_color("Stop",'default').
switch_button_Stop:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	disable("Stop"),
	set_control_text_color("Stop",'default').
switch_button_Stop:-
	buffer ? is_active,!,
	enable("Stop"),
	set_control_text_color("Stop",'default').
switch_button_Stop:-
	disable("Stop"),
	set_control_text_color("Stop",'default').
--
switch_button_Save:-
	recorder ? is_active,!,
	disable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,
	data_are_to_be_saved ? is_true,!,
	enable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	buffer ? is_active,!,
	disable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	file_operations ? does_exist(temporary_file_name),!,
	enable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	disable("Save"),
	set_control_text_color("Save",'default').
--
switch_button_Export:-
	buffer ? is_active,!,
	disable("Export"),
	set_control_text_color("Export",'default').
switch_button_Export:-
	buffer ? does_exist,!,
	enable("Export"),
	set_control_text_color("Export",'default').
switch_button_Export:-
	disable("Export"),
	set_control_text_color("Export",'default').
--
switch_button_Calibrate:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,
	TextFT== ?cast("STRING",?get(2010)),
	FrameType== ?string_to_frame_type(TextFT),
	FrameType == 'DEVICE_TUNING',!,
	enable("Calibrate"),
	set_control_text_color("Calibrate",'default').
switch_button_Calibrate:-
	disable("Calibrate"),
	set_control_text_color("Calibrate",'default').
--
switch_button_Reset:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,
	TextFT== ?cast("STRING",?get(2010)),
	FrameType== ?string_to_frame_type(TextFT),
	FrameType == 'DEVICE_TUNING',!,
	enable("Reset"),
	set_control_text_color("Reset",'default').
switch_button_Reset:-
	disable("Reset"),
	set_control_text_color("Reset",'default').
--
switch_text_area_Correction:-
	kinect ? get_correction_in_pixels(Dx,Dy),
	TextX== text_operations?format("dX: %s",Dx),
	TextY== text_operations?format("dY: %s",Dy),
	put(5014,TextX),
	put(5015,TextY).
--
switch_text_area_Description:-
	buffer ? get_delivered_description(Description),
	buffer ? get_delivered_copyright(Copyright),
	buffer ? get_delivered_registration_date(Date),
	buffer ? get_delivered_registration_time(Time),
	put(5016,Description),
	put(5017,Copyright),
	put(5018,Date),
	put(5019,Time).
--
switch_auxiliary_controls:-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	enable(1011),
	enable(1012),
	enable(1013),
	enable(1014),
	enable(1015),
	enable(1016),
	enable(1017),
	enable(1021),
	enable(1022),
	enable(1023),
	enable(1024),
	disable(3011).
switch_auxiliary_controls:-
	disable(1011),
	disable(1012),
	disable(1013),
	disable(1014),
	disable(1015),
	disable(1016),
	disable(1017),
	disable(1021),
	disable(1022),
	disable(1023),
	disable(1024),
	enable(3011).
--
complete_data_transfer:-	
	switch_buttons.
]
-----------------------------------------------------------------------
class 'ControllableBuffer' (specialized 'KinectBuffer'):
--
constant:
--
	name;
--
	operating_mode		= 'PLAYING';
--
internal:
--
	main_window;
	legend_window;
	video_recorder;
--
	analyzer		= ('BehaviorAnalyzer',
					buffer=self,
					graphics_window=main_window);
--
	image			= ('BufferedImage');
	directory_name		= ('DirectoryName');
--
	stop_after_the_first_frame	= ('Switch');
	file_operation_error_handler	= ('FileOperationErrorHandler',
						world=self);
--
	file_operations		= ('File');
	text_operations		= ('Text');
	timer_operations	= ('Timer');
	con			= ('Console');
--
constant:
--
	read_buffer_size		= 30;
	maximal_chronicle_length	= 1.5;
	slow_motion_coefficient		= -1;
--
constant:
--
	ellipse_radius		= 10;
--
	velocity_bound_1	= 0.5;
	velocity_bound_2	= 1.0;
	velocity_bound_3	= 2.0;
	velocity_bound_4	= 3.0;
	velocity_bound_5	= 4.0;
	velocity_bound_6	= 5.0;
	velocity_bound_7	= 6.0;
	velocity_bound_8	= 7.0;
--
	velocity_color_1	= 'Violet';
	velocity_color_2	= 'Magenta';
	velocity_color_3	= 'Cyan';
	velocity_color_4	= 'Emerald';
	velocity_color_5	= 'Lime';
	velocity_color_6	= 'Yellow';
	velocity_color_7	= 'Orange';
	velocity_color_8	= 'Pink';
	velocity_color_9	= 'Red';
--
[
goal:-!,
	video_recorder ? set_read_buffer_size(read_buffer_size).
--
frame_obtained:-
	commit,
	get_recent_frame_number(FrameNumber),
	get_recent_frame_time(FrameTime),
	get_recent_frame_rate(FrameRate),
	get_recent_image(image),
	DisplayingMode== ?get_displaying_mode(),
	DisplayingMode == {
		frame_type: FrameType,
		skeletons: SkeletonsMode|_},!,
	get_image_size_in_pixels(IW,IH,FrameType),
	main_window ? suspend_redrawing,
	main_window ? clear,
	main_window ? draw_image(image,0,0,1,1),
	report_time(FrameNumber,FrameTime,FrameRate),
	draw_tracks_or_skeletons(SkeletonsMode,FrameType,IW,IH),
	video_recorder ? refine_width(IW/IH),
	main_window ? draw_now,
	save_frame_if_necessary(?get_operating_mode(),FrameNumber).
--
data_transfer_completion:-!,
	video_recorder ? complete_data_transfer.
--
data_transfer_error(ErrorName):-!,
	video_recorder ? complete_data_transfer,
	con ? error("Data Transfer Error",ErrorName).
--
get_image_size_in_pixels(IW,IH,'COLOR'):-!,
	get_color_image_size_in_pixels(IW,IH).
get_image_size_in_pixels(IW,IH,_):-
	get_depth_image_size_in_pixels(IW,IH).
-----------------------------------------------------------------------
draw_tracks_or_skeletons('DETECT_SKELETONS',FrameType,IW,IH):-!,
	hide_legend,
	get_skeletons(Skeletons),
	draw_skeletons(IW,IH,Skeletons,FrameType).
draw_tracks_or_skeletons(
		'DETECT_AND_TRACK_SKELETONS',FrameType,IW,IH):-!,
	draw_legend,
	get_tracks(Tracks),
	draw_tracks(IW,IH,Tracks,FrameType),
	get_chronicle(Chronicle),
	analyzer ? analyse_chronicle(Chronicle).
draw_tracks_or_skeletons(_,_,_,_):-
	hide_legend.
-----------------------------------------------------------------------
draw_skeletons(IW,IH,[Skeleton|Rest],FrameType):-!,
	draw_skeleton(IW,IH,Skeleton,FrameType),
	draw_parallelepipeds(IW,IH,Skeleton,FrameType),
	draw_rectangles(IW,IH,Skeleton,FrameType),
	draw_skeletons(IW,IH,Rest,FrameType).
draw_skeletons(_,_,_,_).
-----------------------------------------------------------------------
draw_tracks(IW,IH,[Track|Rest],FrameType):-
	Track == {is_complete:'no',skeletons:Skeletons|_},!,
	draw_recent_skeleton(IW,IH,Skeletons,{},FrameType),
	draw_tracks(IW,IH,Rest,FrameType).
draw_tracks(IW,IH,[_|Rest],FrameType):-!,
	draw_tracks(IW,IH,Rest,FrameType).
draw_tracks(_,_,_,_).
-----------------------------------------------------------------------
draw_recent_skeleton(IW,IH,[S2],S1,FrameType):-!,
	draw_skeleton(IW,IH,S2,FrameType),
	draw_identifier(IW,IH,S2,FrameType),
	draw_hand_trajectories(IW,IH,S1,S2,FrameType),
	draw_parallelepipeds(IW,IH,S2,FrameType),
	draw_rectangles(IW,IH,S2,FrameType).
draw_recent_skeleton(IW,IH,[S2|Rest],S1,FrameType):-!,
	draw_hand_trajectories(IW,IH,S1,S2,FrameType),
	draw_recent_skeleton(IW,IH,Rest,S2,FrameType).
draw_recent_skeleton(_,_,_,_,_).
--
draw_skeleton(IW,IH,Skeleton,FrameType):-
	Skeleton == {
		head: Head,
		spine: Spine,
		left_arm: LeftArm,
		right_arm: RightArm,
		left_leg: LeftLeg,
		right_leg: RightLeg
		|_},
	draw_spine(IW,IH,Head,Spine,FrameType),
	draw_arm(IW,IH,Spine,LeftArm,FrameType),
	draw_arm(IW,IH,Spine,RightArm,FrameType),
	draw_leg(IW,IH,Spine,LeftLeg,FrameType),
	draw_leg(IW,IH,Spine,RightLeg,FrameType),
	fail.
draw_skeleton(_,_,_,_).
--
draw_spine(IW,IH,Head,Spine,FrameType):-
	Spine == {
		neck: Neck,
		shoulder: Shoulder,
		mid: Mid,
		base: Base
		|_},!,
	draw_link(IW,IH,Head,Neck,FrameType),
	draw_link(IW,IH,Neck,Shoulder,FrameType),
	draw_link(IW,IH,Shoulder,Mid,FrameType),
	draw_link(IW,IH,Mid,Base,FrameType).
draw_spine(_,_,_,_,_).
--
draw_arm(IW,IH,Spine,Arm,FrameType):-
	Spine == {shoulder:SpineShoulder|_},
	Arm == {
		shoulder: ArmShoulder,
		elbow: Elbow,
		wrist: Wrist,
		hand: Hand
		|Rest},!,
	draw_link(IW,IH,SpineShoulder,ArmShoulder,FrameType),
	draw_link(IW,IH,ArmShoulder,Elbow,FrameType),
	draw_link(IW,IH,Elbow,Wrist,FrameType),
	draw_link(IW,IH,Wrist,Hand,FrameType),
	draw_hand(IW,IH,Wrist,Hand,Rest,FrameType).
draw_arm(IW,IH,Spine,Arm,FrameType):-
	Spine == {neck:Neck|_},
	Arm == {
		shoulder: ArmShoulder,
		elbow: Elbow,
		wrist: Wrist,
		hand: Hand
		|Rest},!,
	draw_link(IW,IH,Neck,ArmShoulder,FrameType),
	draw_link(IW,IH,ArmShoulder,Elbow,FrameType),
	draw_link(IW,IH,Elbow,Wrist,FrameType),
	draw_link(IW,IH,Wrist,Hand,FrameType),
	draw_hand(IW,IH,Wrist,Hand,Rest,FrameType).
draw_arm(_,_,_,_,_).
--
draw_hand(IW,IH,Wrist,Hand,Rest,FrameType):-
	Rest == {tip:Tip,thumb:Thumb|_},!,
	draw_link(IW,IH,Wrist,Thumb,FrameType),
	draw_link(IW,IH,Hand,Tip,FrameType).
draw_hand(_,_,_,_,_,_).
--
draw_leg(IW,IH,Spine,Leg,FrameType):-
	Spine == {base:Base|_},
	Leg == {
		hip: Hip,
		knee: Knee,
		ankle: Ankle,
		foot: Foot
		|_},!,
	draw_link(IW,IH,Base,Hip,FrameType),
	draw_link(IW,IH,Hip,Knee,FrameType),
	draw_link(IW,IH,Knee,Ankle,FrameType),
	draw_link(IW,IH,Ankle,Foot,FrameType).
draw_leg(_,_,_,_,_).
--
draw_link(IW,IH,Joint1,Joint2,FrameType):-
	FrameType == 'COLOR',
	Joint1 == {
		status:Status1,
		position:{mapping2:p(Joint1X1,Joint1Y1)|_}|_},
	Joint2 == {
		status:Status2,
		position:{mapping2:p(Joint2X1,Joint2Y1)|_}|_},!,
	select_line_width(Status1,Status2,LineWidth),
	main_window ? set_pen(
		{color:'DkGreen',lineWidth:LineWidth}),
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	Joint2X2== Joint2X1 / IW,
	Joint2Y2== Joint2Y1 / IH,
	main_window ? draw_line(
		Joint1X2,Joint1Y2,Joint2X2,Joint2Y2),
	draw_joint(IW,IH,Joint1,FrameType),
	draw_joint(IW,IH,Joint2,FrameType).
draw_link(IW,IH,Joint1,Joint2,_):-
	Joint1 == {
		status:Status1,
		position:{mapping1:p(Joint1X1,Joint1Y1)|_}|_},
	Joint2 == {
		status:Status2,
		position:{mapping1:p(Joint2X1,Joint2Y1)|_}|_},!,
	select_line_width(Status1,Status2,LineWidth),
	main_window ? set_pen(
		{color:'DkGreen',lineWidth:LineWidth}),
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	Joint2X2== Joint2X1 / IW,
	Joint2Y2== Joint2Y1 / IH,
	main_window ? draw_line(
		Joint1X2,Joint1Y2,Joint2X2,Joint2Y2).
draw_link(_,_,_,_,_).
--
select_line_width('TRACKED','TRACKED',3):-!.
select_line_width(_,_,1).
--
select_line_width('TRACKED','TRACKED','TRACKED',3):-!.
select_line_width(_,_,_,1).
--
draw_joint(IW,IH,Joint,'COLOR'):-
	Joint == {position:{mapping2:p(X1,Y1)|_}|_},!,
	main_window ? set_brush('Orange'),
	main_window ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	main_window ? set_text_alignment('CENTER','CENTER'),
	X2== (X1 - ellipse_radius) / IW,
	Y2== (Y1 - ellipse_radius) / IH,
	W2== ellipse_radius*2 / IW,
	H2== ellipse_radius*2 / IH,
	main_window ? draw_ellipse(X2,Y2,W2,H2).
draw_joint(IW,IH,Joint,_):-
	Joint == {position:{mapping1:p(X1,Y1)|_}|_},!,
	main_window ? set_brush('Orange'),
	main_window ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	main_window ? set_text_alignment('CENTER','CENTER'),
	X2== (X1 - ellipse_radius) / IW,
	Y2== (Y1 - ellipse_radius) / IH,
	W2== ellipse_radius*2 / IW,
	H2== ellipse_radius*2 / IH,
	main_window ? draw_ellipse(X2,Y2,W2,H2).
draw_joint(_,_,_,_).
-----------------------------------------------------------------------
draw_identifier(IW,IH,Skeleton,'COLOR'):-
	Skeleton == {
		identifier: Id,
		head: Head
		|_},
	Head == {position:{mapping2:p(Joint1X1,Joint1Y1)|_}|_},!,
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	main_window ? set_brush('Yellow'),
	main_window ? set_font({size:32,weight:'WEIGHT_BOLD'}),
	main_window ? set_text_alignment('CENTER','BOTTOM'),
	main_window ? draw_text(
		Joint1X2,
		Joint1Y2-0.10,
		text_operations?format("%d",Id+1)).
draw_identifier(IW,IH,Skeleton,_):-
	Skeleton == {
		identifier: Id,
		head: Head
		|_},
	Head == {position:{mapping1:p(Joint1X1,Joint1Y1)|_}|_},!,
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	main_window ? set_brush('Yellow'),
	main_window ? set_font({size:32,weight:'WEIGHT_BOLD'}),
	main_window ? set_text_alignment('CENTER','BOTTOM'),
	main_window ? draw_text(
		Joint1X2,
		Joint1Y2-0.10,
		text_operations?format("%d",Id+1)).
draw_identifier(_,_,_,_).
-----------------------------------------------------------------------
draw_hand_trajectories(IW,IH,S1,S2,FrameType):-
	S1 == {
		left_arm:{hand:LeftHand1|_},
		right_arm:{hand:RightHand1|_}
		|_},
	S2 == {
		left_arm:{hand:LeftHand2|_},
		right_arm:{hand:RightHand2|_}
		|_},!,
	draw_trajectory_segment(
		IW,IH,
		LeftHand1,
		LeftHand2,
		FrameType),
	draw_trajectory_segment(
		IW,IH,
		RightHand1,
		RightHand2,
		FrameType).
draw_hand_trajectories(_,_,_,_,_).
--
draw_trajectory_segment(IW,IH,J1,J2,FrameType):-
	FrameType == 'COLOR',
	J1 == {
		status:STATUS1,
		position:{
			mapping2:p(Joint1X1,Joint1Y1)
			|_}
		|_},
	J2 == {
		status:STATUS2,
		position:{
			mapping2:p(Joint2X1,Joint2Y1),
			velocity:p(Vx2,Vy2,Vz2)|_}
		|_},!,
	V2== ?velocity(Vx2,Vy2,Vz2),
	select_trajectory_color(V2,Color),
	select_line_width(STATUS1,STATUS2,W),
	main_window ? set_pen({color:Color,lineWidth:W}),
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	Joint2X2== Joint2X1 / IW,
	Joint2Y2== Joint2Y1 / IH,
	main_window ? draw_line(
		Joint1X2,Joint1Y2,Joint2X2,Joint2Y2).
draw_trajectory_segment(IW,IH,J1,J2,_):-
	J1 == {
		status:Status1,
		position:{
			mapping1:p(Joint1X1,Joint1Y1)
			|_}
		|_},
	J2 == {
		status:Status2,
		position:{
			mapping1:p(Joint2X1,Joint2Y1),
			velocity:p(Vx2,Vy2,Vz2)|_}
		|_},!,
	V2== ?velocity(Vx2,Vy2,Vz2),
	select_trajectory_color(V2,Color),
	select_line_width(Status1,Status2,W),
	main_window ? set_pen({color:Color,lineWidth:W}),
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	Joint2X2== Joint2X1 / IW,
	Joint2Y2== Joint2Y1 / IH,
	main_window ? draw_line(
		Joint1X2,Joint1Y2,Joint2X2,Joint2Y2).
draw_trajectory_segment(_,_,_,_,_).
--
velocity(Vx,Vy,Vz) = V :-
	V== ?sqrt(?power(Vx,2)+?power(Vy,2)+?power(Vz,2)).
--
select_trajectory_color(Velocity,velocity_color_1):-
	Velocity <= velocity_bound_1,!.
select_trajectory_color(Velocity,velocity_color_2):-
	Velocity > velocity_bound_1,
	Velocity <= velocity_bound_2,!.
select_trajectory_color(Velocity,velocity_color_3):-
	Velocity > velocity_bound_2,
	Velocity <= velocity_bound_3,!.
select_trajectory_color(Velocity,velocity_color_4):-
	Velocity > velocity_bound_3,
	Velocity <= velocity_bound_4,!.
select_trajectory_color(Velocity,velocity_color_5):-
	Velocity > velocity_bound_4,
	Velocity <= velocity_bound_5,!.
select_trajectory_color(Velocity,velocity_color_6):-
	Velocity > velocity_bound_5,
	Velocity <= velocity_bound_6,!.
select_trajectory_color(Velocity,velocity_color_7):-
	Velocity > velocity_bound_6,
	Velocity <= velocity_bound_7,!.
select_trajectory_color(Velocity,velocity_color_8):-
	Velocity > velocity_bound_7,
	Velocity <= velocity_bound_8,!.
select_trajectory_color(_,velocity_color_9).
-----------------------------------------------------------------------
draw_parallelepipeds(IW,IH,Skeleton,FrameType):-
	Skeleton == {total_parallelepiped:Parallelepiped|_},
	draw_parallelepiped(
		IW,IH,Parallelepiped,FrameType,'Blue',3),
	fail.
draw_parallelepipeds(IW,IH,Skeleton,FrameType):-
	Skeleton == {skeleton_parallelepiped:Parallelepiped|_},
	draw_parallelepiped(
		IW,IH,Parallelepiped,FrameType,'Violet',3),
	fail.
draw_parallelepipeds(_,_,_,_).
--
draw_parallelepiped(IW,IH,Parallelepiped,FrameType,Color,LineWidth):-
	Parallelepiped == {
		vertex11: V11,
		vertex12: V12,
		vertex13: V13,
		vertex14: V14,
		vertex21: V21,
		vertex22: V22,
		vertex23: V23,
		vertex24: V24
		|_},
	draw_line(IW,IH,V11,V12,FrameType,Color,LineWidth,{}),
	draw_line(IW,IH,V12,V13,FrameType,Color,LineWidth,{}),
	draw_line(IW,IH,V13,V14,FrameType,Color,LineWidth,{}),
	draw_line(IW,IH,V14,V11,FrameType,Color,LineWidth,{}),
	DashArray== {dashArray:[10,10]},
	draw_line(IW,IH,V21,V22,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V22,V23,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V23,V24,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V24,V21,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V11,V21,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V12,V22,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V13,V23,FrameType,Color,LineWidth,DashArray),
	draw_line(IW,IH,V14,V24,FrameType,Color,LineWidth,DashArray),
	fail.
draw_parallelepiped(_,_,_,_,_,_).
-----------------------------------------------------------------------
draw_rectangles(IW,IH,Skeleton,FrameType):-
	Skeleton == {total_rectangle:TotalRectangle|_},
	draw_rectangle(IW,IH,TotalRectangle,FrameType,'Orange',5),
	fail.
draw_rectangles(IW,IH,Skeleton,FrameType):-
	Skeleton == {skeleton_rectangle:SkeletonRectangle|_},
	draw_rectangle(IW,IH,SkeletonRectangle,FrameType,'Red',5),
	fail.
draw_rectangles(_,_,_,_).
--
draw_rectangle(IW,IH,Rectangle,FrameType,Color,LineWidth):-
	Rectangle == {
		vertex1: V1,
		vertex2: V2,
		vertex3: V3,
		vertex4: V4
		|_},
	draw_line(IW,IH,V1,V2,FrameType,Color,LineWidth,{}),
	draw_line(IW,IH,V2,V3,FrameType,Color,LineWidth,{}),
	draw_line(IW,IH,V3,V4,FrameType,Color,LineWidth,{}),
	draw_line(IW,IH,V4,V1,FrameType,Color,LineWidth,{}),
	fail.
draw_rectangle(_,_,_,_,_,_).
-----------------------------------------------------------------------
draw_line(IW,IH,Vertex1,Vertex2,FrameType,Color,LineWidth,DashArray):-
	FrameType == 'COLOR',
	Vertex1 == {mapping2:p(Vertex1X1,Vertex1Y1)|_},
	Vertex2 == {mapping2:p(Vertex2X1,Vertex2Y1)|_},
	main_window ? set_pen(
		{color:Color,lineWidth:LineWidth|DashArray}),!,
	Vertex1X2== Vertex1X1 / IW,
	Vertex1Y2== Vertex1Y1 / IH,
	Vertex2X2== Vertex2X1 / IW,
	Vertex2Y2== Vertex2Y1 / IH,
	main_window ? draw_line(
		Vertex1X2,Vertex1Y2,Vertex2X2,Vertex2Y2).
draw_line(IW,IH,Vertex1,Vertex2,_,Color,LineWidth,DashArray):-
	Vertex1 == {mapping1:p(Vertex1X1,Vertex1Y1)|_},
	Vertex2 == {mapping1:p(Vertex2X1,Vertex2Y1)|_},
	main_window ? set_pen(
		{color:Color,lineWidth:LineWidth|DashArray}),!,
	Vertex1X2== Vertex1X1 / IW,
	Vertex1Y2== Vertex1Y1 / IH,
	Vertex2X2== Vertex2X1 / IW,
	Vertex2Y2== Vertex2Y1 / IH,
	main_window ? draw_line(
		Vertex1X2,Vertex1Y2,Vertex2X2,Vertex2Y2).
draw_line(_,_,_,_,_,_,_,_).
-----------------------------------------------------------------------
report_time(_,_,_):-
	main_window ? set_brush('Green'),
	main_window ? set_font({size:18}),
	fail.
report_time(FrameNumber,FrameTime,FrameRate):-
	FrameNumber >= 0,
	Time== timer_operations?convert_to_time(FrameTime),
	Time == time(Hours,Minutes,Seconds,Milliseconds),!,
	main_window ? set_text_alignment('LEFT','TOP'),
	main_window ? draw_text(
		0.02, 0.02,
		text_operations?format(
			"Time: %02d:%02d:%02d.%03d; Frame: %d",
			Hours,Minutes,Seconds,Milliseconds,
			FrameNumber)),
	main_window ? set_text_alignment('RIGHT','TOP'),
	main_window ? draw_text(
		0.95, 0.02,
		text_operations?format(
			"Frame Rate: %2.1f",FrameRate)).
report_time(_,_,_).
--
draw_legend:-
	legend_window ? suspend_redrawing,
	legend_window ? clear,
	legend_window ? set_brush('off'),
	legend_window ? set_font({size:12,weight:'WEIGHT_BOLD'}),
	legend_window ? set_text_alignment('LEFT','CENTER'),
	X0r== 0.05,
	Y0r== 0.00,
	X1r== X0r + 0.10,
	Y1r== Y0r + 0.10,
	Y2r== Y1r + 0.10,
	Y3r== Y2r + 0.10,
	Y4r== Y3r + 0.10,
	Y5r== Y4r + 0.10,
	Y6r== Y5r + 0.10,
	Y7r== Y6r + 0.10,
	Y8r== Y7r + 0.10,
	Y9r== Y8r + 0.10,
	T1== text_operations?format(
		"Velocity <= %1.1f",velocity_bound_1),
	T2== text_operations?format(
		"Velocity > %1.2f",velocity_bound_1),
	T3== text_operations?format(
		"Velocity > %1.2f",velocity_bound_2),
	T4== text_operations?format(
		"Velocity > %1.2f",velocity_bound_3),
	T5== text_operations?format(
		"Velocity > %1.2f",velocity_bound_4),
	T6== text_operations?format(
		"Velocity > %1.2f",velocity_bound_5),
	T7== text_operations?format(
		"Velocity > %1.2f",velocity_bound_6),
	T8== text_operations?format(
		"Velocity > %1.2f",velocity_bound_7),
	T9== text_operations?format(
		"Velocity > %1.2f",velocity_bound_8),
	legend_window ? set_pen({color:velocity_color_1}),
	legend_window ? draw_text(X1r,Y1r,T1),
	legend_window ? set_pen({color:velocity_color_2}),
	legend_window ? draw_text(X1r,Y2r,T2),
	legend_window ? set_pen({color:velocity_color_3}),
	legend_window ? draw_text(X1r,Y3r,T3),
	legend_window ? set_pen({color:velocity_color_4}),
	legend_window ? draw_text(X1r,Y4r,T4),
	legend_window ? set_pen({color:velocity_color_5}),
	legend_window ? draw_text(X1r,Y5r,T5),
	legend_window ? set_pen({color:velocity_color_6}),
	legend_window ? draw_text(X1r,Y6r,T6),
	legend_window ? set_pen({color:velocity_color_7}),
	legend_window ? draw_text(X1r,Y7r,T7),
	legend_window ? set_pen({color:velocity_color_8}),
	legend_window ? draw_text(X1r,Y8r,T8),
	legend_window ? set_pen({color:velocity_color_9}),
	legend_window ? draw_text(X1r,Y9r,T9),
	legend_window ? draw_now.
--
hide_legend:-
	legend_window ? clear.
-----------------------------------------------------------------------
check_file_name:-
	does_exist,!.
check_file_name:-
	FileName== ?get_name(),
	con ? error(
		"Illegal File name",
		text_operations?format(
			"The '%s' file does not exist.",FileName)),
	fail.
--
set_output_directory(Directory):-
	directory_name ? retract_all,
	directory_name ? insert(Directory).
--
create_directory_if_necessary(Directory):-
	file_operation_error_handler ? does_exist(Directory),
	Mask== text_operations?format("%s/*.jpg",Directory),
	List== file_operation_error_handler?list_directory(Mask),
	delete_files(List),
	fail.
create_directory_if_necessary(Directory):-
	file_operation_error_handler ? make_directory(Directory),!.
--
delete_files([FileName|Rest]):-
	file_operation_error_handler ? delete(FileName),!,
	delete_files(Rest).
delete_files([_|Rest]):-!,
	delete_files(Rest).
delete_files(_).
--
read_all_frames:-
	stop_after_the_first_frame ? assign('no').
read_only_the_first_frame:-
	stop_after_the_first_frame ? assign('yes').
--
save_frame_if_necessary('READING',_):-
	stop_after_the_first_frame ? is_true,!,
	stop,
	video_recorder ? retrieve_video_attributes,
	video_recorder ? switch_buttons.
save_frame_if_necessary('READING',FrameNumber):-
	directory_name ? find(Directory),
	FileName== text_operations?format(
		"%s/%08d.jpg",Directory,FrameNumber),
	file_operation_error_handler ? save(
		FileName,
		{
			format:'default',
			compressionQuality:0.95,
			progressiveMode:'on',
			interlacing:'on',
			comment:"The Actor Prolog project"
		}),!,
	continue_exporting_if_necessary.
save_frame_if_necessary('READING',_):-!,
	stop,
	video_recorder ? switch_buttons.
save_frame_if_necessary(_,_).
--
rename_temporary_file(TargetFileName):-
	file_operation_error_handler ? delete(TargetFileName),
	file_operation_error_handler ? rename(TargetFileName).
--
continue_exporting_if_necessary:-
	eof,!.
continue_exporting_if_necessary:-
	start,
	video_recorder ? switch_buttons.
--
list_directory(Mask) = file_operations?list_directory(Mask).
--
make_directory(DirectoryName):-
	file_operations ? make_directory(DirectoryName).
--
save(FileName,ImageAttributes):-
	main_window ? save(FileName,ImageAttributes).
]
-----------------------------------------------------------------------
class 'BehaviorAnalyzer' (specialized 'Alpha'):
--
internal:
--
buffer;
graphics_window;
--
con			= ('Console');
--
[
analyse_chronicle([Frame|Past]):-
	Frame == {skeletons:Skeletons|_},
	analyse_skeletons(Skeletons,Past),!.
analyse_chronicle([_|Rest]):-!,
	analyse_chronicle(Rest).
analyse_chronicle(_).
--
analyse_skeletons(Skeletons,Past):-
	a_moving_arm_of_a_person(Skeletons,Id,Side,Point,V,T),
	analyse_moving_arm(Skeletons,Past,Id,Side,Point,V,T),!.
--
analyse_moving_arm(Skeletons,Past,Id,Side,Point,V,T):-
	is_near_a_head_of_a_person(Skeletons,Past,Id,Side,Point,V,T),!,
	graphics_window ? set_font({size:38,weight:'WEIGHT_BOLD'}),
	graphics_window ? set_pen({color:'Red'}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	graphics_window ? draw_text(
		0.5,0.1,
		"A punch in the face is detected!").
analyse_moving_arm(Skeletons,Past,Id,Side,Point,_,T):-
	is_near_a_hand_of_a_person(Skeletons,Past,Id,Side,Point,T),!,
	graphics_window ? set_font({size:38,weight:'WEIGHT_BOLD'}),
	graphics_window ? set_pen({color:'Cyan'}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	graphics_window ? draw_text(
		0.5,0.1,
		"A handshake is detected!").
-----------------------------------------------------------------------
a_moving_arm_of_a_person([S|_],Id,Side,Point,V,T):-
	a_moving_hand_of_a_person(S,Id,Side,Point,V,T).
a_moving_arm_of_a_person([_|Rest],Id,Side,Point,V,T):-!,
	a_moving_arm_of_a_person(Rest,Id,Side,Point,V,T).
--
a_moving_hand_of_a_person(Skeleton,Id,'Right',Point,V,T):-
	Skeleton == {	identifier:Id,
			right_arm:{tip:RightHand|_},
			time:T|_},
	a_moving_joint(RightHand,Point,V).
a_moving_hand_of_a_person(Skeleton,Id,'Left',Point,V,T):-
	Skeleton == {	identifier:Id,
			left_arm:{tip:RightHand|_},
			time:T|_},
	a_moving_joint(RightHand,Point,V).
--
a_moving_joint(Joint,Point,V2):-
	Joint == {
		status:'TRACKED',
		position:{point:Point,velocity:p(Vx,Vy,Vz)|_}
		|_},
	V2== ?velocity(Vx,Vy,Vz),
	V2 >= 0.1.
-----------------------------------------------------------------------
is_near_a_head_of_a_person(Skeletons,Past,Id1,Side1,P1,V1,T1):-
	select_the_head_of_a_person(Skeletons,Id1,P1,V1,Id2),
	check_the_head_of_the_person(Past,Id1,Side1,Id2,T1,T2),
	Duration== ?duration(T2,T1),
	Duration > 0.01,!.
is_near_a_head_of_a_person([_|Rest],Past,Id,Side,Point,V,T):-
	is_near_a_head_of_a_person(Rest,Past,Id,Side,Point,V,T).
--
select_the_head_of_a_person([Skeleton|_],Id1,Point1,Velocity1,Id2):-
	Skeleton == {	identifier:Id2,
			head:{	status:'TRACKED',
				position:{point:Point2|_}|_}
			|_},
	Id1 <> Id2,
	is_fast_and_near(Point1,Velocity1,Point2),!.
select_the_head_of_a_person([_|Rest],Id1,Point1,Velocity1,Id2):-
	select_the_head_of_a_person(Rest,Id1,Point1,Velocity1,Id2).
--
check_the_head_of_the_person([Frame|Past],Id1,Side1,Id2,_,T2):-
	Frame == {time:T1,skeletons:Skeletons|_},
	get_hand(Id1,Side1,Skeletons,Point1,Velocity1),
	get_head(Id2,Skeletons,Point2),
	is_fast_and_near(Point1,Velocity1,Point2),!,
	check_the_head_of_the_person(Past,Id1,Side1,Id2,T1,T2).
check_the_head_of_the_person(_,_,_,_,Time,Time).
--
is_fast_and_near(p(X1,Y1,Z1),Velocity1,p(X2,Y2,Z2)):-
	Delta== ?distance(X1-X2,Y1-Y2,Z1-Z2),
	MD== 1 - ?fuzzy_metrics(Delta,0.30,0.05),
	MV== ?fuzzy_metrics(Velocity1,4.0,1.0),
	MD * MV >= 0.25.
-----------------------------------------------------------------------
is_near_a_hand_of_a_person(Skeletons,Past,Id1,Side1,P1,T1):-
	select_a_hand_of_a_person(Skeletons,Id1,P1,Id2,Side2),
	check_the_hand_of_the_person(Past,Id1,Side1,Id2,Side2,T1,T2),
	Duration== ?duration(T2,T1),
	Duration > 0.30,!.
is_near_a_hand_of_a_person([_|Rest],Past,Id,Side,Point,T):-
	is_near_a_hand_of_a_person(Rest,Past,Id,Side,Point,T).
--
select_a_hand_of_a_person([Skeleton|_],Id1,Point1,Id2,'Right'):-
	Skeleton == {	identifier:Id2,
			right_arm:{
				tip:{	status:'TRACKED',
					position:{point:Point2|_}|_}
				|_}
			|_},
	Id1 <> Id2,
	is_near(Point1,Point2),!.
select_a_hand_of_a_person([Skeleton|_],Id1,Point1,Id2,'Left'):-
	Skeleton == {	identifier:Id2,
			left_arm:{
				tip:{	status:'TRACKED',
					position:{point:Point2|_}|_}
				|_}
			|_},
	Id1 <> Id2,
	is_near(Point1,Point2),!.
select_a_hand_of_a_person([_|Rest],Id1,Point1,Id2,Side2):-
	select_a_hand_of_a_person(Rest,Id1,Point1,Id2,Side2).
--
check_the_hand_of_the_person([Frame|Past],Id1,Side1,Id2,Side2,_,T2):-
	Frame == {time:T1,skeletons:Skeletons|_},
	get_hand(Id1,Side1,Skeletons,Point1,_),
	get_hand(Id2,Side2,Skeletons,Point2,_),
	is_near(Point1,Point2),!,
	check_the_hand_of_the_person(Past,Id1,Side1,Id2,Side2,T1,T2).
check_the_hand_of_the_person(_,_,_,_,_,Time,Time).
--
is_near(p(X1,Y1,Z1),p(X2,Y2,Z2)):-
	Delta== ?distance(X1-X2,Y1-Y2,Z1-Z2),
	Delta < 0.10.
-----------------------------------------------------------------------
get_hand(Id,Side,[Skeleton|_],Point,Velocity):-
	Skeleton == {identifier:Id|_},!,
	get_hand(Skeleton,Side,Point,Velocity).
get_hand(Id,Side,[_|Rest],Point,Velocity):-
	get_hand(Id,Side,Rest,Point,Velocity).
--
get_hand(Skeleton,'Right',Point,Velocity):-!,
	Skeleton == {	right_arm:{
				tip:{	status:'TRACKED',
					position:{
						point:Point,
						velocity:p(Vx,Vy,Vz)|_}
					|_}
				|_}
			|_},
	Velocity== ?velocity(Vx,Vy,Vz).
get_hand(Skeleton,'Left',Point,Velocity):-
	Skeleton == {	left_arm:{
				tip:{	status:'TRACKED',
					position:{
						point:Point,
						velocity:p(Vx,Vy,Vz)|_}
					|_}
				|_}
			|_},
	Velocity== ?velocity(Vx,Vy,Vz).
--
get_head(Id,[Skeleton|_],Point):-
	Skeleton == {identifier:Id|_},!,
	Skeleton == {head:{
			status:'TRACKED',
			position:{point:Point|_}|_}
			|_}.
get_head(Id,[_|Rest],Point):-
	get_head(Id,Rest,Point).
--
distance(Dx,Dy,Dz) = ?sqrt(?power(Dx,2)+?power(Dy,2)+?power(Dz,2)).
--
velocity(Vx,Vy,Vz) = V :-
	V== ?sqrt(?power(Vx,2)+?power(Vy,2)+?power(Vz,2)).
--
duration(T1,T2) = (T2 - T1) / 1000.
--
fuzzy_metrics(X,T,H) = 1.0 :-
     X >= T + H,!.
fuzzy_metrics(X,T,H) = 0.0 :-
     X <= T - H,!.
fuzzy_metrics(X,T,H) = V :-
     V== (X-T+H) * (1 / (2*H)).
]
-----------------------------------------------------------------------
class 'DataRecorder' (specialized 'KinectBuffer'):
--
constant:
--
	operating_mode	= 'RECORDING';
--
	write_buffer_size	= 50;
--
internal:
--
	con	= ('Console',
			x=15,
			y=5,
			width=50,
			height=10);
--
[
buffer_overflow:-!,
	con ? set_color('White','Red'),
	con ? writeln("Buffer overflow!"),
	con ? set_color('default').
--
buffer_deallocation:-!,
	con ? set_color('White','DkGreen'),
	con ? writeln("Buffer restored."),
	con ? set_color('default').
]
-----------------------------------------------------------------------
class 'DirectoryName' (specialized 'Database'):
[
]
-----------------------------------------------------------------------
class 'Switch' (specialized 'Database'):
[
assign(Mode):-
	retract_all,
	insert(Mode).
--
is_true:-
	find('yes'),!.
]
-----------------------------------------------------------------------
class 'FrameSizeRatio' (specialized 'Database'):
[
assign(Ratio):-
	retract_all,
	insert(Ratio).
--
is_current_ratio(Ratio):-
	find(Ratio),!.
]
-----------------------------------------------------------------------
class 'KinectErrorHandler' (specialized 'Trap'):
--
internal:
--
world;
handler		= self;
--
con		= ('Console');
--
[
alarm(ExceptionName,_,_*):-
	con ? error("I cannot start the Kinect decice:",ExceptionName).
]
-----------------------------------------------------------------------
class 'FileOperationErrorHandler' (specialized 'Trap'):
--
internal:
--
world;
handler		= self;
--
con		= ('Console');
--
[
alarm(ExceptionName,Operation,_*):-
	Text== con?format(
		"\n\nOperation: %s\n\nError: %s\n\n",
		Operation,ExceptionName),
	con ? error("I cannot implement file operation",Text).
]
-----------------------------------------------------------------------
