-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2019 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import 'MultimediaBuffer' from "morozov/VideoBuffer";
import .. from "morozov/Kinect";
import .. from "morozov/Astrohn";
import .. from "morozov/TEV1";
import .. from "morozov/Webcam";
import .. from "morozov/ColorMap";
import .. from "morozov/Vision";
-----------------------------------------------------------------------
project: (('MultichannelViewer'))
-----------------------------------------------------------------------
class 'MultichannelViewer' (specialized 'Dialog'):
--
internal:
--
	buffer		= ('MultimediaControl',
				name=temporary_file_name,
				viewer=self);
	--
	kinect		= ('KinectCameraControl',
				graphics_window=main_window,
				vpm,
				viewer=self);
	astrohn		= ('AstrohnCameraControl',
				graphics_window=main_window,
				vpm,
				viewer=self);
	tev1		= ('ThermalCameraControl',
				graphics_window=main_window,
				vpm,
				viewer=self);
	webcam		= ('WebcamControl',
				graphics_window=main_window,
				vpm,
				viewer=self);
	--
	main_window	= ('Canvas2D',
				background_color='Black');
	--
	buffered_image	= ('BufferedImage');
	--
	vpm		= ('VideoProcessingMachine',
				minimal_training_interval= -1,
				horizontal_blob_border= 3,
				vertical_blob_border= 3,
				minimal_blob_intersection_area= 1,
				minimal_blob_size= 1);
	--
	trajectory	= ('Trajectory',
				graphics_window=main_window);
	--
	directory_name		= ('DirectoryName');
	file_operations		= ('File');
	text_operations		= ('Text');
	timer_operations	= ('Timer');
	color_maps		= ('ColorMap');
	con			= ('Console');
--
constant:
--
	--
	temporary_file_name	= "viewer.ap2j";
	is_top_level_window	= 'yes';
	exit_on_close		= 'yes';
	--
	export_encoding_attributes = {
		format:'default',
		compressionQuality:0.95,
		progressiveMode:'on',
		interlacing:'on',
		comment:"The Actor Prolog project"
		};
	--
	dlg_ctrl_edittext_description		= 1011;
	dlg_ctrl_edittext_copyright		= 1012;
	dlg_ctrl_edittext_registration_date	= 1013;
	dlg_ctrl_edittext_registration_time	= 1014;
	--
	dlg_ctrl_listbutton_video_data_mode	= 1015;
	dlg_ctrl_listbutton_color_map		= 1016;
	--
	dlg_ctrl_scrollbar_frame_number_range	= 8011;
	dlg_ctrl_scrollbar_frame_number_value	= 8012;
	--
	dlg_ctrl_togglebutton_play		= 9013;
	dlg_ctrl_togglebutton_pause		= 9014;
	dlg_ctrl_togglebutton_export		= 9018;
--
variable:
--
	minimal_hue;
	maximal_hue;
	minimal_saturation;
	maximal_saturation;
	minimal_brightness;
	maximal_brightness;
--
[
goal:-!,
	set_control_background_color('main_window','Black'),
	maximize,
	-- show,
	load_temporary_file_if_possible,
	update_video_data_mode.
-----------------------------------------------------------------------
action("Choose"):-
	FileName== con?input_file_name(
		"Please select data file",
		"*.ap2j",
		[
		"*.ap2j","Video data",
		"*.*","All Files"
		]),
	buffer ? stop,!,
	choose_and_play_file(FileName),
	switch_controls.
action("Stop"):-!,
	put(dlg_ctrl_togglebutton_pause,'no'),
	stop_data_reading_and_writing,
	switch_controls.
action("Photo"):-!,
	FileName== ?create_new_file_name(),
	take_photo(FileName).
action("SaveTrajectory"):-!,
	VideoDataSource== ?cast("STRING",
		?get(dlg_ctrl_listbutton_video_data_mode)),
	trajectory ? write_table(VideoDataSource).
--
modified_control(dlg_ctrl_togglebutton_play):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_play)),!,
	set_Play_mode(Mode),
	switch_controls.
modified_control(dlg_ctrl_togglebutton_pause):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_pause)),!,
	set_Pause_mode(Mode),
	switch_controls.
modified_control(dlg_ctrl_togglebutton_export):-
	Mode== ?val("YesNo",?get(dlg_ctrl_togglebutton_export)),!,
	set_Export_mode(Mode),
	switch_controls.
modified_control(dlg_ctrl_scrollbar_frame_number_value):-!,
	scroll_video.
modified_control(dlg_ctrl_listbutton_video_data_mode):-!,
	update_video_data_mode.
modified_control(_):-!,
	update_mode_and_switch_controls.
-----------------------------------------------------------------------
set_Play_mode('yes'):-
	playing_is_suspended,!,
	put(dlg_ctrl_togglebutton_pause,'no'),
	buffer ? start,
	switch_controls.
set_Play_mode('yes'):-
	stop_all_devices,
	trajectory ? retract_all,
	buffer ? set_operating_mode('READING'),
	put(dlg_ctrl_togglebutton_pause,'no'),
	start_reading,
	switch_controls.
set_Play_mode('no'):-
	stop_data_reading_and_writing.
--
set_Pause_mode('yes'):-!,
	buffer ? pause,
	put(dlg_ctrl_togglebutton_play,'no'),
	switch_controls.
set_Pause_mode('no'):-
	buffer ? is_open,!,
	buffer ? start,
	switch_controls.
set_Pause_mode(_).
--
set_Export_mode('yes'):-
	buffer ? check_file_name,
	FN1== buffer?get_name(),
	file_operations ? extract_extension(FN1,FN2,_),
	directory_name ? create_directory_if_necessary(FN2),!,
	set_Export_mode_YES(FN2).
set_Export_mode('no'):-!,
	buffer ? stop,
	switch_controls.
set_Export_mode(_).
--
set_Export_mode_YES(InitialName):-
	Directory== con?input_directory_name(
		"Please select output directory",
		InitialName),
	directory_name ? create_directory_if_necessary(Directory),!,
	directory_name ? remember_name(Directory),
	stop_all_devices,
	buffer ? set_operating_mode('READING'),
	buffer ? read_all_frames,
	stop_all_devices,
	reset_all_counters,
	put(dlg_ctrl_togglebutton_pause,'no'),
	buffer ? start,
	switch_controls.
set_Export_mode_YES(InitialName):-
	file_operations ? delete(InitialName),
	put(dlg_ctrl_togglebutton_export,'no'),
	buffer ? stop,
	switch_controls.
-----------------------------------------------------------------------
display_components(OperatingMode,FrameNumber):-
	VideoDataSource== ?cast("STRING",
		?get(dlg_ctrl_listbutton_video_data_mode)),
	display_components(VideoDataSource,OperatingMode,FrameNumber),
	fail.
display_components(_,_):-
	buffer ? is_control_frame,!,
	buffer ? start,
	switch_controls.
display_components(_,_).
--
display_components("Astrohn THz Camera",OperatingMode,FrameNumber):-
	buffer ? has_component("THZ"),
	buffer ? retrieve_frame("THZ",astrohn),
	astrohn ? display_frame(
		OperatingMode,number(FrameNumber),"Terahertz Image"),
	fail.
display_components("Astrohn IP Camera",OperatingMode,FrameNumber):-
	buffer ? has_component("THZ"),
	buffer ? retrieve_frame("THZ",astrohn),
	astrohn ? display_frame(
		OperatingMode,number(FrameNumber),"Color Image"),
	fail.
display_components("Thermal Camera",OperatingMode,FrameNumber):-
	buffer ? has_component("TEV1"),
	buffer ? retrieve_frame("TEV1",tev1),
	tev1 ? display_frame(OperatingMode,number(FrameNumber)),
	fail.
display_components("Kinect Point Clouds",OperatingMode,FrameNumber):-
	buffer ? has_component("KINECT2"),
	buffer ? retrieve_frame("KINECT2",kinect),
	kinect ? display_frame(
		OperatingMode,number(FrameNumber),"Point Clouds"),
	fail.
display_components("Kinect Skeletons",OperatingMode,FrameNumber):-
	buffer ? has_component("KINECT2"),
	buffer ? retrieve_frame("KINECT2",kinect),
	kinect ? display_frame(
		OperatingMode,number(FrameNumber),"Skeletons"),
	fail.
display_components("Webcam",OperatingMode,FrameNumber):-
	buffer ? has_component("WEBCAM"),
	buffer ? retrieve_frame("WEBCAM",webcam),
	webcam ? display_frame(OperatingMode,number(FrameNumber)),
	fail.
display_components(_,_,_).
--
complete_data_transfer:-
	stop_data_reading_and_writing,
	switch_controls.
--
export_frame_if_necessary('READING',name(ShortName),Suffix,Image):-
	directory_name ? find(Directory),
	FileName== text_operations?format(
		"%s/%s%s.png",Directory,ShortName,Suffix),
	Image ? save(FileName,export_encoding_attributes),!.
export_frame_if_necessary('READING',number(FrameNumber),Suffix,Image):-
	buffer_is_exporting,
	directory_name ? find(Directory),
	FileName== text_operations?format(
		"%s/%07d%s.png",Directory,FrameNumber,Suffix),
	Image ? save(FileName,export_encoding_attributes),!.
export_frame_if_necessary(_,_,_,_).
--
take_photo(_):-
	directory_name ? remember_name(
		directory_name?get_current_directory()),
	fail.
take_photo(FileName):-
	VideoDataSource== ?cast("STRING",
		?get(dlg_ctrl_listbutton_video_data_mode)),
	take_photo(VideoDataSource,FileName),
	fail.
take_photo(_).
--
take_photo("Astrohn THz Camera",FileName):-
	astrohn ? display_frame(
		'READING',name(FileName),"Terahertz Image"),
	fail.
take_photo("Astrohn IP Camera",FileName):-
	astrohn ? display_frame(
		'READING',name(FileName),"Color Image"),
	fail.
take_photo("Thermal Camera",FileName):-
	tev1 ? display_frame('READING',name(FileName)),
	fail.
take_photo("Kinect Point Clouds",FileName):-
	kinect ? display_frame(
		'READING',name(FileName),"Point Clouds"),
	fail.
take_photo("Kinect Skeletons",FileName):-
	kinect ? display_frame(
		'READING',name(FileName),"Skeletons"),
	fail.
take_photo("Webcam",FileName):-
	webcam ? display_frame('READING',name(FileName)),
	fail.
take_photo(_,_).
-----------------------------------------------------------------------
stop_data_reading_and_writing:-
	buffer ? stop,
	put(dlg_ctrl_togglebutton_play,'no'),
	put(dlg_ctrl_togglebutton_export,'no').
--
stop_all_devices:-
	buffer ? stop,
	kinect ? stop,
	astrohn ? stop,
	tev1 ? stop,
	webcam ? stop.
--
reset_all_counters:-
	buffer ? reset_all_counters,
	kinect ? reset_all_counters,
	astrohn ? reset_all_counters,
	tev1 ? reset_all_counters,
	webcam ? reset_all_counters.
--
load_temporary_file_if_possible:-
	buffer ? does_exist,!,
	buffer ? set_operating_mode('READING'),
	buffer ? read_only_the_first_frame,
	start_reading,
	switch_controls.
load_temporary_file_if_possible.
--
choose_and_play_file(FileName):-
	stop_data_reading_and_writing,
	choose_file(FileName),
	fail.
choose_and_play_file(_):-
	-- buffer ? read_only_the_first_frame,
	buffer ? read_all_frames,
	-- buffer ? set_operating_mode('READING'),
	put(dlg_ctrl_togglebutton_play,'yes'),
	set_Play_mode('yes').
--
choose_file(FileName):-
	buffer ? set_name(FileName),
	update_dialog_title(FileName).
--
update_dialog_title(""):-!,
	put('title',"Multichannel Viewer").
update_dialog_title(FileName):-
	put('title',"Multichannel Viewer ["+FileName+"]").
--
start_reading:-
	buffer ? check_file_name,!,
	switch_controls,
	park_scroll_control,
	stop_all_devices,
	reset_all_counters,
	buffer ? start.
start_reading.
--
park_scroll_control:-
	Range== ?val("I_List",
		?get(dlg_ctrl_scrollbar_frame_number_range)),
	Range == [_,Right],!,
	put(dlg_ctrl_scrollbar_frame_number_value,Right).
park_scroll_control.
--
set_read_buffer_size(Size):-
	put(dlg_ctrl_scrollbar_frame_number_range,[1,Size]).
--
redraw_recent_frame:-
	buffer ? frame_obtained.
--
scroll_video:-
	FN== ?cast("INTEGER",
			?get(dlg_ctrl_scrollbar_frame_number_value)),!,
	buffer ? request_buffered_frame(FN),!.
scroll_video.
-----------------------------------------------------------------------
update_mode_and_switch_controls:-
	update_displaying_mode,
	update_vpm_mode,
	switch_controls,
	redraw_recent_frame.
--
update_displaying_mode:-
	TCM== ?val("STRING",?get(dlg_ctrl_listbutton_color_map)),!,
	ColorMap== color_maps?string_to_color_map_name(TCM),
	astrohn ? set_main_color_map(ColorMap),
	tev1 ? set_main_color_map(ColorMap).
update_displaying_mode.
--
update_video_data_mode:-
	Mode== ?val("STRING",
		?get(dlg_ctrl_listbutton_video_data_mode)),
	update_video_data_mode(Mode),
	fail.
update_video_data_mode:-
	vpm ? reset_all,
	trajectory ? retract_all,
	update_mode_and_switch_controls.
--
update_video_data_mode("Astrohn THz Camera"):-!,
	put('minimal_hue',0),
	put('maximal_hue',255),
	put('minimal_saturation',0),
	put('maximal_saturation',255),
	put('minimal_brightness',250),
	put('maximal_brightness',255).
update_video_data_mode("Astrohn IP Camera"):-!,
	put('minimal_hue',228),
	put('maximal_hue',255),
	put('minimal_saturation',50),
	put('maximal_saturation',255),
	put('minimal_brightness',70), -- 100
	put('maximal_brightness',255).
update_video_data_mode("Thermal Camera"):-!,
	put('minimal_hue',0),
	put('maximal_hue',255),
	put('minimal_saturation',0),
	put('maximal_saturation',255),
	put('minimal_brightness',190),
	put('maximal_brightness',255).
update_video_data_mode("Kinect Point Clouds"):-!,
	put('minimal_hue',215),
	put('maximal_hue',250),
	put('minimal_saturation',40),
	put('maximal_saturation',255),
	put('minimal_brightness',0),
	put('maximal_brightness',255).
update_video_data_mode("Kinect Skeletons"):-!,
	put('minimal_hue',0),
	put('maximal_hue',255),
	put('minimal_saturation',0),
	put('maximal_saturation',255),
	put('minimal_brightness',0),
	put('maximal_brightness',255).
update_video_data_mode("Webcam"):-!,
	put('minimal_hue',228),
	put('maximal_hue',245),
	put('minimal_saturation',50),
	put('maximal_saturation',255),
	put('minimal_brightness',100),
	put('maximal_brightness',255).
update_video_data_mode(_).
--
update_vpm_mode:-
	Mode== ?val("STRING",
		?get(dlg_ctrl_listbutton_video_data_mode)),
	update_vpm_mode(Mode),
	fail.
update_vpm_mode.
--
update_vpm_mode(Mode):-
	MinimalHue== ?val("INTEGER",?get('minimal_hue')),
	MaximalHue== ?val("INTEGER",?get('maximal_hue')),
	MinimalSaturation==
		?val("INTEGER",?get('minimal_saturation')),
	MaximalSaturation==
		?val("INTEGER",?get('maximal_saturation')),
	MinimalBrightness==
		?val("INTEGER",?get('minimal_brightness')),
	MaximalBrightness==
		?val("INTEGER",?get('maximal_brightness')),!,
	vpm ? suspend_processing,
	vpm ? retract_all_instructions,
	-- vpm ? img_resize_image(320,-1),
	select_polygon(Mode),
	vpm ? msk_select_foreground(
		'HUE',MinimalHue,MaximalHue),
	vpm ? msk_select_foreground(
		'SATURATION',MinimalSaturation,MaximalSaturation),
	vpm ? msk_select_foreground(
		'BRIGHTNESS',MinimalBrightness,MaximalBrightness),
	-- vpm ? msk_erode_foreground(7),
	-- vpm ? msk_dilate_foreground(7),
	vpm ? blb_extract_blobs('POINT','TWO_PASS_BLOB_EXTRACTION'),
	vpm ? blb_fill_blobs,
	vpm ? blb_select_superior_blob('FOREGROUND_AREA'),
	vpm ? pxl_select_image_channel('ALL'),
	vpm ? process_now.
update_vpm_mode(_).
--
select_polygon("Astrohn THz Camera"):-!,
	vpm ? blb_set_minimal_blob_size(1000).
select_polygon(_):-
	L== [p(0.25,0.1),p(0.75,0.1),p(0.75,0.9),p(0.25,0.9)],
	vpm ? msk_select_polygon(L,'yes'),
	vpm ? blb_set_minimal_blob_size(300).
-----------------------------------------------------------------------
switch_controls:-
	switch_button_Choose,
	switch_button_Play,
	switch_button_Pause,
	switch_button_Stop,
	switch_button_Export,
	switch_text_area_Description.
--
switch_button_Choose:-
	buffer_is_exporting,!,
	disable("Choose").
switch_button_Choose:-
	enable("Choose").
--
switch_button_Play:-
	buffer_is_playing,!,
	enable(dlg_ctrl_togglebutton_play),
	set_control_text_color(dlg_ctrl_togglebutton_play,'DkGreen').
switch_button_Play:-
	buffer_is_exporting,!,
	disable(dlg_ctrl_togglebutton_play),
	set_control_text_color(dlg_ctrl_togglebutton_play,'default').
switch_button_Play:-
	buffer ? does_exist,!,
	enable(dlg_ctrl_togglebutton_play),
	set_control_text_color(dlg_ctrl_togglebutton_play,'default').
switch_button_Play:-
	disable(dlg_ctrl_togglebutton_play),
	set_control_text_color(dlg_ctrl_togglebutton_play,'default'),
	put(dlg_ctrl_togglebutton_play,'no').
--
switch_button_Pause:-
	buffer_is_playing,!,
	enable(dlg_ctrl_togglebutton_pause),
	set_control_text_color(dlg_ctrl_togglebutton_pause,'default').
switch_button_Pause:-
	disable(dlg_ctrl_togglebutton_pause),
	set_control_text_color(dlg_ctrl_togglebutton_pause,'default').
--
switch_button_Stop:-
	buffer ? is_open,!,
	enable("Stop"),
	set_control_text_color("Stop",'default').
switch_button_Stop:-
	disable("Stop"),
	set_control_text_color("Stop",'default').
--
switch_button_Export:-
	buffer ? is_open,!,
	disable(dlg_ctrl_togglebutton_export),
	set_control_text_color(
		dlg_ctrl_togglebutton_export,'default').
switch_button_Export:-
	buffer ? does_exist,!,
	enable(dlg_ctrl_togglebutton_export),
	set_control_text_color(
		dlg_ctrl_togglebutton_export,'default').
switch_button_Export:-
	disable(dlg_ctrl_togglebutton_export),
	set_control_text_color(
		dlg_ctrl_togglebutton_export,'default').
--
switch_text_area_Description:-
	buffer ? get_delivered_description(Description),
	buffer ? get_delivered_copyright(Copyright),
	buffer ? get_delivered_registration_date(Date),
	buffer ? get_delivered_registration_time(Time),
	put(dlg_ctrl_edittext_description,Description),
	put(dlg_ctrl_edittext_copyright,Copyright),
	put(dlg_ctrl_edittext_registration_date,Date),
	put(dlg_ctrl_edittext_registration_time,Time).
-----------------------------------------------------------------------
buffer_is_playing:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'READING'.
--
playing_is_suspended:-
	buffer ? is_open,
	is_ON(dlg_ctrl_togglebutton_pause).
--
buffer_is_exporting:-
	buffer ? is_open,
	is_ON(dlg_ctrl_togglebutton_export).
--
is_ON(DialogFieldName):-
	Value== ?val("YesNo",?get(DialogFieldName)),
	Value == 'yes'.
--
create_new_file_name() = FileName :-
	timer_operations ? date(Year,Month,Day),
	timer_operations ? time(Hour,Minute,Second),
	FileName== text_operations?format(
		"%04d-%02d-%02d-%02d-%02d-%02d",
		Year,Month,Day,
		Hour,Minute,Second).
-----------------------------------------------------------------------
resize_main_window(IW,IH):-
	IW > 0,
	IH > 0,!,
	main_window ? refine_width(IW/IH).
resize_main_window(_,_).
--
indicate_blob([Blob|_],IW,IH):-
	Blob == {	x:X0,y:Y0,width:W1,height:H1,
			centroid_x:Xc,centroid_y:Yc|_},
	main_window ? set_pen({color:'Emerald',lineWidth:3}),
	X2== (X0 - W1 / 2) / IW,
	Y2== (Y0 - H1 / 2) / IH,
	W2== W1 / IW,
	H2== H1 / IH,
	main_window ? draw_rectangle(X2,Y2,W2,H2),
	store_blob(Xc,Yc,IW,IH),
	fail.
indicate_blob(_,_,_).
--
indicate_blob(Xc,Yc,IW,IH):-
	main_window ? set_pen({color:'Magenta',lineWidth:3}),
	Width== 5,
	Height== 5,
	X2== (Xc - Width / 2) / IW,
	Y2== (Yc - Height / 2) / IH,
	W2== Width / IW,
	H2== Height / IH,
	main_window ? draw_rectangle(X2,Y2,W2,H2),
	store_blob(Xc,Yc,IW,IH),
	fail.
indicate_blob(_,_,_,_).
--
store_blob(Xc,Yc,IW,IH):-
	buffer ? get_recent_frame_number(FN),
	buffer ? get_recent_frame_relative_time(Time),
	trajectory ? append_point(Xc,Yc,IW,IH,FN,Time),
	trajectory ? draw('Yellow').
]
-----------------------------------------------------------------------
class 'MultimediaControl' (specialized 'MultimediaBuffer'):
--
constant:
--
	operating_mode		= 'READING';
--
internal:
--
	viewer;
--
	stop_after_the_first_frame	= ('Switch');
	file_operation_error_handler	= ('FileOperationErrorHandler',
						world=self);
	file_operations			= ('File');
	text_operations			= ('Text');
	con				= ('Console');
--
constant:
--
	read_buffer_size		= 30;
	slow_motion_coefficient		= -1;
--
[
goal:-!,
	viewer ? set_read_buffer_size(read_buffer_size).
--
frame_obtained:-
	commit,!,
	Mode== ?get_operating_mode(),
	get_recent_frame_number(FrameNumber),
	viewer ? display_components(Mode,FrameNumber),
	control_export(Mode).
--
data_transfer_completion:-!,
	viewer ? complete_data_transfer.
--
data_transfer_error(ErrorName):-!,
	viewer ? complete_data_transfer,
	con ? error("Data Transfer Error",ErrorName).
--
buffer_overflow:-!,
	con ? set_color('White','Red'),
	con ? writeln("Buffer overflow!"),
	con ? set_color('default').
--
buffer_deallocation:-!,
	con ? set_color('White','DkGreen'),
	con ? writeln("Buffer restored."),
	con ? set_color('default').
-----------------------------------------------------------------------
check_file_name:-
	does_exist,!.
check_file_name:-
	FileName== ?get_name(),
	con ? error(
		"Illegal File name",
		text_operations?format(
			"The '%s' file does not exist.",FileName)),
	fail.
--
rename_temporary_file(TargetFileName):-
	file_operation_error_handler ? delete(TargetFileName),
	file_operation_error_handler ? rename(TargetFileName).
--
list_directory(Mask) = file_operations?list_directory(Mask).
--
make_directory(DirectoryName):-
	file_operations ? make_directory(DirectoryName).
-----------------------------------------------------------------------
read_all_frames:-
	stop_after_the_first_frame ? assign('no').
--
read_only_the_first_frame:-
	stop_after_the_first_frame ? assign('yes').
--
control_export('READING'):-
	has_component("SETTINGS"),!,
	continue_reading_if_necessary.
control_export('READING'):-
	stop_after_the_first_frame ? is_true,!,
	stop,
	viewer ? switch_controls.
control_export('READING'):-!,
	continue_reading_if_necessary.
control_export(_).
--
continue_reading_if_necessary:-
	eof,!.
continue_reading_if_necessary:-
	viewer ? playing_is_suspended,!.
continue_reading_if_necessary:-
	start,
	viewer ? switch_controls.
]
-----------------------------------------------------------------------
class 'AstrohnCameraControl' (specialized 'Astrohn'):
--
constant:
--
	name;
--
	operating_mode		= 'LISTENING';
	read_buffer_size	= 25;
--
internal:
--
	graphics_window;
	vpm;
	viewer;
--
	time_reporter		= ('TimeReporter',
					graphics_window);
	image			= ('BufferedImage');
	timer			= ('Timer');
	con			= ('Console');
--
[
display_frame(_,time(TimeShift),_):-
	retrieve_timed_frame(TimeShift),
	fail.
display_frame(EM,EFN,FrameType):-
	is_committed,
	get_image(FrameType,IW,IH,FN,FT,FrameRate),
	-- FN > 0,
	vpm ? process_realtime_frame(image),
	vpm ? commit,
	vpm ? get_foreground_image(image),
	vpm ? get_blobs(BlobList),
	viewer ? resize_main_window(IW,IH),
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	graphics_window ? draw_image(image,0,0,1,1),
	viewer ? indicate_blob(BlobList,IW,IH),
	time_reporter ? report_time(FN,FT,FrameRate),
	time_reporter ? report_copyright,
	viewer ? resize_main_window(IW,IH),
	graphics_window ? draw_now,
	viewer ? export_frame_if_necessary(EM,EFN,"-THz",image).
--
get_image("Terahertz Image",IW,IH,Number,Time,FrameRate):-!,
	get_recent_terahertz_image(image),
	get_terahertz_image_size_in_pixels(IW,IH),
	get_recent_terahertz_frame_number(Number),
	get_recent_terahertz_frame_time(Time),
	get_recent_terahertz_frame_rate(FrameRate).
get_image("Color Image",IW,IH,Number,Time,FrameRate):-!,
	get_recent_color_image(image),
	get_color_image_size_in_pixels(IW,IH),
	get_recent_color_frame_number(Number),
	get_recent_color_frame_time(Time),
	get_recent_color_frame_rate(FrameRate).
get_image(_,IW,IH,Number,Time,FrameRate):-
	get_recent_combined_image(image),
	get_color_image_size_in_pixels(IW,IH),
	get_recent_terahertz_frame_number(Number),
	get_recent_terahertz_frame_time(Time),
	get_recent_terahertz_frame_rate(FrameRate).
]
-----------------------------------------------------------------------
class 'ThermalCameraControl' (specialized 'TEV1'):
--
constant:
--
	name;
--
	operating_mode			= 'LISTENING';
	read_buffer_size		= 15;
	output_debug_information	= 2;
--
internal:
--
	graphics_window;
	vpm;
	viewer;
--
	time_reporter		= ('TimeReporter',
					graphics_window);
	image			= ('BufferedImage');
	timer			= ('Timer');
	con			= ('Console');
--
[
display_frame(_,time(TimeShift)):-
	retrieve_timed_frame(TimeShift),
	fail.
display_frame(EM,EFN):-
	is_committed,
	get_recent_frame_number(FrameNumber),
	get_recent_frame_time(FrameTime),
	get_recent_frame_rate(FrameRate),
	get_recent_image(image),
	vpm ? process_realtime_frame(image),
	vpm ? commit,
	vpm ? get_foreground_image(image),
	vpm ? get_blobs(BlobList),
	get_image_size_in_pixels(IW,IH),
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	graphics_window ? draw_image(image,0,0,1,1),
	viewer ? indicate_blob(BlobList,IW,IH),
	time_reporter ? report_time(FrameNumber,FrameTime,FrameRate),
	time_reporter ? report_copyright,
	viewer ? resize_main_window(IW,IH),
	graphics_window ? draw_now,
	viewer ? export_frame_if_necessary(EM,EFN,"-T",image).
]
-----------------------------------------------------------------------
class 'KinectCameraControl' (specialized 'KinectBuffer'):
--
constant:
--
	name;
--
	operating_mode		= 'LISTENING';
	read_buffer_size	= 25;
--
	target_frame_type	= 'POINT_CLOUDS';
	target_people_index	= 'ADAPTIVELY_EXTRACT_PEOPLE';
--
	circumscription_mode = [
			'TOTAL_RECTANGLES',
			'SKELETON_RECTANGLES',
			'TOTAL_PARALLELEPIPEDS',
			'SKELETON_PARALLELEPIPEDS'
			-- 'NONE'
			];
--
	skeletons_mode		= 'DETECT_SKELETONS';
--
	displaying_mode	= {
		frame_type:target_frame_type,
		people_index:target_people_index,
		circumscription:circumscription_mode,
		skeletons:skeletons_mode};
--
	color_map		= 'OPTICAL';
	people_colors		= ['Green'];
--
	file_name_suffix	= "-3D";
	ellipse_radius		= 10;
--
internal:
--
	graphics_window;
	vpm;
	viewer;
--
	time_reporter		= ('TimeReporter',
					graphics_window);
	image			= ('BufferedImage');
	timer			= ('Timer');
	con			= ('Console');
--
[
display_frame(_,time(TimeShift),_):-
	retrieve_timed_frame(TimeShift),
	fail.
display_frame(EM,EFN,"Point Clouds"):-
	is_committed,
	get_recent_frame_number(FrameNumber),
	get_recent_frame_time(FrameTime),
	get_recent_frame_rate(FrameRate),
	get_recent_image(image),
	vpm ? process_realtime_frame(image),
	vpm ? commit,
	vpm ? get_foreground_image(image),
	vpm ? get_blobs(BlobList),
	DisplayingMode== ?get_displaying_mode(),
	DisplayingMode == {
		frame_type:FrameType|_},
	get_image_size_in_pixels(FrameType,IW,IH),
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	graphics_window ? draw_image(image,0,0,1,1),
	viewer ? indicate_blob(BlobList,IW,IH),
	time_reporter ? report_time(FrameNumber,FrameTime,FrameRate),
	time_reporter ? report_copyright,
	viewer ? resize_main_window(IW,IH),
	graphics_window ? draw_now,
	viewer ? export_frame_if_necessary(
		EM,EFN,file_name_suffix,image).
display_frame(EM,EFN,"Skeletons"):-
	is_committed,
	get_recent_frame_number(FrameNumber),
	get_recent_frame_time(FrameTime),
	get_recent_frame_rate(FrameRate),
	DisplayingMode== ?get_displaying_mode(),
	DisplayingMode == {
		frame_type:FrameType|_},
	get_image_size_in_pixels(FrameType,IW,IH),
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	get_skeletons(Skeletons),
	draw_skeletons(IW,IH,Skeletons,FrameType),
	time_reporter ? report_time(FrameNumber,FrameTime,FrameRate),
	time_reporter ? report_copyright,
	viewer ? resize_main_window(IW,IH),
	graphics_window ? draw_now,
	viewer ? export_frame_if_necessary(
		EM,EFN,file_name_suffix,image).
--
get_image_size_in_pixels('COLOR',IW,IH):-!,
	get_color_image_size_in_pixels(IW,IH).
get_image_size_in_pixels(_,IW,IH):-
	get_depth_image_size_in_pixels(IW,IH).
-----------------------------------------------------------------------
draw_skeletons(IW,IH,[Skeleton|Rest],FrameType):-!,
	draw_skeleton(IW,IH,Skeleton,FrameType),
	draw_skeletons(IW,IH,Rest,FrameType).
draw_skeletons(_,_,_,_).
--
draw_skeleton(IW,IH,Skeleton,FrameType):-
	Skeleton == {
		head: Head,
		spine: Spine,
		left_arm: LeftArm,
		right_arm: RightArm,
		left_leg: LeftLeg,
		right_leg: RightLeg
		|_},
	draw_spine(IW,IH,Head,Spine,FrameType),
	draw_arm(IW,IH,Spine,LeftArm,FrameType,'no'),
	draw_arm(IW,IH,Spine,RightArm,FrameType,'yes'),
	draw_leg(IW,IH,Spine,LeftLeg,FrameType),
	draw_leg(IW,IH,Spine,RightLeg,FrameType),
	fail.
draw_skeleton(_,_,_,_).
--
draw_spine(IW,IH,Head,Spine,FrameType):-
	Spine == {
		neck: Neck,
		shoulder: Shoulder,
		mid: Mid,
		base: Base
		|_},!,
	draw_link(IW,IH,Head,Neck,FrameType),
	draw_link(IW,IH,Neck,Shoulder,FrameType),
	draw_link(IW,IH,Shoulder,Mid,FrameType),
	draw_link(IW,IH,Mid,Base,FrameType).
draw_spine(_,_,_,_,_).
--
draw_arm(IW,IH,Spine,Arm,FrameType,IndicateBlob):-
	Spine == {shoulder:SpineShoulder|_},
	Arm == {
		shoulder: ArmShoulder,
		elbow: Elbow,
		wrist: Wrist,
		hand: Hand
		|Rest},!,
	draw_link(IW,IH,SpineShoulder,ArmShoulder,FrameType),
	draw_link(IW,IH,ArmShoulder,Elbow,FrameType),
	draw_link(IW,IH,Elbow,Wrist,FrameType),
	draw_link(IW,IH,Wrist,Hand,FrameType),
	draw_hand(IW,IH,Wrist,Hand,Rest,FrameType,IndicateBlob).
draw_arm(IW,IH,Spine,Arm,FrameType,IndicateBlob):-
	Spine == {neck:Neck|_},
	Arm == {
		shoulder: ArmShoulder,
		elbow: Elbow,
		wrist: Wrist,
		hand: Hand
		|Rest},!,
	draw_link(IW,IH,Neck,ArmShoulder,FrameType),
	draw_link(IW,IH,ArmShoulder,Elbow,FrameType),
	draw_link(IW,IH,Elbow,Wrist,FrameType),
	draw_link(IW,IH,Wrist,Hand,FrameType),
	draw_hand(IW,IH,Wrist,Hand,Rest,FrameType,IndicateBlob).
draw_arm(_,_,_,_,_,_).
--
draw_hand(IW,IH,Wrist,Hand,Rest,FrameType,IndicateBlob):-
	Rest == {tip:Tip,thumb:Thumb|_},!,
	indicate_blob(IndicateBlob,IW,IH,Wrist,FrameType),
	draw_link(IW,IH,Wrist,Thumb,FrameType),
	draw_link(IW,IH,Hand,Tip,FrameType).
draw_hand(_,_,_,_,_,_,_).
--
indicate_blob('yes',IW,IH,Joint,'COLOR'):-
	Joint == {position:{mapping2:p(X,Y)|_}|_},!,
	viewer ? indicate_blob(X,Y,IW,IH).
indicate_blob('yes',IW,IH,Joint,_):-
	Joint == {position:{mapping1:p(X,Y)|_}|_},!,
	viewer ? indicate_blob(X,Y,IW,IH).
indicate_blob(_,_,_,_,_).
--
draw_leg(IW,IH,Spine,Leg,FrameType):-
	Spine == {base:Base|_},
	Leg == {
		hip: Hip,
		knee: Knee,
		ankle: Ankle,
		foot: Foot
		|_},!,
	draw_link(IW,IH,Base,Hip,FrameType),
	draw_link(IW,IH,Hip,Knee,FrameType),
	draw_link(IW,IH,Knee,Ankle,FrameType),
	draw_link(IW,IH,Ankle,Foot,FrameType).
draw_leg(_,_,_,_,_).
--
draw_link(IW,IH,Joint1,Joint2,FrameType):-
	FrameType == 'COLOR',
	Joint1 == {
		status:Status1,
		position:{mapping2:p(Joint1X1,Joint1Y1)|_}|_},
	Joint2 == {
		status:Status2,
		position:{mapping2:p(Joint2X1,Joint2Y1)|_}|_},!,
	select_line_width(Status1,Status2,LineWidth),
	graphics_window ? set_pen(
		{color:'DkGreen',lineWidth:LineWidth}),
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	Joint2X2== Joint2X1 / IW,
	Joint2Y2== Joint2Y1 / IH,
	graphics_window ? draw_line(
		Joint1X2,Joint1Y2,Joint2X2,Joint2Y2),
	draw_joint(IW,IH,Joint1,FrameType),
	draw_joint(IW,IH,Joint2,FrameType).
draw_link(IW,IH,Joint1,Joint2,_):-
	Joint1 == {
		status:Status1,
		position:{mapping1:p(Joint1X1,Joint1Y1)|_}|_},
	Joint2 == {
		status:Status2,
		position:{mapping1:p(Joint2X1,Joint2Y1)|_}|_},!,
	select_line_width(Status1,Status2,LineWidth),
	graphics_window ? set_pen(
		{color:'DkGreen',lineWidth:LineWidth}),
	Joint1X2== Joint1X1 / IW,
	Joint1Y2== Joint1Y1 / IH,
	Joint2X2== Joint2X1 / IW,
	Joint2Y2== Joint2Y1 / IH,
	graphics_window ? draw_line(
		Joint1X2,Joint1Y2,Joint2X2,Joint2Y2).
draw_link(_,_,_,_,_).
--
select_line_width('TRACKED','TRACKED',3):-!.
select_line_width(_,_,1).
--
select_line_width('TRACKED','TRACKED','TRACKED',3):-!.
select_line_width(_,_,_,1).
--
draw_joint(IW,IH,Joint,'COLOR'):-
	Joint == {position:{mapping2:p(X1,Y1)|_}|_},!,
	graphics_window ? set_brush('Orange'),
	graphics_window ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	X2== (X1 - ellipse_radius) / IW,
	Y2== (Y1 - ellipse_radius) / IH,
	W2== ellipse_radius*2 / IW,
	H2== ellipse_radius*2 / IH,
	graphics_window ? draw_ellipse(X2,Y2,W2,H2).
draw_joint(IW,IH,Joint,_):-
	Joint == {position:{mapping1:p(X1,Y1)|_}|_},!,
	graphics_window ? set_brush('Orange'),
	graphics_window ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	graphics_window ? set_text_alignment('CENTER','CENTER'),
	X2== (X1 - ellipse_radius) / IW,
	Y2== (Y1 - ellipse_radius) / IH,
	W2== ellipse_radius*2 / IW,
	H2== ellipse_radius*2 / IH,
	graphics_window ? draw_ellipse(X2,Y2,W2,H2).
draw_joint(_,_,_,_).
]
-----------------------------------------------------------------------
class 'WebcamControl' (specialized 'Webcam'):
--
constant:
--
	name;
--
	operating_mode		= 'LISTENING';
	read_buffer_size	= 25;
--
internal:
--
	graphics_window;
	vpm;
	viewer;
--
	time_reporter		= ('TimeReporter',
					graphics_window);
	image			= ('BufferedImage');
	timer			= ('Timer');
	con			= ('Console');
--
[
display_frame(_,time(TimeShift)):-
	retrieve_timed_frame(TimeShift),
	fail.
display_frame(EM,EFN):-
	is_committed,
	get_recent_frame_number(FrameNumber),
	get_recent_frame_time(FrameTime),
	get_recent_frame_rate(FrameRate),
	get_recent_image(image),
	vpm ? process_realtime_frame(image),
	vpm ? commit,
	vpm ? get_foreground_image(image),
	vpm ? get_blobs(BlobList),
	get_image_size_in_pixels(IW,IH),
	graphics_window ? suspend_redrawing,
	graphics_window ? clear,
	graphics_window ? draw_image(image,0,0,1,1),
	viewer ? indicate_blob(BlobList,IW,IH),
	time_reporter ? report_time(FrameNumber,FrameTime,FrameRate),
	time_reporter ? report_copyright,
	viewer ? resize_main_window(IW,IH),
	graphics_window ? draw_now,
	viewer ? export_frame_if_necessary(EM,EFN,"-W",image).
]
-----------------------------------------------------------------------
class 'WriteTimingControl' (specialized 'Timer'):
--
internal:
--
	viewer;
--
	con			= ('Console');
--
[
tick:-!,
	FT== ?milliseconds(),
	viewer ? accept_sub_frames("Internal Clock",FT).
]
-----------------------------------------------------------------------
class 'TimeReporter' (specialized 'Text'):
--
internal:
--
	graphics_window;
--
	timer_operations	= ('Timer');
--
[
report_time(_,_,_):-
	graphics_window ? set_rendering_mode({
		colorRendering:'QUALITY',
		antialiasing:'on',
		textAntialiasing:'on'
		}),
	fail.
report_time(FrameNumber,FrameTime,FrameRate):-
	report_time(FrameNumber,FrameTime,FrameRate,14).
--
report_time(_,_,_,FontSize):-
	graphics_window ? set_brush('Green'),
	graphics_window ? set_font({size:FontSize}),
	fail.
report_time(FrameNumber,FrameTime,_,_):-
	FrameNumber >= 0,
	Time== timer_operations?convert_to_time(FrameTime),
	Time == time(Hours,Minutes,Seconds,Milliseconds),
	graphics_window ? set_text_alignment('LEFT','TOP'),
	graphics_window ? draw_text(
		0.02, 0.02,
		?format("T: %02d:%02d:%02d.%03d; F: %d",
			Hours,Minutes,Seconds,Milliseconds,
			FrameNumber)),
	fail.
report_time(_,_,FrameRate,_):-
	FrameRate >= 0,
	graphics_window ? set_text_alignment('RIGHT','TOP'),
	graphics_window ? draw_text(
		0.95, 0.02,
		?format("FR: %2.1f",FrameRate)),
	fail.
report_time(_,_,_,_).
--
report_copyright:-
	report_copyright(14).
--
report_copyright(FontSize):-
	graphics_window ? set_font({
		name:'SANS_SERIF',
		weight:'WEIGHT_REGULAR',
		width:'WIDTH_EXTENDED',
		posture:'POSTURE_REGULAR',
		size:FontSize,
		tracking:'TRACKING_LOOSE',
		kerning:'on',
		foreground:'White'
		}),
	graphics_window ? set_text_alignment('LEFT','BOTTOM'),
	graphics_window ? draw_text(0.02,0.98,"www.fullvision.ru").
]
-----------------------------------------------------------------------
class 'DirectoryName' (specialized 'Database'):
--
internal:
--
	file_operation_error_handler	= ('FileOperationErrorHandler',
						world=self);
	file_operations			= ('File');
	text_operations			= ('Text');
--
[
remember_name(Directory):-
	retract_all,
	insert(Directory).
--
create_directory_if_necessary(Directory):-
	file_operation_error_handler ? does_exist(Directory),
	Mask== text_operations?format("%s/ *.png",Directory),
	List== file_operation_error_handler?list_directory(Mask),
	delete_files(List),
	fail.
create_directory_if_necessary(Directory):-
	file_operation_error_handler ? make_directory(Directory),!.
--
delete_files([FileName|Rest]):-
	file_operation_error_handler ? delete(FileName),!,
	delete_files(Rest).
delete_files([_|Rest]):-!,
	delete_files(Rest).
delete_files(_).
--
list_directory(Mask) = file_operations?list_directory(Mask).
--
make_directory(DirectoryName):-
	file_operations ? make_directory(DirectoryName).
]
-----------------------------------------------------------------------
class 'Switch' (specialized 'Database'):
[
assign(Mode):-
	retract_all,
	insert(Mode).
--
is_true:-
	find('yes'),!.
--
is_false:-
	is_true,!,
	fail.
is_false.
]
-----------------------------------------------------------------------
class 'TextStore' (specialized 'Database'):
[
set(Text):-
	retract_all,
	insert(Text).
--
get(Text):-
	find(Text),!.
]
-----------------------------------------------------------------------
class 'FileOperationErrorHandler' (specialized 'Trap'):
--
internal:
--
	world;
	handler		= self;
	--
	con		= ('Console');
--
[
alarm(ExceptionName,Operation,_*):-
	Text== con?format(
		"\n\nOperation: %s\n\nError: %s\n\n",
		Operation,ExceptionName),
	con ? error("I cannot implement file operation",Text).
]
-----------------------------------------------------------------------
class 'TrajectoryFinder' (specialized 'FindAll'):
[
]
-----------------------------------------------------------------------
class 'Trajectory' (specialized 'Database'):
--
internal:
--
	graphics_window;
--
	set	= ('TrajectoryFinder',
			world=self);
	file	= ('File');
--
[
append_point(_,_,_,_,FN,_):-
	?match(point(_,_,_,_,FN,_)),!.
append_point(Xc,Yc,IW,IH,FN,Time):-
	append(point(Xc,Yc,IW,IH,FN,Time)).
--
get_points() = Point :-
	find(Point).
--
draw(Color):-
	List== set?get_points(),
	List == [point(Xc,Yc,IW,IH,_,_)|Rest],!,
	X0== Xc / IW,
	Y0== Yc / IH,
	graphics_window ? set_pen({color:Color,lineWidth:1}),
	draw_points(Rest,X0,Y0).
draw(_).
--
draw_points([point(Xc,Yc,IW,IH,_,_)|Rest],X1,Y1):-!,
	X2== Xc / IW,
	Y2== Yc / IH,
	graphics_window ? draw_line(X1,Y1,X2,Y2),
	draw_points(Rest,X2,Y2).
draw_points(_,_,_).

--
write_table(VideoDataSource):-
	file ? set_name(VideoDataSource+".txt"),
	file ? open('writing'),
	fail.
write_table(_):-
	Point== ?match(_),
	Point == point(Xc,Yc,IW,IH,FN,Time),
	file ? writef(
		"%d\t%d\t%d\t%d\t%d\t%d\n",
		Time,
		FN,
		Xc,
		Yc,
		IW,
		IH),
	fail.
write_table(_):-
	file ? close.
]
-----------------------------------------------------------------------
