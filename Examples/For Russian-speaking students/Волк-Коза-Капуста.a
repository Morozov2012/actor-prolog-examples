---------------------------------------------------------------
--            Решение загадки "Волк-коза-капуста".           --
--               Программа находит два решения.              --
--          Программа написана на Акторном Прологе.          --
--           (c) 2005 ИРЭ РАН, Алексей А. Морозов.           --
---------------------------------------------------------------

DOMAINS:

reference:

Персонаж			= 'волк'; 'коза'; 'капуста'.
Список				= Персонаж*.

КтоГдеНаходится			= кто_где(Список,Список).
ПоследовательностьСостояний	= КтоГдеНаходится*.

КогоВезём			= Список*.

ground:

НаправлениеПеревозки		=
				'с_левого_берега_на_правый';
				'с_правого_берега_на_левый'.

PREDICATES:

imperative:

создать_список_перевозок(
	ПоследовательностьСостояний)		- (o);

nondeterm:

последовательность_перевозок(
	НаправлениеПеревозки,
	КтоГдеНаходится,
	КтоГдеНаходится,
	ПоследовательностьСостояний,
	КогоВезём)				- (i,i,o,i,o);

удалить_из_списка(Персонаж,Список,Список)	- (_,i,_);

determ:

допустимое_состояние(Список)			- (i);
несовместимая_пара(Персонаж,Персонаж)		- (i,i);

imperative:

напечатать_ответ(
	INTEGER,
	НаправлениеПеревозки,
	ПоследовательностьСостояний,КогоВезём)	- (i,i,i,i);
напечатать_направление(
	НаправлениеПеревозки,
	НаправлениеПеревозки)			- (i,o);

напечатать_кого_везём(Список)			- (i);
напечатать_список_персонажей(Список)		- (i);

напечатать_кто_где(КтоГдеНаходится)		- (i);
напечатать_кто_на_берегу(Список)		- (i);

class 'Main' (specialized 'DemoConsole'):
--
счётчик		= ('СчётчикРешений');
--
[
goal:-
	--
	Состояние1== кто_где(['волк','коза','капуста'],[]),
	writeln("Вот что было вначале:"),
	напечатать_кто_где(Состояние1),
	--
	создать_список_перевозок(Состояния),
	--
	последовательность_перевозок(
		'с_левого_берега_на_правый',
		Состояние1,Состояние2,
		Состояния,КогоВезём),
	Состояние2== кто_где([],ПравыйБерег1),
	удалить_из_списка('волк',ПравыйБерег1,S1),
	удалить_из_списка('коза',S1,S2),
	удалить_из_списка('капуста',S2,[]),
	--
	счётчик ? взять_номер(N),
	--
	writeln("-----"),
	writeln("Найдено решение ",N,":"),
	--
	напечатать_ответ(
		1,'с_левого_берега_на_правый',
		Состояния,КогоВезём),
	writeln("Вот что получилось в итоге:"),
	напечатать_кто_где(Состояние2),
	--
	fail.
создать_список_перевозок([_,_,_,_,_,_,_,_]).
--
-- Условие завершения рекурсии.
--
последовательность_перевозок(_,S1,S1,[S1],[]).
--
-- Перемещение с правого берега на Правый.
-- 1. Берём с собой одного персонажа.
--
последовательность_перевозок(
		'с_левого_берега_на_правый',
		S1,S3,[S4|Состояния],[[Персонаж]|КогоВезём]):-
	S1 == кто_где(ЛевыйБерег1,ПравыйБерег1),
	удалить_из_списка(Персонаж,ЛевыйБерег1,ЛевыйБерег2),
	ПравыйБерег2== [Персонаж|ПравыйБерег1],
	допустимое_состояние(ЛевыйБерег2),
	S2== кто_где(ЛевыйБерег2,ПравыйБерег2),
	S4== кто_где(ЛевыйБерег2,ПравыйБерег1),
	последовательность_перевозок(
		'с_правого_берега_на_левый',
		S2,S3,Состояния,КогоВезём).
/*
--
-- 2. Берём с собой двух персонажей.
--
последовательность_перевозок(
		'с_левого_берега_на_правый',
		S1,S3,
		[S4|Состояния],
		[[Персонаж1,Персонаж2]|КогоВезём]):-
	S1 == кто_где(ЛевыйБерег1,ПравыйБерег1),
	удалить_из_списка(Персонаж1,ЛевыйБерег1,ЛевыйБерег2),
	удалить_из_списка(Персонаж2,ЛевыйБерег2,ЛевыйБерег3),
	ПравыйБерег2== [Персонаж1,Персонаж2|ПравыйБерег1],
	допустимое_состояние(ЛевыйБерег3),
	S2== кто_где(ЛевыйБерег3,ПравыйБерег2),
	S4== кто_где(ЛевыйБерег3,ПравыйБерег1),
	последовательность_перевозок(
		'с_правого_берега_на_левый',
		S2,S3,Состояния,КогоВезём).
*/
--
-- Перемещение с левого берега на Левый.
-- 1. Берём с собой одного персонажа.
--
последовательность_перевозок(
		'с_правого_берега_на_левый',
		S1,S3,[S4|Состояния],[[Персонаж]|КогоВезём]):-
	S1 == кто_где(ЛевыйБерег1,ПравыйБерег1),
	удалить_из_списка(Персонаж,ПравыйБерег1,ПравыйБерег2),
	ЛевыйБерег2== [Персонаж|ЛевыйБерег1],
	допустимое_состояние(ПравыйБерег2),
	S2== кто_где(ЛевыйБерег2,ПравыйБерег2),
	S4== кто_где(ЛевыйБерег1,ПравыйБерег2),
	последовательность_перевозок(
		'с_левого_берега_на_правый',
		S2,S3,Состояния,КогоВезём).
/*
--
-- 2. Берём с собой двух персонажей.
--
последовательность_перевозок(
		'с_правого_берега_на_левый',
		S1,S3,
		[S4|Состояния],
		[[Персонаж1,Персонаж2]|КогоВезём]):-
	S1 == кто_где(ЛевыйБерег1,ПравыйБерег1),
	удалить_из_списка(Персонаж1,ПравыйБерег1,ПравыйБерег2),
	удалить_из_списка(Персонаж2,ПравыйБерег2,ПравыйБерег3),
	ЛевыйБерег2== [Персонаж1,Персонаж2|ЛевыйБерег1],
	допустимое_состояние(ПравыйБерег3),
	S2== кто_где(ЛевыйБерег2,ПравыйБерег3),
	S4== кто_где(ЛевыйБерег1,ПравыйБерег3),
	последовательность_перевозок(
		'с_левого_берега_на_правый',
		S2,S3,Состояния,КогоВезём).
*/
--
-- Такое тоже может быть.
-- 1. Никого с собой не берём.
--
последовательность_перевозок(
		'с_левого_берега_на_правый',
		S1,S2,[S1|Состояния],[[]|КогоВезём]):-
	S1== кто_где(ЛевыйБерег,_),
	допустимое_состояние(ЛевыйБерег),
	последовательность_перевозок(
		'с_правого_берега_на_левый',
		S1,S2,Состояния,КогоВезём).
--
-- 2. Никого с собой не берём.
--
последовательность_перевозок(
		'с_правого_берега_на_левый',
		S1,S2,[S1|Состояния],[[]|КогоВезём]):-
	S1== кто_где(_,ПравыйБерег),
	допустимое_состояние(ПравыйБерег),
	последовательность_перевозок(
		'с_левого_берега_на_правый',
		S1,S2,Состояния,КогоВезём).

удалить_из_списка(Персонаж,[Персонаж|Список],Список).
удалить_из_списка(X,[Y|Список1],[Y|Список2]):-
	удалить_из_списка(X,Список1,Список2).

допустимое_состояние(Список):-
	удалить_из_списка(Персонаж1,Список,_),
	удалить_из_списка(Персонаж2,Список,_),
	несовместимая_пара(Персонаж1,Персонаж2),!,
	fail.
допустимое_состояние(_).

несовместимая_пара('волк','коза'):-!.
несовместимая_пара('коза','капуста').

напечатать_ответ(N,Куда1,[КтоГде|Далее],[Список|КогоВезём]):-!,
	writeln("-----"),
	write(N,") "),
	напечатать_направление(Куда1,Куда2),
	напечатать_кого_везём(Список),
	напечатать_кто_где(КтоГде),
	напечатать_ответ(N+1,Куда2,Далее,КогоВезём).
напечатать_ответ(_,_,_,_):-
	writeln("-----").

напечатать_направление(
		'с_левого_берега_на_правый',
		'с_правого_берега_на_левый'):-!,
	writeln("Плывём с левого берега на правый.").
напечатать_направление(
		'с_правого_берега_на_левый',
		'с_левого_берега_на_правый'):-!,
	writeln("Плывём с правого берега на левый.").

напечатать_кого_везём([]):-!,
	writeln("Никого не везём.").
напечатать_кого_везём(Список):-
	write("В лодке: "),
	напечатать_список_персонажей(Список).

напечатать_список_персонажей([Персонаж]):-!,
	writeln(Персонаж,".").
напечатать_список_персонажей([Персонаж|Список]):-!,
	write(Персонаж,", "),
	напечатать_список_персонажей(Список).
напечатать_список_персонажей(_):-
	nl.

напечатать_кто_где(кто_где(ЛевыйБерег,ПравыйБерег)):-!,
	write("На левом берегу:  "),
	напечатать_кто_на_берегу(ЛевыйБерег),
	write("На правом берегу: "),
	напечатать_кто_на_берегу(ПравыйБерег).
напечатать_кто_где(_).

напечатать_кто_на_берегу([]):-!,
	writeln("никого нет.").
напечатать_кто_на_берегу(Список):-
	напечатать_список_персонажей(Список).
]

class 'СчётчикРешений' (specialized 'Database'):
[
DOMAINS:

Target	= INTEGER.

PREDICATES:

imperative:

взять_номер(INTEGER)	- (o);

CLAUSES:

взять_номер(N+1):-
	retract(N),!,
	append(N+1).
взять_номер(1):-
	append(1).
]
