-----------------------------------------------------------------------
--                                                                   --
-- Элементы структурного логического программирования.               --
--                                                                   --
-- Проверить, является ли граф лесом?                                --
--                                                                   --
-- Использованы "кирпичики":                                         --
-- 1) входная сборка;                                                --
-- 2) элемент списка;			                             --
-- 3) увеличение индекса;                                            --
-- 4) выходной аргумент;                                             --
-- 5) отрицание с помощью отсечения.                                 --
--                                                                   --
-----------------------------------------------------------------------

DOMAINS:

Вершина		= INTEGER.
Дуга		= дуга(Вершина,Вершина).
Граф		= Дуга*.

Путь		= НомерДуги*.
НомерДуги	= INTEGER.

PREDICATES:

determ:

содержит_циклы(Граф)		- (i);

nondeterm:

произвольная_дуга(
	Граф,
	Вершина,
	Вершина,
	НомерДуги)		- (i,_,_,o);

дуга_принадлежит_графу(
	Дуга,
	Граф,
	НомерДуги,
	НомерДуги)		- (o,i,i,o);

циклический_путь_в_графе(
	Граф,
	Вершина,
	Вершина,
	Путь)			- (i,i,i,i);

determ:

не_элемент(НомерДуги,Путь)	- (i,i);
элемент(НомерДуги,Путь)		- (i,i);

CLAUSES:

goal:-
	-- G== [дуга(1,2),дуга(3,4),дуга(2,3),дуга(3,1),дуга(4,1)],
	-- G== [дуга(1,2),дуга(1,2)],
	-- G== [дуга(1,1)],
	G== [дуга(1,2),дуга(3,4),дуга(2,3),дуга(3,10),дуга(14,11)],
	содержит_циклы(G),
	writeln("Граф НЕ является лесом!").
goal:-
	writeln("Граф является лесом!").

содержит_циклы(Граф):-
	произвольная_дуга(Граф,Вершина1,Вершина2,НомерДуги),
	циклический_путь_в_графе(
		Граф,Вершина1,Вершина2,[НомерДуги]),!.

произвольная_дуга(Граф,Вершина1,Вершина2,НомерДуги):-
	дуга_принадлежит_графу(Дуга,Граф,1,НомерДуги),
	Дуга == дуга(Вершина1,Вершина2).
произвольная_дуга(Граф,Вершина1,Вершина2,НомерДуги):-
	дуга_принадлежит_графу(Дуга,Граф,1,НомерДуги),
	Дуга == дуга(Вершина2,Вершина1).

дуга_принадлежит_графу(Дуга,[Дуга|_],НомерДуги,НомерДуги).
дуга_принадлежит_графу(Дуга,[_|Хвост],N1,N2):-
	дуга_принадлежит_графу(Дуга,Хвост,N1+1,N2).

циклический_путь_в_графе(_,B,B,_).
циклический_путь_в_графе(Граф,A,C,Путь):-
	произвольная_дуга(Граф,A,B,НомерДуги),
	не_элемент(НомерДуги,Путь),
	циклический_путь_в_графе(Граф,B,C,[НомерДуги|Путь]).

не_элемент(НомерДуги,Путь):-
	элемент(НомерДуги,Путь),!,
	fail.
не_элемент(_,_).

элемент(НомерДуги,[НомерДуги|_]):-!.
элемент(НомерДуги,[_|Хвост]):-
	элемент(НомерДуги,Хвост).
