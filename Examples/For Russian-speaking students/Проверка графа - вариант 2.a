-----------------------------------------------------------------------
--                                                                   --
--                     Решение задачи про графы.                     --
--              Программа написана на Акторном Прологе.              --
--                (c) 2011 МГППУ, Алексей А. Морозов.                --
--                                                                   --
-- Определения: граф - это множество дуг (рёбер), представленных     --
-- упорядоченными парами <Xi,Xj> вершин; путь - это                  --
-- последовательность X1,X2,...,Xn, в которой либо <Xi,Xi+1>, либо   --
-- <Xi+1,Xi> - дуга; ациклический путь - это путь, в котором все     --
-- вершины различны; цикл - путь X1,X2,...,Xn,X1, где X2,...,Xn -    --
-- ациклический путь.                                                --
-- Задача: Дан непустой граф G. Написать программу, определяющую,    --
-- содержит ли граф G хотя бы три цикла, не имеющие общих вершин?    --
--                                                                   --
-----------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
собиратель	= ('МножествоДуг',
			world=self);
--
[
CLAUSES:
--
дуга(2,1).
дуга(2,3).
дуга(3,4).
дуга(4,5).
дуга(4,1).
дуга(11,12).
дуга(12,15).
дуга(15,11).
дуга(21,22).
дуга(22,23).
дуга(23,21).
--
взять_дугу = д(Вершина1,Вершина2)
	:-
	дуга(Вершина1,Вершина2).
--
CLAUSES:
--
goal:-
	СписокДуг== собиратель ? взять_дугу,
	writeln("Граф: ",СписокДуг),
	проверка_графа(СписокДуг).
--
проверка_графа(Граф):-
	найти_все_циклы(Граф,[],СписокЦиклов),
	writeln("Найдены циклы: ",СписокЦиклов),
	есть_циклы_без_общих_вершин(СписокЦиклов,[],0,3),!,
	writeln("В этом графе есть хотя бы три "
		"цикла без общих вершин!").
проверка_графа(_):-
	writeln("В графе нет трёх циклов без общих вершин.").
--
есть_циклы_без_общих_вершин(_,_,Счётчик,Максимум):-
	Счётчик >= Максимум,!.
есть_циклы_без_общих_вершин(
		[Цикл|ХвостСписка],ОтобранныеЦиклы,
		Счётчик,Максимум):-
	не_имеет_общих_вершин(Цикл,ОтобранныеЦиклы),
	есть_циклы_без_общих_вершин(
		ХвостСписка,[Цикл|ОтобранныеЦиклы],
		Счётчик+1,Максимум).
есть_циклы_без_общих_вершин(
		[_|ХвостСписка],ОтобранныеЦиклы,
		Счётчик,Максимум):-
	есть_циклы_без_общих_вершин(
		ХвостСписка,ОтобранныеЦиклы,
		Счётчик,Максимум).
--
не_имеет_общих_вершин(Цикл1,[Цикл2|ХвостСписка]):-
	не_пересекаются(Цикл1,Цикл2),
	не_имеет_общих_вершин(Цикл1,ХвостСписка).
не_имеет_общих_вершин(_,[]).
--
не_пересекаются([Вершина|ХвостСписка],Цикл):-
	не_принадлежит(Вершина,Цикл),
	не_пересекаются(ХвостСписка,Цикл).
не_пересекаются([],_).
--
найти_все_циклы(Граф,СписокЦиклов,ВсеЦиклы):-
	ищем_цикл(Граф,Граф,Путь),
	не_принадлежит(Путь,СписокЦиклов),!,
	найти_все_циклы(Граф,[Путь|СписокЦиклов],ВсеЦиклы).
найти_все_циклы(_,ВсеЦиклы,ВсеЦиклы).
--
ищем_цикл([д(Вершина,_)|_],Граф,Путь):-
	строим_путь(Вершина,Граф,[],Вершина,[],Путь).
ищем_цикл([_|ХвостСписка],Граф,Путь):-
	ищем_цикл(ХвостСписка,Граф,Путь).
--
строим_путь(ИсходнаяВершина,_,[_|_],ИсходнаяВершина,Путь,Путь).
строим_путь(	Вершина1,Граф,
		ПройденныеДуги,ИсходнаяВершина,
		ПройденныеВершины,Путь):-
	выбрать_дугу(Граф,Вершина1,Вершина2,1,НомерДуги),
	не_принадлежит(НомерДуги,ПройденныеДуги),
	ПройденныйПуть== [НомерДуги|ПройденныеДуги],
	строим_путь(
		Вершина2,Граф,ПройденныйПуть,
		ИсходнаяВершина,[Вершина2|ПройденныеВершины],Путь).
--
выбрать_дугу(	[д(Вершина1,Вершина2)|_],
		Вершина1,Вершина2,Счётчик,Счётчик).
выбрать_дугу(	[д(Вершина2,Вершина1)|_],
		Вершина1,Вершина2,Счётчик,Счётчик).
выбрать_дугу([_|Хвост],Вершина1,Вершина2,Счётчик,НомерДуги):-
	выбрать_дугу(Хвост,Вершина1,Вершина2,Счётчик+1,НомерДуги).
--
не_принадлежит(Элемент,[Элемент|_]):-!,
	fail.
не_принадлежит(Элемент,[_|ХвостСписка]):-!,
	не_принадлежит(Элемент,ХвостСписка).
не_принадлежит(_,[]).
]
-----------------------------------------------------------------------
class 'МножествоДуг' (specialized 'FindAll'):
--
mode	= 'set';
--
[
]
-----------------------------------------------------------------------
