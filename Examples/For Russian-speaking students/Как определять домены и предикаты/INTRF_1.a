
-- Интерфейсом называется синтаксическая
-- конструкция, с помощью которой определяются
-- слоты и предикаты (методы) заданного класса.
-- Заголовок интерфейса начинается с ключевого
-- слова interface, за которым следует имя
-- класса. Затем могут быть перечислены
-- в круглых скобках через запятую имена
-- интерфейсов, содержимое которых наследуется
-- данным интерфейсом. Перед списком наследуемых
-- интерфейсов пишется ключевое слово
-- specialized. Все интерфейсы, наследуемые
-- данным, должны быть определены где-либо в
-- тексте программы. В конце заголовка интерфейса
-- пишется двоеточие.

interface 'B1': []

interface 'C1':

suspending:

i	: STRING;

constant:

con	: 'Console';

[
]

interface 'D1':

suspending:

i	: STRING;

[
]

interface 'MyConsole':
[
writeln(_*);
]

interface 'A1'
(specialized 'B1', 'C1', 'D1'):

-- Далее перечисляются имена слотов класса,
-- которому соответствует данный интерфейс.
-- После имени слота пишется двоеточие и имя
-- домена или класса, соответствующего слоту.
-- Определение слота завершается точкой с
-- запятой. Повторное определение слота
-- считается синтаксической ошибкой.

a	: INTEGER;
b	: STRING;

-- Перед и между определениями слотов
-- можно использовать ключевые слова
-- "variable", "protecting", "suspending",
-- и "constant".
-- Все слоты, определяемые после ключевого
-- слова "protecting" объявляются
-- защищающими, а после ключевого слова
-- "suspending" отключающими. Слоты,
-- определённые после ключевого слова
-- "variable", считаются простыми, если они
-- не объявлены защищающими или
-- отключающими в наследуемых интерфейсах.
-- После всех перечисленных ключевых слов
-- ставится двоеточие. По умолчанию
-- слоты объявляются простыми.
-- Слоты, объявленные в интерфейсе класса
-- защищающими и отключающими, в самом
-- классе уже не могут быть определены
-- иным образом. Кроме того, транслятор
-- проверяет, чтобы такие слоты были
-- объявлены соответственно защищающими и
-- отключающими при создании экземпляров
-- классов (в конструкторах миров).

suspending:

c	: _;
w	: 'E1';

suspending:

i	: STRING;

-- Все домены, упоминаемые в определениях
-- слотов, должны быть определены
-- где-либо в тексте программы.

-- При наследовании определений
-- слотов осуществляется перекрытие
-- наследуемых определений
-- определениями в интерфейсах-потомках.
-- При этом, наличие в нескольких наследуемых
-- интерфейсах (неперекрытых) определений
-- одного и того же слота с различными
-- доменами или одного и того же слота,
-- определённого защищающим и отключающим
-- в разных интерфейсах, считается
-- синтаксической ошибкой.

[
-- После определения доменов слотов в
-- квадратных скобках помещается определение
-- предикатов (методов) соответствующего
-- класса. Правила определения предикатов в
-- точности соответствуют правилам
-- определения предикатов в разделе
-- PREDICATES.

p(INTEGER,REAL)		- (i,o);
q(SYMBOL)		- (i);

]

-- При наследовании интерфейсов, все определения
-- предикатов наследуемых интерфейсов просто
-- добавляются к определениям интерфейса-потомка.

-- Допускается определение интерфейсов, не
-- соответствующих никакому классу. Такие
-- интерфейсы можно использовать для
-- удобства описания методов и предикатов,
-- общих для различных классов, не связанных
-- отношением наследования.

interface 'E1':
[
r('G1')		- (i);
]

-- Обратите внимание, что в языке разрешено
-- множественное наследование интерфейсов,
-- но запрещено множественное наследование
-- классов.

class 'A1'
(specialized 'C1'):
--
suspending:
--
i	= "Text";
--
[
p(_,100.0).
q(_).
]

class 'C1':
--
con	= ('Console');
--
[
goal:-!,
	con ? writeln("Hello world!").
--
alarm(_).
]

project: (('A1'))
