
DOMAINS:

-- В секции DOMAINS можно определить домены.
-- Определение домена начинается с имени домена.
-- Именем определяемого домена может быть любая
-- переменная, кроме анонимной. За именем домена
-- следует знак равенства. После этого
-- перечисляются альтернативы домена.
-- Альтернативы разделяются точкой с запятой.
-- В конце определения домена ставится точка.
-- Домен должен иметь хотя бы одну альтернативу.
--
-- Альтернативами домена, в частности, могут
-- служить простейшие домены: INTEGER (целые),
-- REAL (вещественные), SYMBOL (символы) и
-- STRING (строки).
--
-- Перед и между определениями доменов
-- можно использовать ключевые слова
-- "ground", "reference", "lazy" и "mixed".
-- Все домены, определяемые после ключевого
-- слова "ground", объявляются основными.
-- Все домены, определяемые после ключевых
-- слов "reference" и "lazy", объявляются
-- ссылочными. При этом отличие доменов,
-- определёных с помощью ключевого слова
-- "lazy", состоит в том, что переменные
-- и слоты таких типов могут использоваться
-- для обозначения целевых миров в дальних
-- вызовах предикатов. Таким образом,
-- если целевые переменные "lazy" являются
-- несвязанными, они могут вызывать
-- задержку исполнения вызываемых предикатов.
-- Все домены, определяемые после ключевого
-- слова "mixed", объявляются смешанными.
-- Это означает, что значениями таких доменов
-- не могут быть несвязанные переменные
-- (как в случае с основными доменами),
-- но при этом в качестве значений могут
-- использоваться составные термы, содержащие
-- несвязанные переменные и другие термы
-- ссылочных типов.
-- Заметим, что переменные и слоты основных
-- типов также могут использоваться для
-- обозначения целевых миров, однако их
-- использование никогда не может привести к
-- задержке исполнения предикатов.
-- По умолчанию (при отсутствии перед
-- определениями доменов ключевых слов
-- "ground", "reference", "lazy", "mixed")
-- домены объявляются основными.

reference:

T1	= INTEGER; REAL; SYMBOL; STRING; BINARY.

-- Для определения нескольких доменов с одинаковыми
-- альтернативами можно использовать сокращённую
-- запись, перечислив имена доменов через запятую.

ground:

X1, Y1, Z1	= INTEGER; REAL.
N, M		= INTEGER.

-- Альтернативами могут служить также имена
-- других доменов. В качестве альтернатив
-- нельзя использовать анонимные переменные.

reference:

T2	= T1; T3; T5.

-- Если после имени домена стоит звёздочка, это
-- означает список термов, принадлежащих этому
-- домену.

T3	= T2*.
T4	= _*.

-- Альтернативами могут служить целые,
-- вещественные, символьные и текстовые константы,
-- а также специальная константа #.
-- Считается, что все ccылочные домены по умолчанию
-- имеют альтернативу #, при этом в определении
-- ссылочных доменов константу # можно не указывать.
-- Основные домены по умолчанию не имеют
-- альтернативу #.

reference:

T5	= 1000; 3.14; 'Symbol'; "Text".

ground:

T6	= 'first'; 'second'; 'third'; #.

-- В качестве альтернатив домена можно задать
-- диапазоны целых и вещественных чисел,
-- обозначаемые c помощью квадратных скобок и
-- двух точек:

T7	= [-127 .. 127]; [-1.0 .. 9.00].

-- Домен BINARY служит для работы с массивами
-- байтов. Для определения массива байтов
-- используется последовательность
-- шестнадцатеричных чисел (0 .. 9, A .. F).
-- Каждому байту соответствуют две
-- шестнадцатеричные цифры, поэтому общее
-- количество цифр в описании массива должно
-- быть чётным. Шестнадцатеричные цифры могут
-- быть разделены символом подчёркивания ("_").

T8	= ~767E_95FB_4E0D_5982_4E00_89C1.

-- Если значением определяемого домена являются
-- экземпляры некоторых классов, соответствующие
-- альтернативы записываются в виде имён классов
-- в круглых скобках.

T9	= ('Test'); ('A1').

-- Функтор со списком доменов в круглых скобках
-- обозначает структуры с аргументами,
-- принадлежащими соответствующим доменам.
-- Обратите внимание, что имена классов,
-- использованные в качестве аргументов функторов,
-- не нужно помещать в дополнительные круглые
-- скобки.

mixed:

T10	= f(T1,_,REAL); g(T4,T5,'MyClass').

-- Имеется возможность определять домены,
-- значениями которых будут недоопределённые
-- множества. В фигурных скобках необходимо
-- перечислить все возможные имена пар и домены
-- соответствующих им значений. Перед фигурными
-- скобками можно вынести имя домена,
-- соответствующего главным элементам множеств.

mixed:

T11	= N{a:REAL,b:T3}; {x:N,y:T2}.
T12	= _{a:T1,b:T2}.

-- Транслятор проверяет, чтобы имена доменов не
-- использовались в качестве альтернатив этого домена.
-- При этом рекурсивное определение различных доменов
-- разрешено.

mixed:

T13	= f(T13).
T14	= T12.

-- Необходимо, чтобы все домены, имена которых
-- использованы в составе альтернатив, были определены
-- в рассматриваемой секции DOMAINS или где-нибудь ещё
-- в тексте программы.

T15	= T1; T2; T3.

-- Транслятор проверяет, чтобы в списке альтернатив
-- не было повторяющихся элементов.

T16	= 1; 2; 3.

-- Не разрешается использовать альтернативы с
-- одинаковым именем функтора. Не разрешается также
-- многократное определение альтернатив, обозначающих
-- списки. Не разрешается повторное определение
-- пары недоопределённого множества, если пара с
-- таким именем уже была определена ранее в данном
-- списке альтернатив.

mixed:

T17	= f(T1); T2*; {a:T3}; {b:T4}.
T18	= f(T2); T3*; {a:T4}.

reference:

T19	= {c:T1}; T2*; g1(T1).
T20	= g2(T2); T2*; {d:T2}.

-- Эти же ограничения накладываются на полный список
-- альтернатив домена, с учётом альтернатив доменов,
-- рекурсивно использованных в определении
-- рассматриваемого домена. При этом, однако,
-- если альтернатива, повторно определяемая в
-- полном списке альтернатив, в точности соответствует
-- некоторой альтернативе, определённой ранее,
-- повторное определение альтернативы просто
-- игнорируется.
--
-- Если определяемый домен является ссылочным,
-- транслятор проверяет, чтобы все домены, упомянутые
-- в составе его альтернатив, также были объявлены
-- ссылочными.

reference:

T21	= f(T1); T2*; {a:T3}; {b:T5}.

class 'Test' (specialized 'Console'):
[
goal:-!,
	writeln("Hello world!").
]

class 'A1' (specialized 'Console'):
[
]

class 'MyClass' (specialized 'Console'):
[
]

project: (('Test'))
