-----------------------------------------------------------
--                                                       --
--                  Программа KITTENS.A                  --
--                                                       --
--                  Автор: Спанопуло В.В.                --
--      аспирант кафедры мат. кибернетики ВМиК МГУ       --
--                                                       --
-----------------------------------------------------------
--                                                       --
--     Перенесено с Турбо Пролога на Акторный Пролог     --
--     Морозовым А.А.                                    --
--                                                       --
-----------------------------------------------------------
--                                                       --
--     Программа решает следующую логическую задачу.     --
--                                                       --
--                         Котята.                       --
--                                                       --
--   Дорогая тётя!                                       --
--   Спасибо тебе за то, что ты подарила нам котят.      --
-- Мы назвали их Дружок, Елисей, Фантик и Мурлыка.       --
-- Каждый из нас выбрал себе котёнка любимого цвета.     --
-- А теперь попробуй угадать, какого цвета котёнок       --
-- у каждого из нас, если мы тебе сообщим, что:          --
--   1) Фантик не рыжий, а Мурлыка не серый;             --
--   2) Дружок не белый, а Елисей не серый;              --
--   3) Миша выбрал чёрного котенка, а Максим выбрал     --
--      Мурлыку;                                         --
--   4) Лёня взял Елисея, а Дима - белого котёнка;       --
--   5) Дружок не серый, и Дима не взял Фантика.         --
-- Только имей в виду, тетя, в каждом из пяти            --
-- высказываний одно утверждение неверное.               --
--                              Твои племянники          --
--                                 Миша, Максим,         --
--                                 Лёня и Дима.          --
-----------------------------------------------------------
--                                                       --
-- Входные данные:                                       --
-- Все условия задачи содержатся в самой программе.      --
-- Выход:                                                --
-- Решение задачи выводится на экран в виде текста.      --
--                                                       --
-----------------------------------------------------------

-- Представление данных в программе:

DOMAINS:

reference:

Kitten	= 'Дружок';	-- Имя котёнка
	  'Елисей';
	  'Фантик';
	  'Мурлыка'.

Colour	= 'рыжий';	-- Цвет котёнка
	  'серый';
	  'черный';
	  'белый'.

Boy	= 'Миша';	-- Имя мальчика
	  'Максим';
	  'Лёня';
	  'Дима'.

Kittens		= Kitten*.
Colours		= Colour*.
Boys		= Boy*.
Fact		= f(Kitten,Colour,Boy).
Facts		= Fact*.
Logic		= 'правда'; 'неправда'.
Statement	= kc(Kitten,Colour,Logic);
		  kb(Kitten,Boy,Logic);
		  cb(Colour,Boy,Logic).

-- Факт  f(<имя котёнка>,<цвет котёнка>,<имя мальчика>)
-- соответствует описанию котёнка:
-- котёнок с именем <имя котёнка>
-- имеет цвет <цвет котёнка>,
-- и его взял мальчик с именем <имя мальчика>.
-- Facts - список из четырех фактов, в котором каждый
-- факт описывает одного из котят.

PREDICATES:

imperative:

kitList(Kittens)			- (o);
colList(Colours)			- (o);
boyList(Boys)				- (o);
solution1;
solution2;

nondeterm:

setKitten(Facts)			- (o);
set(Facts)				- (o)(i);
make(Facts,Kittens,Colours,Boys)	- (_,i,i,i);
takeCol(Colours,Colour,Colours)		- (i,_,o);
takeBoy(Boys,Boy,Boys)			- (i,_,o);
check(Facts);
check2st(Facts,Statement,Statement);
checkSt(Facts,Statement);
pick(Facts,Fact);

imperative:

neg(Statement,Statement)		- (i,o);
ng(Logic,Logic)				- (i,o);

nondeterm:

notEqC(Colour,Colour)			- (i,o);
notEqB(Boy,Boy)				- (i,o);

imperative:

writeFacts(Facts);
writeFact(Fact);

CLAUSES:
-----------------------------------------------------------
goal:-!,
	writeln("Первый метод решения задачи:"),
	solution1,
	nl,
	writeln("Второй метод решения задачи:"),
	solution2.
-----------------------------------------------------------
kitList(['Дружок','Елисей','Фантик','Мурлыка']).
colList(['рыжий','серый','черный','белый']).
boyList(['Миша','Максим','Лёня','Дима']).
-----------------------------------------------------------
-- Программа содержит два решения задачи,
-- использующие одни и те же процедуры set и check
-- (процедуры работают по-разному в зависимости от того,
-- содержат ли их входные данные переменные).
-----------------------------------------------------------
-- Solution1 - первый способ решения, при котором:
-- 1) Предикат set перебирает варианты решения.
-- 2) Предикат check проверяет по отношению к ним
-- условия 1-5.
-- Первый вариант решения, удовлетворяющий всем этим
-- условиям, выводится на экран процедурой writeFacts.
-----------------------------------------------------------
solution1:-
	set(F),
	check(F),!,
	writeFacts(F).
solution1:-
	write("Решений нет.").
-----------------------------------------------------------
-- Solution2 - второй способ решения:
-- 1) Процедура setKitten формирует список facts, в
-- котором определены только имена котят.
-- 2) Процедура check, в соответствии с условиями 1-5,
-- определяет некоторые значения списка facts.
-- 3) Процедура set определяет все остальные значения
-- списка facts, проверяя условие однозначности:
-- каждый цвет соотвествует ровно одному котёнку, и
-- каждый мальчик взял ровно одного котёнка.
-- Первый вариант решения, удовлетворяющий всем
-- условиям, выводится на экран процедурой writeFacts.
-----------------------------------------------------------
solution2:-
	setKitten(F),
	check(F),
	set(F),!,
	writeFacts(F).
solution2:-
	write("Решений нет.").
-----------------------------------------------------------
setKitten([
	f('Дружок',_,_),
	f('Елисей',_,_),
	f('Фантик',_,_),
	f('Мурлыка',_,_)]).
-----------------------------------------------------------
set(F):-
	kitList(K),
	colList(C),
	boyList(B),
	make(F,K,C,B).
-----------------------------------------------------------
make([],[],[],[]).
make([f(Kitten,Colour,Boy)|Rest1],[Kitten|Rest2],CL1,BL1):-
	takeCol(CL1,Colour,CL2),
	takeBoy(BL1,Boy,BL2),
	make(Rest1,Rest2,CL2,BL2).
-----------------------------------------------------------
takeCol([A|L],A,L).
takeCol([A|L1],B,[A|L2]):-
	takeCol(L1,B,L2).
-----------------------------------------------------------
takeBoy([A|L],A,L).
takeBoy([A|L1],B,[A|L2]):-
	takeBoy(L1,B,L2).
-----------------------------------------------------------
-- Ckeck производит проверку условий 1-5 задачи.
-----------------------------------------------------------
check(F):-
	check2st(
		F,
		kc('Фантик','рыжий','неправда'),
		kc('Мурлыка','серый','неправда')),
	check2st(
		F,
		kc('Дружок','белый','неправда'),
		kc('Елисей','серый','неправда')),
	check2st(
		F,
		cb('черный','Миша','правда'),
		kb('Мурлыка','Максим','правда')),
	check2st(
		F,
		kb('Елисей','Лёня','правда'),
		cb('белый','Дима','правда')),
	check2st(
		F,
		kc('Дружок','серый','неправда'),
		kb('Фантик','Дима','неправда')).
-----------------------------------------------------------
check2st(F,S1,S2):-
	neg(S1,S3),
	checkSt(F,S3),
	checkSt(F,S2).
check2st(F,S1,S2):-
	neg(S2,S3),
	checkSt(F,S1),
	checkSt(F,S3).
-----------------------------------------------------------
checkSt(F,kc(K,C,'правда')):-
	pick(F,f(K,C,_)).
checkSt(F,kc(K,C1,'неправда')):-
	notEqC(C1,C2),
	pick(F,f(K,C2,_)).
checkSt(F,kb(K,B,'правда')):-
	pick(F,f(K,_,B)).
checkSt(F,kb(K,B1,'неправда')):-
	notEqB(B1,B2),
	pick(F,f(K,_,B2)).
checkSt(F,cb(C,B,'правда')):-
	pick(F,f(_,C,B)).
checkSt(F,cb(C,B1,'неправда')):-
	notEqB(B1,B2),
	pick(F,f(_,C,B2)).
-----------------------------------------------------------
pick([R|_],R).
pick([_|L],R):-
	pick(L,R).
-----------------------------------------------------------
neg(kc(K,C,L1),kc(K,C,L2)):-!,
	ng(L1,L2).
neg(kb(K,B,L1),kb(K,B,L2)):-!,
	ng(L1,L2).
neg(cb(C,B,L1),cb(C,B,L2)):-!,
	ng(L1,L2).
neg(_,_):-
	break('error in neg').
-----------------------------------------------------------
ng('правда','неправда'):-!.
ng('неправда','правда'):-!.
ng(_,_):-
	break('error in ng').
-----------------------------------------------------------
notEqB(B1,B2):-
	boyList(L1),
	takeBoy(L1,B1,L2),
	takeBoy(L2,B2,_).
-----------------------------------------------------------
notEqC(C1,C2):-
	colList(L),
	takeCol(L,C1,L1),
	takeCol(L1,C2,_).
-----------------------------------------------------------
writeFacts([F|L]):-!,
	writeFact(F),
	writeFacts(L).
writeFacts(_).
-----------------------------------------------------------
writeFact(f(K,C,D)):-!,
	write(K),
	write(" "),
	write(C),
	write(", его взял "),
	write(D),
	write("."),
	nl.
writeFact(_):-
	break('error in writeFact').
-----------------------------------------------------------
