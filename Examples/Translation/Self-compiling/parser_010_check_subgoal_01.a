---------------------------------------------------------------------
-- (c) 2019 Alexei A. Morozov                                      --
-- Actor Prolog self-compiling compiler                            --
---------------------------------------------------------------------
import 'ActorPrologBacktrackableParser'
	from "morozov/ActorPrologSyntax";
import 'PrettyPrinter'
	from "PrettyPrinter";
---------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
internal:
--
	parser		= ('ActorPrologBacktrackableParser',
				slot_names=['my_slot','self']);
	test_bench	= ('Trap',
				world=self,
				handler=self);
	report		= ('PrettyPrinter',
				report=self,
				color_text='Black');
--
[
goal:-!,
	test_loop([
		title("Subgoals"),
		------------------------------
		title("Built-in Control Statements"),
		-----
		test("!",'positive'),
		test("[my_slot]",'positive'),
		test("[A,B,C]",'positive'),
		------------------------------
		title("Binary Relations"),
		-----
		test("1<=2",'positive'),
		test("3.14>0",'positive'),
		test("'b'>='a'",'positive'),
		test("'b'(1,2,3)>='a'",'positive'),
		test("b()>='a'",'negative'),
		test("'b'()>='a'",'negative'),
		test("\"text\"<=\"z\"",'positive'),
		test("~ABCD>~01AB",'positive'),
		test("#==#",'positive'),
		test("A:=B",'positive'),
		test("{a:1}<{b:2|R}",'positive'),
		test("1{pi:3.14}<=2",'positive'),
		test("3.14{x:1,y:2,z:3}>0",'positive'),
		test("'b'{n:100}>='a'",'positive'),
		test("\"text\"{|Rest}<=\"z\"",'positive'),
		test("~ABCD{p:0.01}>~01AB",'positive'),
		test("#{x:1}:=A{}",'positive'),
		test("A{x:1}:=_{}",'positive'),
		test("A+B*C<A-B/D",'positive'),
		test("[1,2,3]+B*C<A-B/D",'positive'),
		test("[1,2,3]>=[3,2,1|Tail]",'positive'),
		------------------------------
		title("Near Calls of Predicates"),
		-----
		test("p",'positive'),
		test("p*10<100",'negative'),
		test("p>100",'negative'),
		test("p()",'positive'),
		test("p()+10>300",'negative'),
		test("p()<>300",'negative'),
		test("my_slot(1,2,3)",'negative'),
		test("p(A,B,C)",'positive'),
		test("p(A,B,C)*500==Q",'positive'),
		test("p(A,B,C):=Q",'positive'),
		test("p(A,B,C*)",'positive'),
		test("p(A,B,C*)/10<=W",'negative'),
		test("p(A,B,C*)>=R",'negative'),
		test("{x:1,y:2,z:3}",'positive'),
		test("\"text\"{x:1,y:2,z:3}",'positive'),
		test("\"te\"/**/\"xt\"{x:1,y:2,z:3}",'positive'),
		test("\"te\"/**/\"x\"\"t\"{x:1,y:2,z:3}",'positive'),
		test("\"text{x:1,y:2,z:3}",'negative'),
		test("\"text\"<=100",'positive'),
		test("\"te\"/**/\"xt\">=100",'positive'),
		test("\"te\"/**/\"x\"\"t\">=100",'positive'),
		test("\"text\"",'negative'),
		test("\"te\"/**/\"x\"\"t\"",'negative'),
		test("~ABCDEF{x:1,y:2,z:3}",'positive'),
		test("~AB~CD~EF{x:1,y:2,z:3}",'positive'),
		test("~AB/*/~CD/**/~EF{x:1,y:2,z:3}",'positive'),
		test("{x:1,y:2,z:3}-100==Q",'positive'),
		test("{x:1,y:2,z:3}<=W",'positive'),
		test("P(A,B,C)",'positive'),
		test("P(A,B,C)+X<r(1,2,3)",'negative'),
		test("P(A,B,C)>=r(1,2,3)",'negative'),
		test("A()",'positive'),
		test("A()+B<C",'negative'),
		test("A()>B",'negative'),
		test("A[1,2,3]*500<=B",'positive'),
		test("A[1,2,3]<=B",'positive'),
		test("A[1,2,3]",'positive'),
		test("A",'positive'),
		test("my_slot[1,2,3]*500<=B",'positive'),
		test("my_slot[1,2,3]<=B",'positive'),
		test("my_slot[1,2,3]",'positive'),
		test("?p>=B",'positive'),
		test("?p<-(B)",'positive'),
		test("?p+1>=B",'positive'),
		test("?p+1<-(B)",'positive'),
		test("?p*1>=B",'positive'),
		test("?p*1<-(B)",'positive'),
		test("my_slot?p>=B",'positive'),
		test("World?p<=B",'positive'),
		test("my_slot?p+1>=B",'positive'),
		test("World?p+1<=B",'positive'),
		test("my_slot?p*1>=B",'positive'),
		test("World?p*1<=B",'positive'),
		test("_(1,2,3)",'negative'),
		test("_",'negative'),
		------------------------------
		title("Use of Infixes in Subgoals"),
		-----
		test("?p",'positive'),
		test("?p()",'positive'),
		test("?p(A,B,C)",'positive'),
		test("?p(A,B,C*)",'positive'),
		-----
		test("?1",'negative'),
		test("?1{x:300,y:500,z:700}",'positive'),
		-----
		test("<-p",'negative'),
		test("<-p()",'negative'),
		test("<-p(A,B,C)",'negative'),
		test("<-p(A,B,C*)",'negative'),
		-----
		test("<-100",'negative'),
		test("<-100{x:300,y:500,z:700}",'negative'),
		test("self<100{x:300,y:500,z:700}",'positive'),
		-----
		test("<<p",'negative'),
		test("<<p()",'negative'),
		test("<<p(A,B,C)",'negative'),
		test("<<p(A,B,C*)",'negative'),
		-----
		test("<<1",'negative'),
		test("<<1{x:300,y:500,z:700}",'negative'),
		-----
		test("[<-]p",'negative'),
		test("[<-]p()",'negative'),
		test("[<-]p(A,B,C)",'negative'),
		test("[<-]p(A,B,C*)",'negative'),
		-----
		test("[<-]1",'negative'),
		test("[<-]1{x:300,y:500,z:700}",'negative'),
		-----
		test("[<<]p",'negative'),
		test("[<<]p()",'negative'),
		test("[<<]p(A,B,C)",'negative'),
		test("[<<]p(A,B,C*)",'negative'),
		-----
		test("[<<]1",'negative'),
		test("[<<]1{x:300,y:500,z:700}",'negative')
		],1,N1,0,NumberOfErrors1),
	test_loop([
		title("Far Calls of Predicates"),
		-----
		test("my_slot?p==1",'positive'),
		test("my_slot?p()<>100",'positive'),
		test("my_slot?p(A,B,C)<=3.14",'positive'),
		test("my_slot?p(A,B,C*)>=-3.14",'positive'),
		test("World?p:=3.14",'positive'),
		test("World?p()==1",'positive'),
		test("World?p(A,B,C)>1",'positive'),
		test("World?p(A,B,C*)<0",'positive'),
		-----
		test("my_slot?p",'positive'),
		test("my_slot?p()",'positive'),
		test("my_slot?p(A,B,C)",'positive'),
		test("my_slot?p(A,B,C*)",'positive'),
		test("World?p",'positive'),
		test("World?p()",'positive'),
		test("World?p(A,B,C)",'positive'),
		test("World?p(A,B,C*)",'positive'),
		test("_?p(A,B,C)",'negative'),
		-----
		test("my_slot?1",'negative'),
		test("my_slot?1{x:300,y:500,z:700}",'positive'),
		test("World?1",'negative'),
		test("World?1{x:300,y:500,z:700}",'positive'),
		-----
		test("my_slot[A,B,C]?p==1",'positive'),
		test("my_slot[A,B,C]?p()<>100",'positive'),
		test("my_slot[A,B,C]?p(A,B,C)<=3.14",'positive'),
		test("my_slot[A,B,C]?p(A,B,C*)>=-3.14",'positive'),
		test("World[A,B,C]?p:=3.14",'positive'),
		test("World[A,B,C]?p()==1",'positive'),
		test("World[A,B,C]?p(A,B,C)>1",'positive'),
		test("World[A,B,C]?p(A,B,C*)<0",'positive'),
		-----
		test("my_slot[A,B,C]?p",'positive'),
		test("my_slot[A,B,C]?p()",'positive'),
		test("my_slot[A,B,C]?p(A,B,C)",'positive'),
		test("my_slot[A,B,C]?p(A,B,C*)",'positive'),
		test("World[A,B,C]?p",'positive'),
		test("World[A,B,C]?p()",'positive'),
		test("World[A,B,C]?p(A,B,C)",'positive'),
		test("World[A,B,C]?p(A,B,C*)",'positive'),
		test("_[A,B,C]?p(A,B,C)",'negative'),
		-----
		test("my_slot[A,B,C]?1",'negative'),
		test("my_slot[A,B,C]?1{x:300,y:500,z:700}",'positive'),
		test("World[A,B,C]?1",'negative'),
		test("World[A,B,C]?1{x:300,y:500,z:700}",'positive'),
		-----
		test("my_slot[A,B,C]?p()",'positive'),
		test("World[A,B,C]?p()",'positive'),
		test("my_slot[A,B,C]100?p()",'negative'),
		test("World[A,B,C]100?()",'negative'),
		-----
		test("my_slot<-p",'positive'),
		test("my_slot<-p()",'positive'),
		test("my_slot<-p(A,B,C)",'positive'),
		test("my_slot<-p(A,B,C*)",'positive'),
		test("World<-p",'positive'),
		test("World<-p()",'positive'),
		test("World<-p(A,B,C)",'positive'),
		test("World<-p(A,B,C*)",'positive'),
		test("_<-p(A,B,C)",'negative'),
		-----
		test("my_slot<-100",'positive'),
		test("my_slot<-100{x:300,y:500,z:700}",'positive'),
		test("my_slot<100{x:300,y:500,z:700}",'positive'),
		test("World<-100",'positive'),
		test("World<-100{x:300,y:500,z:700}",'positive'),
		test("World<100{x:300,y:500,z:700}",'positive'),
		-----
		test("my_slot[A,B,C]<-p()",'positive'),
		test("World[A,B,C]<-p()",'positive'),
		test("my_slot[A,B,C]100<-p()",'negative'),
		test("World[A,B,C]100<-p()",'negative'),
		-----
		test("my_slot<<p",'positive'),
		test("my_slot<<p()",'positive'),
		test("my_slot<<p(A,B,C)",'positive'),
		test("my_slot<<p(A,B,C*)",'positive'),
		test("World<<p",'positive'),
		test("World<<p()",'positive'),
		test("World<<p(A,B,C)",'positive'),
		test("World<<p(A,B,C*)",'positive'),
		test("_<<p(A,B,C)",'negative'),
		-----
		test("my_slot<<1",'negative'),
		test("my_slot<<1{x:300,y:500,z:700}",'positive'),
		test("World<<1",'negative'),
		test("World<<1{x:300,y:500,z:700}",'positive'),
		-----
		test("my_slot[A,B,C]<<p()",'positive'),
		test("World[A,B,C]<<p()",'positive'),
		test("my_slot[A,B,C]100<<p()",'negative'),
		test("World[A,B,C]100<<p()",'negative'),
		-----
		test("[my_slot]?p",'negative'),
		test("[my_slot]?p()",'negative'),
		test("[my_slot]?p(A,B,C)",'negative'),
		test("[my_slot]?p(A,B,C*)",'negative'),
		test("[World]?p",'negative'),
		test("[World]?p()",'negative'),
		test("[World]?p(A,B,C)",'negative'),
		test("[World]?p(A,B,C*)",'negative'),
		-----
		test("[my_slot]?1",'negative'),
		test("[my_slot]?1{x:300,y:500,z:700}",'negative'),
		test("[World]?1",'negative'),
		test("[World]?1{x:300,y:500,z:700}",'negative'),
		-----
		test("[my_slot[A,B,C]]?p()",'negative'),
		test("[World[A,B,C]]?p()",'negative'),
		test("[my_slot[A,B,C]100]?p()",'negative'),
		test("[World[A,B,C]100]?p()",'negative'),
		-----
		test("[my_slot]<-p",'positive'),
		test("[my_slot]<-p()",'positive'),
		test("[my_slot]<-p(A,B,C)",'positive'),
		test("[my_slot]<-p(A,B,C*)",'positive'),
		test("[World]<-p",'positive'),
		test("[World]<-p()",'positive'),
		test("[World]<-p(A,B,C)",'positive'),
		test("[World]<-p(A,B,C*)",'positive'),
		-----
		test("[my_slot]<-100",'positive'),
		test("[my_slot]<-100{x:300,y:500,z:700}",'positive'),
		test("[my_slot]<100{x:300,y:500,z:700}",'positive'),
		test("[World]<-100",'positive'),
		test("[World]<-100{x:300,y:500,z:700}",'positive'),
		test("[World]<100{x:300,y:500,z:700}",'positive'),
		-----
		test("[my_slot[A,B,C]]<-p()",'positive'),
		test("[World[A,B,C]]<-p()",'positive'),
		test("[my_slot[A,B,C]100]<-p()",'negative'),
		test("[World[A,B,C]100]<-p()",'negative'),
		-----
		test("[my_slot]<<p",'positive'),
		test("[my_slot]<<p()",'positive'),
		test("[my_slot]<<p(A,B,C)",'positive'),
		test("[my_slot]<<p(A,B,C*)",'positive'),
		test("[World]<<p",'positive'),
		test("[World]<<p()",'positive'),
		test("[World]<<p(A,B,C)",'positive'),
		test("[World]<<p(A,B,C*)",'positive'),
		-----
		test("[my_slot]<<1",'negative'),
		test("[my_slot]<<1{x:300,y:500,z:700}",'positive'),
		test("[World]<<1",'negative'),
		test("[World]<<1{x:300,y:500,z:700}",'positive'),
		-----
		test("[my_slot[A,B,C]]<<p()",'positive'),
		test("[World[A,B,C]]<<p()",'positive'),
		test("[my_slot[A,B,C]100]<<p()",'negative'),
		test("[World[A,B,C]100]<<p()",'negative'),
		-----
		test("my_slot[<-]p",'positive'),
		test("my_slot[<-]p()",'positive'),
		test("my_slot[<-]p(A,B,C)",'positive'),
		test("my_slot[<-]p(A,B,C*)",'positive'),
		test("World[<-]p",'positive'),
		test("World[<-]p()",'positive'),
		test("World[<-]p(A,B,C)",'positive'),
		test("World[<-]p(A,B,C*)",'positive'),
		-----
		test("my_slot[<-]1",'negative'),
		test("my_slot[<-]1{x:300,y:500,z:700}",'positive'),
		test("World[<-]1",'negative'),
		test("World[<-]1{x:300,y:500,z:700}",'positive'),
		-----
		test("my_slot[A,B,C][<-]p()",'positive'),
		test("World[A,B,C][<-]p()",'positive'),
		test("my_slot[A,B,C]100[<-]p()",'negative'),
		test("World[A,B,C]100[<-]p()",'negative'),
		-----
		test("my_slot[<<]p",'positive'),
		test("my_slot[<<]p()",'positive'),
		test("my_slot[<<]p(A,B,C)",'positive'),
		test("my_slot[<<]p(A,B,C*)",'positive'),
		test("World[<<]p",'positive'),
		test("World[<<]p()",'positive'),
		test("World[<<]p(A,B,C)",'positive'),
		test("World[<<]p(A,B,C*)",'positive'),
		-----
		test("my_slot[<<]1",'negative'),
		test("my_slot[<<]1{x:300,y:500,z:700}",'positive'),
		test("World[<<]1",'negative'),
		test("World[<<]1{x:300,y:500,z:700}",'positive'),
		-----
		test("my_slot[A,B,C][<<]p()",'positive'),
		test("World[A,B,C][<<]p()",'positive'),
		test("my_slot[A,B,C]100[<<]p()",'negative'),
		test("World[A,B,C]100[<<p]()",'negative'),
		-----
		test("[my_slot][<-]p",'positive'),
		test("[my_slot][<-]p()",'positive'),
		test("[my_slot][<-]p(A,B,C)",'positive'),
		test("[my_slot][<-]p(A,B,C*)",'positive'),
		test("[World][<-]p",'positive'),
		test("[World][<-]p()",'positive'),
		test("[World][<-]p(A,B,C)",'positive'),
		test("[World][<-]p(A,B,C*)",'positive'),
		-----
		test("[my_slot][<-]1",'negative'),
		test("[my_slot][<-]1{x:300,y:500,z:700}",'positive'),
		test("[World][<-]1",'negative'),
		test("[World][<-]1{x:300,y:500,z:700}",'positive'),
		-----
		test("[my_slot[A,B,C]][<-]p()",'positive'),
		test("[World[A,B,C]][<-]p()",'positive'),
		test("[my_slot[A,B,C]100][<-]p()",'negative'),
		test("[World[A,B,C]100][<-]p()",'negative'),
		-----
		test("[my_slot][<<]p",'positive'),
		test("[my_slot][<<]p()",'positive'),
		test("[my_slot][<<]p(A,B,C)",'positive'),
		test("[my_slot][<<]p(A,B,C*)",'positive'),
		test("[World][<<]p",'positive'),
		test("[World][<<]p()",'positive'),
		test("[World][<<]p(A,B,C)",'positive'),
		test("[World][<<]p(A,B,C*)",'positive'),
		-----
		test("[my_slot][<<]1",'negative'),
		test("[my_slot][<<]1{x:300,y:500,z:700}",'positive'),
		test("[World][<<]1",'negative'),
		test("[World][<<]1{x:300,y:500,z:700}",'positive'),
		-----
		test("[my_slot[A,B,C]][<<]p()",'positive'),
		test("[World[A,B,C]][<<]p()",'positive'),
		test("[my_slot[A,B,C]100][<<]p()",'negative'),
		test("[World[A,B,C]100][<<]p()",'negative')
		],N1,N2,NumberOfErrors1,NumberOfErrors2),
	test_loop([
		title("Additional check I"),
		-----
		test("my_slot[A,B,C]?p()",'positive'),
		test("my_slot[A,B,C]?element(D,E,F,G)",'positive'),
		test("my_slot[A,B,C]?element(D,E,F,G) > 100",'positive'),
		test("my_slot?element(D,E,F,G)",'positive'),
		test("my_slot?element(D,E,F,G) > 100",'positive'),
		test("my_slot[A,my_slot[B],C]?p()",'positive'),
		test("my_slot[A,B,C]<<p()",'positive'),
		test("my_slot[A,B,C]<-p()",'positive'),
		test("my_slot[A,B,C]?p()",'positive'),
		test("my_slot[A,B,C][<<]p()",'positive'),
		test("my_slot[A,B,C][<-]p()",'positive'),
		test("my_slot?p()",'positive'),
		test("my_slot[<<]p()",'positive'),
		test("my_slot[<-]p()",'positive'),
		test("my_slot[A,B,C][<<]p()",'positive'),
		test("my_slot[A,B,C][<-]p()",'positive'),
		test("my_slot[A,B,C]<100",'positive'),
		test("my_slot[A,B,C]<-100",'positive'),
		test("my_slot[A,B,C]>100",'positive'),
		test("my_slot<<p()",'positive'),
		test("my_slot<-p()",'positive'),
		test("my_slot<-100",'positive'),
		-----
		test("my_slot[A,B,C]<-100",'positive'),
		test("my_slot[A,B,C]?p()",'positive'),
		test("my_slot[A,B,C]?p()*100<=300",'positive'),
		test("my_slot[A,B,C]?p()/100<=300",'positive'),
		test("my_slot[A,B,C]?p()+100<=300",'positive'),
		test("my_slot?p()-100<=300",'positive'),
		test("my_slot?p()*100<=300",'positive'),
		test("my_slot?p()/100<=300",'positive'),
		test("my_slot?p()+100<=300",'positive'),
		test("my_slot?p()-100<=300",'positive'),
		-----
		test("my_slot[A,B,C]?p()==100",'positive'),
		test("my_slot[A,B,C]?p():=100",'positive'),
		test("my_slot[A,B,C]?p()<100",'positive'),
		test("my_slot[A,B,C]?p()>100",'positive'),
		test("my_slot[A,B,C]?p()<>100",'positive'),
		test("my_slot[A,B,C]?p()<=100",'positive'),
		test("my_slot[A,B,C]?p()>=100",'positive'),
		test("my_slot?p()==100",'positive'),
		test("my_slot?p():=100",'positive'),
		test("my_slot?p()<100",'positive'),
		test("my_slot?p()>100",'positive'),
		test("my_slot?p()<>100",'positive'),
		test("my_slot?p()<=100",'positive'),
		test("my_slot?p()>=100",'positive'),
		-----
		test("my_slot[A,B,C]?p()<-100",'positive'),
		test("my_slot?p()<-100",'positive'),
		-----
		test("my_slot[A,B,C]?p()",'positive'),
		test("my_slot?p()",'positive'),
		-----
		test("my_slot[A,B,C]?p():=100",'positive'),
		test("my_slot[A,B,C]?p()<100",'positive'),
		test("my_slot[A,B,C]?p()>100",'positive'),
		test("my_slot[A,B,C]?p()<>100",'positive'),
		test("my_slot[A,B,C]?p()<=100",'positive'),
		test("my_slot[A,B,C]?p()>=100",'positive'),
		-----
		test("my_slot[A,B,C]*100<300",'positive'),
		test("my_slot[A,B,C]/100<300",'positive'),
		test("my_slot[A,B,C]+100<300",'positive'),
		test("my_slot[A,B,C]-100<300",'positive'),
		test("my_slot*100<300",'positive'),
		test("my_slot/100<300",'positive'),
		test("my_slot+100<300",'positive'),
		test("my_slot-100<300",'positive'),
		-----
		test("my_slot[A,B,C]==100",'positive'),
		test("my_slot[A,B,C]:=100",'positive'),
		test("my_slot[A,B,C]<100",'positive'),
		test("my_slot[A,B,C]>100",'positive'),
		test("my_slot[A,B,C]<>100",'positive'),
		test("my_slot[A,B,C]<=100",'positive'),
		test("my_slot[A,B,C]>=100",'positive'),
		-----
		test("my_slot==100",'positive'),
		test("my_slot:=100",'positive'),
		test("my_slot<100",'positive'),
		test("my_slot>100",'positive'),
		test("my_slot<>100",'positive'),
		test("my_slot<=100",'positive'),
		test("my_slot>=100",'positive'),
		-----
		test("my_slot[A,B,C]<<p()",'positive'),
		test("my_slot[A,B,C]<-p()",'positive'),
		test("my_slot<<p()",'positive'),
		test("my_slot<-p()",'positive'),
		-----
		test("my_slot[A,B,C]",'positive'),
		-----
		test("p()*100<300",'negative'),
		test("p(A,B,C)*100<300",'positive'),
		test("p(A,B,C)/100<300",'positive'),
		test("p(A,B,C)+100<300",'positive'),
		test("p(A,B,C)-100<300",'positive'),
		test("p(A,B,C)==100",'positive'),
		test("p(A,B,C):=100",'positive'),
		test("p(A,B,C)<100",'positive'),
		test("p(A,B,C)>100",'positive'),
		test("p(A,B,C)<>100",'positive'),
		test("p(A,B,C)<=100",'positive'),
		test("p(A,B,C)>=100",'positive'),
		test("p(A,B,C)<-100",'positive'),
		test("p(A,B,C)<-q()",'negative'),
		-----
		test("p(A,B,C)",'positive'),
		test("p()",'positive'),
		test("p{x:1,y:2,z:3}",'positive'),
		test("{x:1,y:2,z:3}",'positive'),
		test("my_slot{x:1,y:2,z:3}",'positive')
		],N2,N3,NumberOfErrors2,NumberOfErrors3),
	test_loop([
		title("Additional check II"),
		-----
		test("A:=B",'positive'),
		test("A+B*C<A-B/D",'positive'),
		test("A[1,2,3]",'positive'),
		test("_[A,B,C]?p(A,B,C)",'negative'),
		test("World<-100",'positive'),
		test("World<100{x:300,y:500,z:700}",'positive'),
		-----
		test("ARRAY[A,B,C]?p()",'positive'),
		test("ARRAY[A,B,C]?element(D,E,F,G)",'positive'),
		test("ARRAY[A,B,C]?element(D,E,F,G) > 100",'positive'),
		test("ARRAY?element(D,E,F,G)",'positive'),
		test("ARRAY?element(D,E,F,G) > 100",'positive'),
		test("ARRAY[A,ARRAY[B],C]?p()",'positive'),
		test("ARRAY[A,B,C]<<p()",'positive'),
		test("ARRAY[A,B,C]<-p()",'positive'),
		test("ARRAY[A,B,C]?p()",'positive'),
		test("ARRAY[A,B,C][<<]p()",'positive'),
		test("ARRAY[A,B,C][<-]p()",'positive'),
		test("ARRAY?p()",'positive'),
		test("ARRAY[<<]p()",'positive'),
		test("ARRAY[<-]p()",'positive'),
		test("ARRAY[A,B,C][<<]p()",'positive'),
		test("ARRAY[A,B,C][<-]p()",'positive'),
		test("ARRAY[A,B,C]<100",'positive'),
		test("ARRAY[A,B,C]<-100",'positive'),
		test("ARRAY[A,B,C]>100",'positive'),
		test("ARRAY<<p()",'positive'),
		test("ARRAY<-p()",'positive'),
		test("ARRAY<-100",'positive'),
		-----
		test("ARRAY[A,B,C]<-100",'positive'),
		test("ARRAY[A,B,C]?p()",'positive'),
		test("ARRAY[A,B,C]?p()*100<=300",'positive'),
		test("ARRAY[A,B,C]?p()/100<=300",'positive'),
		test("ARRAY[A,B,C]?p()+100<=300",'positive'),
		test("ARRAY?p()-100<=300",'positive'),
		test("ARRAY?p()*100<=300",'positive'),
		test("ARRAY?p()/100<=300",'positive'),
		test("ARRAY?p()+100<=300",'positive'),
		test("ARRAY?p()-100<=300",'positive'),
		-----
		test("ARRAY[A,B,C]?p()==100",'positive'),
		test("ARRAY[A,B,C]?p():=100",'positive'),
		test("ARRAY[A,B,C]?p()<100",'positive'),
		test("ARRAY[A,B,C]?p()>100",'positive'),
		test("ARRAY[A,B,C]?p()<>100",'positive'),
		test("ARRAY[A,B,C]?p()<=100",'positive'),
		test("ARRAY[A,B,C]?p()>=100",'positive'),
		test("ARRAY?p()==100",'positive'),
		test("ARRAY?p():=100",'positive'),
		test("ARRAY?p()<100",'positive'),
		test("ARRAY?p()>100",'positive'),
		test("ARRAY?p()<>100",'positive'),
		test("ARRAY?p()<=100",'positive'),
		test("ARRAY?p()>=100",'positive'),
		-----
		test("ARRAY[A,B,C]?p()<-100",'positive'),
		test("ARRAY?p()<-100",'positive'),
		-----
		test("ARRAY[A,B,C]?p()",'positive'),
		test("ARRAY?p()",'positive'),
		-----
		test("ARRAY[A,B,C]?p():=100",'positive'),
		test("ARRAY[A,B,C]?p()<100",'positive'),
		test("ARRAY[A,B,C]?p()>100",'positive'),
		test("ARRAY[A,B,C]?p()<>100",'positive'),
		test("ARRAY[A,B,C]?p()<=100",'positive'),
		test("ARRAY[A,B,C]?p()>=100",'positive'),
		-----
		test("ARRAY[A,B,C]*100<300",'positive'),
		test("ARRAY[A,B,C]/100<300",'positive'),
		test("ARRAY[A,B,C]+100<300",'positive'),
		test("ARRAY[A,B,C]-100<300",'positive'),
		test("ARRAY*100<300",'positive'),
		test("ARRAY/100<300",'positive'),
		test("ARRAY+100<300",'positive'),
		test("ARRAY-100<300",'positive'),
		-----
		test("ARRAY[A,B,C]==100",'positive'),
		test("ARRAY[A,B,C]:=100",'positive'),
		test("ARRAY[A,B,C]<100",'positive'),
		test("ARRAY[A,B,C]>100",'positive'),
		test("ARRAY[A,B,C]<>100",'positive'),
		test("ARRAY[A,B,C]<=100",'positive'),
		test("ARRAY[A,B,C]>=100",'positive'),
		-----
		test("ARRAY==100",'positive'),
		test("ARRAY:=100",'positive'),
		test("ARRAY<100",'positive'),
		test("ARRAY>100",'positive'),
		test("ARRAY<>100",'positive'),
		test("ARRAY<=100",'positive'),
		test("ARRAY>=100",'positive'),
		-----
		test("ARRAY[A,B,C]<<p()",'positive'),
		test("ARRAY[A,B,C]<-p()",'positive'),
		test("ARRAY<<p()",'positive'),
		test("ARRAY<-p()",'positive'),
		-----
		test("ARRAY[A,B,C]",'positive'),
		-----
		test("p()*100<300",'negative'),
		test("p(A,B,C)*100<300",'positive'),
		test("p(A,B,C)/100<300",'positive'),
		test("p(A,B,C)+100<300",'positive'),
		test("p(A,B,C)-100<300",'positive'),
		test("p(A,B,C)==100",'positive'),
		test("p(A,B,C):=100",'positive'),
		test("p(A,B,C)<100",'positive'),
		test("p(A,B,C)>100",'positive'),
		test("p(A,B,C)<>100",'positive'),
		test("p(A,B,C)<=100",'positive'),
		test("p(A,B,C)>=100",'positive'),
		test("p(A,B,C)<-100",'positive'),
		test("p(A,B,C)<-q()",'negative'),
		-----
		test("p(A,B,C)",'positive'),
		test("p()",'positive'),
		test("p{x:1,y:2,z:3}",'positive'),
		test("{x:1,y:2,z:3}",'positive'),
		test("ARRAY{x:1,y:2,z:3}",'positive')
		],N3,N4,NumberOfErrors3,NumberOfErrors4),
	test_loop([
		title("Additional check III"),
		-----
		test("-(A+B)",'negative'),
		test("A+B",'negative'),
		test("-(A)",'negative'),
		test("-(100)",'negative'),
		test("-(A+B)*C<100",'positive'),
		test("-(A+B)/C<100",'positive'),
		test("-(A+B)+C<100",'positive'),
		test("-(A+B)-C<100",'positive'),
		test("-(A+B)==100",'positive'),
		test("-(A+B):=100",'positive'),
		test("-(A+B)<100",'positive'),
		test("-(A+B)<-100",'positive'),
		test("-(A+B)<-(C)",'positive'),
		test("-(A+B)<-100{i:X,j:Y}",'negative'),
		test("-(A+B)>100",'positive'),
		test("-(A+B)<>100",'positive'),
		test("-(A+B)<=100",'positive'),
		test("-(A+B)>=100",'positive')
		],N4,N5,NumberOfErrors4,NumberOfErrors5),
	test_loop([
		title("Additional check IV"),
		-----
		test("[_|X] == Y",'positive'),
		test("[X,Y,Z] == L",'positive'),
		test("[H|R] == L",'positive'),
		test("[X,Y,Z]",'positive'),
		test("[X,Y,Z|R]",'negative')
		],N5,N6,NumberOfErrors5,NumberOfErrors6),
	test_loop([
		title("Additional check V"),
		-----
		test("self?(A<C)",'positive'),
		test("self?(1>2)",'positive'),
		test("self?(A*B<=C)",'positive'),
		test("my_slot?(A*B>=C)",'positive'),
		test("my_slot?'<>'(A*B,C)",'positive'),
		test("W?(A*B<C)",'positive'),
		test("my_slot[X,Y,Z]?(A*B<=C)",'positive'),
		test("my_slot[1,2,3]?(1>=2)",'positive'),
		test("W[X,Y,Z]?(A*B<C)",'positive'),
		test("?(A*B>=C)",'positive'),
		test("self?(1==2)",'negative'),
		test("W?(A:=B)",'negative'),
		test("r(my_slot?(1*2<1))",'negative'),
		test("r(my_slot?(1+2))",'negative'),
		test("my_slot ? ?'*'(A,B) < C",'negative'),
		test("W ? ?'*'(A,B) < C",'negative'),
		test("my_slot[X,Y,Z] ? ?'*'(A,B) < C",'negative'),
		test("W[X,Y,Z] ? ?'*'(A,B) < C",'negative')
		],N6,_,NumberOfErrors6,NumberOfErrors7),
	report_total_results(NumberOfErrors7).
--
test_loop([Test|Rest],N1,N3,E1,E3):-
	test_example(Test,N1,N2,E1,E2),
	test_loop(Rest,N2,N3,E2,E3).
test_loop([],N,N,NumberOfErrors,NumberOfErrors).
--
test_example(title(Text),N,N,E,E):-!,
	set_text_color('Black'),
	writeln("===== TESTING ",
		?upper(Text),
		" =====").
test_example(test(Text,ExpectedResult),N,N+1,E1,E2):-
	set_text_color('Black'),
	writeln("Test #",N,":"),
	test_bench ? parse_text(Text),!,
	report_positive_result(ExpectedResult,E1,E2).
test_example(test(_,ExpectedResult),N,N+1,E1,E2):-
	report_negative_result(ExpectedResult,E1,E2).
--
parse_text(Text):-
	parser ? forget_parsed_variable_names,
	parser ? clear_function_call_table,
	parser ? scan_text(Text),
	TP== parser?pop_subgoal(Term),
	parser ? check_end_of_text(),
	VariableNames== parser?get_parsed_variable_names(),
	set_text_color('Black'),
	write("\tText:           "),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("\tPosition:       "),
	set_text_color('Violet'),
	writeln(TP),
	set_text_color('Black'),
	write("\tSubgoal:        "),
	set_text_color('RoyalBlue'),
	writeln(Term),
	set_text_color('Black'),
	write("\tPretty subgoal: "),
	Mode1== {
		print_text_positions:'yes',
		variable_names:VariableNames,
		unroll_function_calls:'yes'},
	report ? print_subgoal(Term,Mode1),
	nl,
	set_text_color('Black'),
	write("\tPretty subgoal: "),
	Table== parser?get_function_call_table(),
	Mode2== {
		print_text_positions:'no',
		variable_names:VariableNames,
		unroll_function_calls:'no',
		function_call_table:Table},
	report ? print_subgoal(Term,Mode2),
	nl.
--
report_positive_result('positive',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_positive_result('negative',E,E+1):-!,
	set_text_color('Red'),
	writeln("False positive!").
--
report_negative_result('negative',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_negative_result('positive',E,E+1):-!,
	set_text_color('Red'),
	writeln("False negative!").
--
report_total_results(0):-!,
	set_text_color('DkGreen'),
	writeln("All tests are completed with success.").
report_total_results(NumberOfErrors):-
	set_text_color('Red'),
	writeln("One or more tests are completed with failure."),
	writeln("Number of test failures: ",NumberOfErrors,".").
--
alarm(Exception,_,Text):-
	set_text_color('Black'),
	write("\tText:           "),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("\tError:          "),
	set_text_color('Orange'),
	writeln(Exception).
]
---------------------------------------------------------------------
