---------------------------------------------------------------------
-- (c) 2019 Alexei A. Morozov                                      --
-- Actor Prolog self-compiling compiler                            --
---------------------------------------------------------------------
import 'ActorPrologBacktrackableParser'
	from "morozov/ActorPrologSyntax";
import 'PrettyPrinter'
	from "PrettyPrinter";
---------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
internal:
--
	parser		= ('ActorPrologBacktrackableParser',
				slot_names=['my_slot']);
	test_bench	= ('Trap',
				world=self,
				handler=self);
	report		= ('PrettyPrinter',
				report=self,
				color_text='Black');
--
[
goal:-!,
	test_loop([
		title("Data items"),
		title("Simple terms"),
		title("Constants"),
		test("'symbol'",'positive'),
		test("100",'positive'),
		test("-100",'positive'),
		test("- 100",'positive'),
		test("- /*/ 100",'positive'),
		test("-10#3.14#",'negative'),
		test("- 16#ABCD#",'negative'),
		test("- /**/ 2#010101#",'negative'),
		test("2#100#",'positive'),
		test("16#FFFF#",'positive'),
		test("30.14",'positive'),
		test("16#FF.FF#",'positive'),
		test("\"text1\"",'positive'),
		test("\"text1\"\"text2\"\"text3\"",'positive'),
		test("\"text1\"/**/\"text2\"",'positive'),
		test("\"abc\"\n\"defg\"",'positive'),
		test("\"abc\\\"\\n\\\"defg\"",'positive'),
		test("\"abc\ndefg\"",'negative'),
		test("~ABCD",'positive'),
		test("~AB~CD",'positive'),
		test("~AB/**/~CD",'positive'),
		test("~ABC",'negative'),
		test("~A__B",'negative'),
		test("~AB_",'negative'),
		test("~_AB",'negative'),
		test("~AB_CD",'positive'),
		test("~AB_C",'negative'),
		test("~",'negative'),
		test("#",'positive'),
		title("Metavariables"),
		test("Metavariable",'negative'),
		title("Parameters"),
		test("my_slot",'negative'),
		test("NEW_VARIABLE",'negative'),
		test("_",'negative'),
		title("A Sequence of Simple Terms"),
		test(	"VARIABLE1, 'symbol', 2#0100_1100#,"
			" -34.0e-9, \"A\" \"TEXT\" \"LINE\\n\"",
			'negative'),
		title("Compound terms"),
		title("Structures"),
		test("f(10,[30,50.0,70],'name')",'positive'),
		test("f(100)",'positive'),
		test("f()",'negative'),
		test("f(10,)",'negative'),
		test("f(,20)",'negative'),
		test("f(A,B,C)",'negative'),
		test("f(A,B,C*)",'negative'),
		test("f(_,_,_)",'negative'),
		test("f(_,_,_*)",'negative'),
		test(	"g1(1+2,X,Y), functor(i(1-(R*12),2,3),"
			"4,k(5),Z), h(J)",'negative'),
		test(	"g1('+'(1,2),X,Y), "
			"functor(i('-'(1,('*'(R,12)),2,3),"
			"4,k(5),Z), h(J)",'negative'),
		title("Lists"),
		test("[1,2,3]",'positive'),
		test("[]",'positive'),
		test(	"[17,_,\"item_of_list\",321,93,_], "
			"['+'(X,721),Y,'+'(R,H),Z|R], []",
			'negative'),
		test("[1,2,3|Rest]",'negative'),
		test("[|Rest]",'negative'),
		test("[1,2",'negative'),
		test("[,2]",'negative'),
		test("[1,,2]",'negative'),
		test("[|Rest",'negative'),
		test("[VarName,'symbol']",'negative'),
		test("[10,20,30|Rest]",'negative'),
		title("Underdetermined sets"),
		test("{x:10,y:20,z:\"String\"}",'positive'),
		test("{'a','b',c:30}",'negative'),
		test("{'a',b,c:30}",'negative'),
		test("{1,2,3:30}",'negative'),
		test("{1,2,3,4,5}",'negative'),
		test("{'my_slot':3}",'positive'),
		test("{my_slot:3}",'negative'),
		test("{my_slot}",'negative'),
		test("{'my_slot'}",'negative'),
		test("100{a:300,b:500}",'positive'),
		test("100{a:300,0:500}",'negative'),
		test("'symbol'{x:100}",'positive'),
		test("10_000{x:100}",'positive'),
		test("[-10_000{x:100}]",'negative'),
		test("3.14{x:100}",'positive'),
		test("[-3.14{x:100}]",'negative'),
		test("{a:-3.14{x:100}}",'negative'),
		test("\"text\"{x:100}",'positive'),
		test("#{x:100}",'positive'),
		test("\"Name\"{x:100}",'positive'),
		test("\"Na\"/*/\"me\"{x:100}",'positive'),
		test("\"Na\"/*/\"m\"\"e\"{x:100}",'positive'),
		test("~ABCD{x:100}",'positive'),
		test("~AB~CD{x:100}",'positive'),
		test("~AB/**/~CD{x:100}",'positive'),
		test("V{x:100}",'negative'),
		test("_{x:100}",'negative'),
		test("my_slot{x:100}",'positive'),
		test("{a:30|Tail}",'negative'),
		test("{|Tail}",'negative'),
		test("{a:30|my_slot}",'negative'),
		test("{x:1,y:3,x:1}",'negative'),
		test("'symbol'{x:100,0:700}",'negative'),
		test("10_000{x:100,0:700}",'negative'),
		test("3.14{x:100,0:700}",'negative'),
		test("\"text\"{x:100,0:700}",'negative'),
		test("#{x:100,0:700}",'negative'),
		test("V{x:100,0:700}",'negative'),
		test("my_slot{x:100,0:700}",'negative'),
		test("{a:-30,3:-50}",'positive'),
		test("{-1:-1}",'negative'),
		title("A Sequence of Compound Terms"),
		test(	"R2{x:17,y:-1,w:'+'(1,X),'z',5:'yes'}, "
			"{q:Y,e:W,symbol:_,k:0|W}, {}",
			'negative'),
		test(	"R2{x:17,y:-(1+X),'z',5:'yes'}, "
			"{q:Y,e:W,symbol:_,k:0|W}, {}",
			'negative'),
		test(	"R2{x:17,y:-1,w:'+'(1,X),'z',5:'yes'}, "
			"{q:Y,e:W,symbol:_,k:0|W}, {}",
			'negative'),
		title("Function Calls"),
		test("?p",'negative'),
		test("f(?p)",'negative'),
		test("p",'negative'),
		test("?p()",'negative'),
		test("f(?p())",'negative'),
		test("?p(A,B,C)",'negative'),
		test("f(?p(A,B,C))",'negative'),
		test("?p(A,B,C*)",'negative'),
		test("f(?p(A,B,C*))",'negative'),
		test("p?()",'negative'),
		test("my_slot?p",'negative'),
		test("p(my_slot?p)",'negative'),
		test("f(my_slot<-p)",'negative'),
		test("f(my_slot<<p)",'negative'),
		test("my_slot?p()",'negative'),
		test("p(my_slot?p())",'negative'),
		test("my_slot?p(A,B,C)",'negative'),
		test("f(my_slot?p(A,B,C))",'negative'),
		test("my_slot?p(A,B,C*)",'negative'),
		test("f(my_slot?p(A,B,C*))",'negative'),
		test("symbol?p()",'negative'),
		test("WORLD?p",'negative'),
		test("f(WORLD?p)",'negative'),
		test("_?p",'negative'),
		test("f(_?p)",'negative'),
		test("WORLD?p()",'negative'),
		test("f(WORLD?p())",'negative'),
		test("WORLD?p(A,B,C)",'negative'),
		test("f(WORLD?p(A,B,C))",'negative'),
		test("WORLD?p(A,B,C*)",'negative'),
		test("f(WORLD?p(A,B,C*))",'negative'),
		test("_?p()",'negative'),
		test("my_slot[1,2,3]",'negative'),
		test("f(my_slot[1,2,3])",'negative'),
		test("my_slot[A,B,C]",'negative'),
		test("f(my_slot[A,B,C])",'negative'),
		test("my_slot[A,B,C*]",'negative'),
		test("symbol[1,2,3]",'negative'),
		test("ARRAY[1,2,3]",'negative'),
		test("f(ARRAY[1,2,3])",'negative'),
		test("f(_[1,2,3])",'negative'),
		test("_[1,2,3]",'negative'),
		test("my_slot[1,2,3]?p(7,8,9)",'negative'),
		test("f(my_slot[1,2,3]?p(7,8,9))",'negative'),
		test("my_slot[1,2,3]?p(A,B,C)",'negative'),
		test("f(my_slot[1,2,3]?p(A,B,C))",'negative'),
		test("my_slot[A,B,C*]?p(A,B,C)",'negative'),
		test("f(my_slot[A,B,C*]?p(A,B,C))",'negative'),
		test("ARRAY[1,2,3]?p(7,8,9)",'negative'),
		test("f(ARRAY[1,2,3]?p(7,8,9))",'negative'),
		test("ARRAY[1,2,3]?p(A,B,C)",'negative'),
		test("f(ARRAY[1,2,3]?p(A,B,C))",'negative'),
		test("ARRAY[A,B,C*]?p(A,B,C)",'negative'),
		test("f(ARRAY[A,B,C*]?p(A,B,C))",'negative'),
		test("[100|?append()]",'negative'),
		test("[100|self?p()]",'negative'),
		test("[100|my_slot?p(A,B,C*)]",'negative'),
		test("[100|?p(A,B,C)]",'negative'),
		test("{x:1|?append()}",'negative'),
		test("{x:1|self?p()}",'negative'),
		test("{x:1|my_slot?p(A,B,C*)}",'negative'),
		test("{x:1|?p(A,B,C)}",'negative'),
		test("[100|W?p()]",'negative'),
		test("{x:1|W?p()}",'negative'),
		test("{x:1|W?{x:1,y:2,z:3}}",'negative'),
		test("{x:1|W?{x:100}}",'negative'),
		test("{x:1|W?100{x:300}}",'negative')
		],1,0,NumberOfErrors),
	report_total_results(NumberOfErrors).
--
test_loop([Test|Rest],N1,E1,E3):-
	test_example(Test,N1,N2,E1,E2),
	test_loop(Rest,N2,E2,E3).
test_loop([],_,NumberOfErrors,NumberOfErrors).
--
test_example(title(Text),N,N,E,E):-!,
	set_text_color('Black'),
	writeln("===== TESTING ",
		?upper(Text),
		" =====").
test_example(test(Text,ExpectedResult),N,N+1,E1,E2):-
	set_text_color('Black'),
	writeln("Test #",N,":"),
	test_bench ? parse_text(Text),!,
	report_positive_result(ExpectedResult,E1,E2).
test_example(test(_,ExpectedResult),N,N+1,E1,E2):-
	report_negative_result(ExpectedResult,E1,E2).
--
parse_text(Text):-
	parser ? forget_parsed_variable_names,
	parser ? clear_function_call_table,
	parser ? scan_text(Text),
	TP== parser?pop_ground_term(Term),
	parser ? check_end_of_text(),
	set_text_color('Black'),
	write("\tText:      "),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("\tPosition:  "),
	set_text_color('Violet'),
	writeln(TP),
	set_text_color('Black'),
	write("\tTerm:      "),
	set_text_color('RoyalBlue'),
	writeln(Term),
	print_meta_term(Term),
	nl.
--
print_meta_term(Value):-
	Term== ?val("MetaTerm",Value),!,
	VariableNames== parser?get_parsed_variable_names(),
	set_text_color('Black'),
	write("\tMeta term: "),
	Table== parser?get_function_call_table(),
	Mode== {print_text_positions:'yes',
		variable_names:VariableNames,
		unroll_function_calls:'no',
		function_call_table:Table},
	report ? print_term(Term,Mode),
	nl.
print_meta_term(_):-
	write("\t- Is not a meta term.").
--
report_positive_result('positive',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_positive_result('negative',E,E+1):-!,
	set_text_color('Red'),
	writeln("False positive!").
--
report_negative_result('negative',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_negative_result('positive',E,E+1):-!,
	set_text_color('Red'),
	writeln("False negative!").
--
report_total_results(0):-!,
	set_text_color('DkGreen'),
	writeln("All tests are completed with success.").
report_total_results(NumberOfErrors):-
	set_text_color('Red'),
	writeln("One or more tests are completed with failure."),
	writeln("Number of test failures: ",NumberOfErrors,".").
--
alarm(Exception,_,Text):-
	set_text_color('Black'),
	write("\tText:      "),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("\tError:     "),
	set_text_color('Orange'),
	writeln(Exception).
]
---------------------------------------------------------------------
