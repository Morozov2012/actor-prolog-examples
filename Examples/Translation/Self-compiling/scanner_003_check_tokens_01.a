---------------------------------------------------------------------
-- (c) 2019 Alexei A. Morozov                                      --
-- Actor Prolog self-compiling compiler                            --
---------------------------------------------------------------------
import 'ActorPrologScanner' from "morozov/ActorPrologSyntax";
---------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
internal:
--
	scanner		= ('ActorPrologScanner');
--
	test_bench	= ('Trap',
				world=self,
				handler=self);
--
[
goal:-!,
	test_loop([
		title("Alphabet"),
		test("!","!",'positive'),
		test("\"text\"","\"text\"",'positive'),
		test("#","#",'positive'),
		test("'symbol'","'symbol'",'positive'),
		test("(","(",'positive'),
		test(")",")",'positive'),
		test("*","*",'positive'),
		test("+","+",'positive'),
		test(",",",",'positive'),
		test("-","-",'positive'),
		test(".",".",'positive'),
		test("/","/",'positive'),
		test(":",":",'positive'),
		test(";",";",'positive'),
		test("<","<",'positive'),
		test("=","=",'positive'),
		test(">",">",'positive'),
		test("?","?",'positive'),
		test("[","[",'positive'),
		test("\ ","\ ",'positive'),
		test("]","]",'positive'),
		test("_","_",'positive'),
		test("`A","`A",'positive'),
		test("{","{",'positive'),
		test("|","|",'positive'),
		test("}","}",'positive'),
		test("~ABCD","~ABCD",'positive'),
		test(	"! \"text\" # 'symbol' "
			"( ) * + , - "
			". / : ; < = > ? [ \ ] "
			"_ `A { | } ~1234",
			"!\"text\"#'symbol'()*+,-."
			"/:;<=>?[\]_`A{|}~ABCD",
			'positive'),
		title("Vocabulary"),
		test(	"P{a:-7}:-P{/*/b:0}.--1--\n",
			"P { a : - 7 } :- P "
			"{ b : 0 } . /*/ --1--",
			'positive'),
		test(	"<-100 <-() <- 100 <- ()",
			"<- 100 <- ( ) <- 100 <- ( )",
			'positive'),
		title("Tokens"),
		title("Variables"),
		test("A1","A1",'positive'),
		test("_","_",'positive'),
		test("AbC_Ef_H7","AbC_Ef_H7",'positive'),
		test("_7","_7",'positive'),
		test("MyVariable","MyVariable",'positive'),
		test("Variable","",'positive'),
		test("variABLE","",'negative'),
		test("_X_123","_X_123",'positive'),
		test("_X_123_","",'negative'),
		test("_X__123","",'negative'),
		title("Symbols and Keywords"),
		test("symbol","symbol",'positive'),
		test("symbol_","",'negative'),
		test("'ALPHA'","'ALPHA'",'positive'),
		test("'ALPHA","",'negative'),
		test("abc_EF_h","abc_EF_h",'positive'),
		test("abc_EF__h","",'negative'),
		test("''","''",'positive'),
		test("'","",'negative'),
		test("s4734","s4734",'positive'),
		test("specialized","specialized",'positive'),
		test("Specialized","",'positive'),
		test("spEcialized","",'negative'),
		title("Numerical literals"),
		test("13_274","13_274",'positive'),
		test("13__274","",'negative'),
		test("2#1100_0100#E4","2#1100_0100#E4",'positive'),
		test("1#00#","",'negative'),
		test("37#AB#","",'negative'),
		test("2#00#","2#00#",'positive'),
		test("36#AB#","36#AB#",'positive'),
		test("2#1100_0100#E-4","",'negative'),
		test("39.123e100","39.123e100",'positive'),
		test(	"39..123e100",
			"39 .. 123e100",
			'positive'),
		test("8#177_777#","8#177_777#",'positive'),
		test("8#177_787#","",'negative'),
		test("3.217_514e+90","3.217_514e+90",'positive'),
		test("3.217_514e_90","",'negative'),
		test("16#EF93#","16#EF93#",'positive'),
		test(	"36#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ#",
			"36#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ#",
			'positive'),
		test(	"36#0123456789abcdefghijklmnopqrstuvwxyz#",
			"36#0123456789abcdefghijklmnopqrstuvwxyz#",
			'positive'),
		test("16#EF93","",'negative'),
		test("`y","`y",'positive'),
		test("` ","",'negative'),
		test("8#3.51#E-31","8#3.51#E-31",'positive'),
		test("8#3.51-31#","",'negative'),
		test("`A",`A,'positive'),
		test("'A","",'negative'),
		test("10_0",10_0,'positive'),
		test("1_0#1_00#",1_0#1_00#,'positive'),
		test("16#1_0_0#",16#1_0_0#,'positive'),
		test("10#300#e0_3",10#300#e0_3,'positive'),
		test("16#3_00#E3",16#3_00#E3,'positive'),
		test("1_6#A_B_C#e0_0",1_6#A_B_C#e0_0,'positive'),
		test("16#AB_C#e3",16#AB_C#e3,'positive'),
		title("String segments"),
		test(	"\"String \\\"XYZ\\\"\\n\"",
			"\"String \\\"XYZ\\\"\\n\"",'positive'),
		test("\"String \\\"XYZ\\\"\\n","",'negative'),
		test("\"\"","\"\"",'positive'),
		test("\"","",'negative'),
		test(	"\"c:\\\\dos\\\\*.*\"",
			"\"c:\\\\dos\\\\*.*\"",'positive'),
		test("\"\\b\\t\\n\\v\\f\\r\\100\\.\"","",'positive'),
		test(	"\"\\16#AB#\\2#1010#e2\"",
			"\"\\16#AB#\\2#1010#e2\"",'positive'),
		test(	"\"ABC\\64\"",
			"\"ABC\\64\"",
			'positive'),
		test(	"\"ABC\\_64\"",
			"\"ABC\\_64\"",
			'positive'),
		test(	"\"ABC\\@\"",
			"\"ABC\\@\"",
			'positive'),
		test(	"\"ABC\\10#64#\"",
			"\"ABC\\10#64#\"",
			'positive'),
		test("\"ABC\\37#64#\"","",'negative'),
		test("\"ABC\\1#00#\"","",'negative'),
		test("\"ABC\\10#64.0#\"","",'negative'),
		test(	"\"ABC\\10#_64#\"",
			"\"ABC\\10#_64#\"",
			'positive'),
		test(	"\"ABC\\10##\"",
			"\"ABC\\10##\"",
			'positive'),
		test(	"\"ABC\\10#@#\"",
			"\"ABC\\10#@#\"",
			'positive'),
		test("\"ABC\\\"","",'negative'),
		test(	"\"ABC\\64.\"",
			"\"ABC\\64.\"",
			'positive'),
		test(	"\"ABC\\@\"",
			"\"ABC\\@\"",
			'positive'),
		test(	"\"ABC\\10#ABCD#\"",
			"\"ABC\\10#ABCD#\"",
			'positive'),
		test("\"ABC\\10#65536#\"","",'negative'),
		test("\">>>\\16#ABCDEF#<<<\"","",'negative'),
		test("\"\16#12..3#\"","\"\16#12..3#\"",'positive'),
		test("\"\\1#00#\"","",'negative'),
		test("\"\\37#AB#\"","",'negative'),
		test("\"\\2#00#\"","\"\\2#00#\"",'positive'),
		test("\"\\36#AB#\"","\"\\36#AB#\"",'positive'),
		title("Binary Literals"),
		test("~ABCD","~ABCD",'positive'),
		test("~ABC","",'negative'),
		test("~","",'negative'),
		test("~A__B","",'negative'),
		test("~AB_","",'negative'),
		test("~_AB","",'negative'),
		test("~AB_CD","~ABCD",'positive'),
		test("~AB_C","",'negative'),
		test("~~","",'negative'),
		title("Delimiters"),
		test("!","!",'positive'),
		test("#","#",'positive'),
		test("(","(",'positive'),
		test(")",")",'positive'),
		test("*","*",'positive'),
		test("+","+",'positive'),
		test(",",",",'positive'),
		test("-","-",'positive'),
		test(".",".",'positive'),
		test("/","/",'positive'),
		test(":",":",'positive'),
		test(";",";",'positive'),
		test("<","<",'positive'),
		test("=","=",'positive'),
		test(">",">",'positive'),
		test("?","?",'positive'),
		test("[","[",'positive'),
		test("]","]",'positive'),
		test("{","{",'positive'),
		test("|","|",'positive'),
		test("}","}",'positive'),
		test(":-",":-",'positive'),
		test("<<","<<",'positive'),
		test("<-","<-",'positive'),
		test("??","??",'positive'),
		test("==","==",'positive'),
		test(":=",":=",'positive'),
		test("<>","<>",'positive'),
		test("<=","<=",'positive'),
		test(">=",">=",'positive'),
		test("<---Comment\n","",'negative'),
		test("<- --Comment\n","<- --Comment\n",'positive'),
		test(":---Comment\n","",'negative'),
		test(":- --Comment\n",":- --Comment\n",'positive'),
		test(":--Comment\n","",'negative'),
		test(": --Comment\n",": --Comment\n",'positive'),
		test("<--Comment\n","",'negative'),
		test("< --Comment\n","< --Comment\n",'positive'),
		test("- --Comment\n","",'negative'),
		test("-/**/--Comment\n","-/**/--Comment\n",'positive'),
		test("<--","",'negative'),
		test("<- -","<- -",'positive'),
		test(":--","",'negative'),
		test(":- -",":- -",'positive'),
		test("--","",'negative'),
		test("- -","- -",'positive'),
		title("Comments"),
		test("/*MultilineComment*/","",'positive'),
		test("/*Multiline\n\n\nComment*/","",'positive'),
		test("/*/","",'positive'),
		test("/*MultilineComment/","",'negative'),
		test("-- Single-line comment\n","",'positive'),
		test("-- Single-line comment","",'negative')
		],1,0,NumberOfErrors),
	report_total_results(NumberOfErrors).
--
test_loop([Test|Rest],N1,E1,E3):-
	test_example(Test,N1,N2,E1,E2),
	test_loop(Rest,N2,E2,E3).
test_loop([],_,NumberOfErrors,NumberOfErrors).
--
test_example(title(Text),N,N,E,E):-!,
	set_text_color('Black'),
	writeln("===== TESTING ",
		?upper(Text),
		" =====").
test_example(test(Text,Etalon,ExpectedResult),N,N+1,E1,E2):-
	set_text_color('Black'),
	writeln("Test #",N,":"),
	test_bench ? scan_text(Text,Etalon),!,
	report_positive_result(ExpectedResult,E1,E2).
test_example(test(_,_,ExpectedResult),N,N+1,E1,E2):-
	report_negative_result(ExpectedResult,E1,E2).
--
scan_text(Text,Etalon):-
	TL== scanner?convert_to_tokens(Text),
	set_text_color('Black'),
	write("\tText:       "),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("\tTokens:     "),
	set_text_color('RoyalBlue'),
	writeln(TL),
	set_text_color('Black'),
	write("\tEtalon:     "),
	set_text_color('Violet'),
	writeln(Etalon).
--
report_positive_result('positive',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_positive_result('negative',E,E+1):-!,
	set_text_color('Red'),
	writeln("False positive!").
--
report_negative_result('negative',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_negative_result('positive',E,E+1):-!,
	set_text_color('Red'),
	writeln("False negative!").
--
report_total_results(0):-!,
	set_text_color('DkGreen'),
	writeln("All tests are completed with success.").
report_total_results(NumberOfErrors):-
	set_text_color('Red'),
	writeln("One or more tests are completed with failure."),
	writeln("Number of test failures: ",NumberOfErrors,".").
--
alarm(Exception,_,Text,_):-
	set_text_color('Black'),
	write("\tText:       "),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("\tError:      "),
	set_text_color('Orange'),
	writeln(Exception).
]
---------------------------------------------------------------------
