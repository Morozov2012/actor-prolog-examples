---------------------------------------------------------------------
-- (c) 2019 Alexei A. Morozov                                      --
-- Actor Prolog self-compiling compiler                            --
---------------------------------------------------------------------
import 'ActorPrologBacktrackableParser'
	from "morozov/ActorPrologSyntax";
import 'PrettyPrinter'
	from "PrettyPrinter";
---------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
internal:
--
	parser		= ('ActorPrologBacktrackableParser',
				slot_names=[
					'w1','w2','w3',
					'w4','w5','w6',
					'w7','w8']);
	test_bench	= ('Trap',
				world=self,
				handler=self);
	report		= ('PrettyPrinter',
				report=self,
				color_text='Black');
--
[
goal:-!,
	test_loop([
		title("Slot Definitions"),
		test(	"s01=100;\n"
			"visible:\n"
			"s02=3.14;\n"
			"s03=f(A,B,C);\n"
			"private:\n"
			"s04:D1={x:A,y:B,z:C};\n"
			"s05:D2={x:A,y:B,z:C|Rest};\n"
			"visible:\n"
			"private:\n"
			"s06=P{x:A,y:B,z:C};\n"
			"visible:\n"
			"s07=_{x:A,y:B,z:C};\n"
			"s08=P{};\n"
			"s09=_{};\n"
			"s10:D3=[A,B,C|Rest];\n"
			"s11:D4=[A,B,C|s10];\n"
			"protecting:\n"
			"s12=('MyClass',x=1,y=2,z=3);\n"
			"internal:\n"
			"s13=('MyClass',"
				"constant:"
				"x=1,"
				"y=2,"
				"variable:"
				"z=_,"
				"internal:"
				"w=s01,"
				"variable:"
				"suspending:"
				"v=s02,"
				"protecting:"
				"u=s03"
			");\n"
			"s14=('MyClass');\n"
			"s15=(('MyClass',x=1,'y'=2,z=3));",
			'positive'),
		test(	"s01=(('ClassA',"
			"constant:"
			"x=1,"
			"w=('ClassB',"
			"a=100,"
			"internal:"
			"b=('ClassC',"
			"i=R,"
			"variable:"
			"j=_,"
			"k=Q),"
			"c=300),"
			"y=R,"
			"z=Q));",
			'positive'),
		test(	"s01=(('ClassA',"
			"constant:"
			"x=[1,X,Y,Z],"
			"w=(('ClassB',"
			"a=100,"
			"internal:"
			"b=(('ClassC',"
			"i=A,"
			"variable:"
			"j=B,"
			"k=C))??h(A,B,C),"
			"c=300))??g(X,Y,Z),"
			"y=2,"
			"z=3))??f(1,2,3);",
			'positive'),
		test(	"s01=100;\n"
			"s01=3.14;",
			'negative'),
		test(	"s01=100;;",
			'negative'),
		test(	"s01=100;\n"
			"visible\n"
			"s02=3.14;",
			'negative'),
		test(	"s01=100;\n"
			"invisible:\n"
			"s02=3.14;",
			'negative'),
		test(	"visible:\n"
			"constant:\n"
			"s01=(('MyClass',s02,y=2,s04));\n"
			"s02=(('MyClass'));\n"
			"private:\n"
			"s03=(('MyClass'))??f(A,B,C);\n"
			"s04=s01;\n"
			"s05=self;\n"
			"variable:\n"
			"s06=Q1;\n"
			"s07=_;\n"
			"internal:\n"
			"s08=self??f(A,B,C);\n"
			"s09=??f(A,B,C);\n"
			"s10=s02??f(A,B,C);\n"
			"s11=Q1??f(A,B,C);\n"
			"suspending:\n"
			"s12=s02??{x:A,y:B,z:C};\n"
			"s13=s02??{x:A,y:B,z:C|Rest};\n"
			"protecting:\n"
			"s14=s02??P{x:A,y:Rest,z:C};\n"
			"protecting:\n"
			"s15=s02??_{x:A,y:B,z:C};\n"
			"variable:\n"
			"s16=s02??P{};\n"
			"s17=s02??_{};",
			'positive'),
		test(	"s01=(('MyClass',x=1,y=?f(),z=3));",
			'negative'),
		test(	"s01=(('MyClass',x=1,y=A,z=3));",
			'negative'),
		test(	"s01=(('C',a='A'[1..3]of(('B')),b=3));",
			'negative'),
		test(	"s01='Array'[];\n"
			"s02='Array'[1..3,1,2,3,4,5];\n"
			"s03='Array'[-1..3,2..3];\n"
			"s04='Array'[1..3,..,1..,..3];\n"
			"s05='Array'[..];\n"
			"s06='Array'[-10..];\n"
			"s07='Array'[1..3,s01..3,-10..s02,s01..s01];\n"
			"s08='Array'[1..3];\n"
			"s09='Array'['none'..,..'none','none'..'none'];\n"
			"s10='Array'[1..3] of ('Class');\n"
			"s11='Array'[1..3] of "
			"('Class',x=1,y=2,z=3);\n"
			"s13='Array'[1..3] of (('Class'));\n"
			"s14='Array'[1..3] of "
			"(('Class',x=1,y=2,z=3));\n"
			"s16='Array'[1..3] of "
			"(('ClassA',x=(('ClassB')),y=2,z=3));",
			'positive')
		],1,0,NumberOfErrors),
	report_total_results(NumberOfErrors).
--
test_loop([Test|Rest],N1,E1,E3):-
	test_example(Test,N1,N2,E1,E2),
	test_loop(Rest,N2,E2,E3).
test_loop([],_,NumberOfErrors,NumberOfErrors).
--
test_example(title(Text),N,N,E,E):-!,
	set_text_color('Black'),
	writeln("===== TESTING ",
		?upper(Text),
		" =====").
test_example(test(Text,ExpectedResult),N,N+1,E1,E2):-
	set_text_color('Black'),
	writeln("Test #",N,":"),
	test_bench ? parse_text(Text),!,
	report_positive_result(ExpectedResult,E1,E2).
test_example(test(_,ExpectedResult),N,N+1,E1,E2):-
	report_negative_result(ExpectedResult,E1,E2).
--
parse_text(Text):-
	parser ? forget_parsed_variable_names,
	-- parser ? clear_function_call_table,
	parser ? scan_text(Text),
	TP== parser?pop_slot_definitions(SlotList,DomainList),
	parser ? check_end_of_text(),
	SlotNames== parser?get_parsed_slot_names(),
	VariableNames== parser?get_parsed_variable_names(),
	set_text_color('Black'),
	write("     Text:\n"),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("     Slot names:       "),
	set_text_color('Violet'),
	writeln(SlotNames),
	set_text_color('Black'),
	write("     Position:         "),
	set_text_color('Violet'),
	writeln(TP),
	set_text_color('Black'),
	write("     Slot definitions: "),
	set_text_color('RoyalBlue'),
	writeln(SlotList),
	set_text_color('Black'),
	write("     Domain list:      "),
	set_text_color('RoyalBlue'),
	writeln(DomainList),
	Mode== {print_text_positions:'yes',
		variable_names:VariableNames,
		print_position_indent:'yes',
		extra_left_indent:7,
		indent_constructor_arguments:'yes',
		tabulator_size:5},
	report ? print_slot_definitions(
		SlotList,DomainList,Mode).
--
report_positive_result('positive',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_positive_result('negative',E,E+1):-!,
	set_text_color('Red'),
	writeln("False positive!").
--
report_negative_result('negative',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_negative_result('positive',E,E+1):-!,
	set_text_color('Red'),
	writeln("False negative!").
--
report_total_results(0):-!,
	set_text_color('DkGreen'),
	writeln("All tests are completed with success.").
report_total_results(NumberOfErrors):-
	set_text_color('Red'),
	writeln("One or more tests are completed with failure."),
	writeln("Number of test failures: ",NumberOfErrors,".").
--
alarm(Exception,_,Text):-
	set_text_color('Black'),
	write("     Text:\n"),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("     Error:            "),
	set_text_color('Orange'),
	writeln(Exception).
]
---------------------------------------------------------------------
