---------------------------------------------------------------------
-- (c) 2019 Alexei A. Morozov                                      --
-- Actor Prolog self-compiling compiler                            --
---------------------------------------------------------------------
import 'ActorPrologBacktrackableParser'
	from "morozov/ActorPrologSyntax";
import 'PrettyPrinter'
	from "PrettyPrinter";
---------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
internal:
--
	parser		= ('ActorPrologBacktrackableParser');
	test_bench	= ('Trap',
				world=self,
				handler=self);
	report		= ('PrettyPrinter',
				report=self,
				color_text='Black');
--
[
goal:-!,
	test_loop([
		title("Domains"),
		test(	"D1=INTEGER.",
			'positive'),
		test(	"reference:\n"
			"D1,D2=REAL.",
			'positive'),
		test(	"reference\n"
			"D1=INTEGER.",
			'negative'),
		test(	"D1,D2,D1=REAL.",
			'negative'),
		test(	"D1=INTEGER.\n"
			"D2=REAL.\n"
			"D1=STRING.",
			'negative'),
		test(	"D1=INTEGER.\n"
			"D2=REAL.\n"
			"D3,D1=STRING.",
			'negative'),
		test(	"D1,D2,D3=STRING.\n"
			"ground:\n"
			"D4=INTEGER;REAL.\n"
			"reference:\n"
			"D5=STRING;SYMBOL;BINARY.\n"
			"D6='symbol'.\n"
			"lazy:\n"
			"D7=functor(INTEGER).\n"
			"mixed:\n"
			"D8=functor(A,B).\n"
			"D9=functor(A,B,C).",
			'positive'),
		test(	"reference:\n"
			"D1=INTEGER;\n"
			"D2=REAL.",
			'negative'),
		test(	"ground:\n"
			"D1=functor('ClassX').\n"
			"D2=functor('ArrayX'of'ClassY').",
			'positive'),
		test(	"reference:\n"
			"ground:\n"
			"D1=functor(A).\n"
			"lazy:\n"
			"ground:\n"
			"D2=functor(_).\n"
			"mixed:\n"
			"D3=functor(#).",
			'positive'),
		test(	"'ground':\n"
			"D1=functor(_).",
			'negative'),
		test(	"ground:\n"
			"D1=functor(_).\n"
			"mized:\n"
			"D2=functor(#).",
			'negative'),
		test(	"D1='ArrayX'of'ClassY'.\n"
			"D2=MyDomain.\n"
			"D3=f(A,_,C,D,E).\n"
			"D4=D2{}.\n"
			"reference:\n"
			"D5=D2{x:D3,100:D5}.\n"
			"D6=D2*.\n"
			"D7={}.\n"
			"ground:\n"
			"D8={1:A,2:B,3:C}.\n"
			"D9={'x':A,'y':B,'z':C}.\n"
			"D10={_}.\n"
			"D11=#.",
			'positive'),
		test(	"D1=100.\n"
			"D2=-100.\n"
			"D3=16#ABCDEF#.\n"
			"D4=3.14.\n"
			"D5=-3.14.\n"
			"D6=16#ABCD.EF#.\n"
			"D7=\"TEXT\".\n"
			"D8=\"TE\"\"X\"/*/\"T\".\n"
			"D9=~AB_CD_EF.\n"
			"D10=('ClassA').\n"
			"D11=[1..24].\n"
			"ground:\n"
			"reference:\n"
			"D12=[-100..-1].\n"
			"D13=[-1.0..10.0].\n"
			"D14=[-100.0..-1.0].\n"
			"D15=[16#A#..16#F#].\n"
			"D16=[16#0.0#..16#FF.0#].",
			'positive')
		],1,0,NumberOfErrors),
	report_total_results(NumberOfErrors).
--
test_loop([Test|Rest],N1,E1,E3):-
	test_example(Test,N1,N2,E1,E2),
	test_loop(Rest,N2,E2,E3).
test_loop([],_,NumberOfErrors,NumberOfErrors).
--
test_example(title(Text),N,N,E,E):-!,
	set_text_color('Black'),
	writeln("===== TESTING ",
		?upper(Text),
		" =====").
test_example(test(Text,ExpectedResult),N,N+1,E1,E2):-
	set_text_color('Black'),
	writeln("Test #",N,":"),
	test_bench ? parse_text(Text),!,
	report_positive_result(ExpectedResult,E1,E2).
test_example(test(_,ExpectedResult),N,N+1,E1,E2):-
	report_negative_result(ExpectedResult,E1,E2).
--
parse_text(Text):-
	parser ? scan_text(Text),
	TP== parser?pop_domain_definitions(Definitions),
	parser ? check_end_of_text(),
	set_text_color('Black'),
	write("     Text:\n"),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("     Position:  "),
	set_text_color('Violet'),
	writeln(TP),
	set_text_color('Black'),
	write("     Domains:   "),
	set_text_color('RoyalBlue'),
	writeln(Definitions),
	Mode== {print_text_positions:'no',
		print_position_indent:'yes',
		extra_left_indent:0},
	report ? print_domain_definitions(Definitions,Mode).
--
report_positive_result('positive',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_positive_result('negative',E,E+1):-!,
	set_text_color('Red'),
	writeln("False positive!").
--
report_negative_result('negative',E,E):-!,
	set_text_color('DkGreen'),
	writeln("Test O.K.").
report_negative_result('positive',E,E+1):-!,
	set_text_color('Red'),
	writeln("False negative!").
--
report_total_results(0):-!,
	set_text_color('DkGreen'),
	writeln("All tests are completed with success.").
report_total_results(NumberOfErrors):-
	set_text_color('Red'),
	writeln("One or more tests are completed with failure."),
	writeln("Number of test failures: ",NumberOfErrors,".").
--
alarm(Exception,_,Text):-
	set_text_color('Black'),
	write("     Text:\n"),
	set_text_color('DkGray'),
	writeln(Text),
	set_text_color('Black'),
	write("     Error:     "),
	set_text_color('Orange'),
	writeln(Exception).
]
---------------------------------------------------------------------
