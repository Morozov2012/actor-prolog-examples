-----------------------------------------------------------------------
--                                                                   --
-- (c) 2011 IRE RAS Alexei A. Morozov                                --
--                                                                   --
-- Predicate calls testing.                                          --
--                                                                   --
-- Requested: 1 argument, no asterisk.                               --
-- Exists:    1 argument, no asterisk.                               --
-- Flow direction: input.                                            --
--                                                                   --
-----------------------------------------------------------------------
--
DOMAINS:
--
ground:
--
D1	= INTEGER; REAL; SYMBOL; STRING.
--
reference:
--
D2	= INTEGER; REAL; SYMBOL; STRING.
--
lazy:
--
D3	= ('Testbed'); #.
D4	= ('Testbed'); INTEGER; #.
--
-----------------------------------------------------------------------
class 'Main' (specialized 'Alpha'):
--
internal:
--
world1		= ('Test1');
world2		= ('Test2',
			first_test= world1);
world3		= ('Test3',
			second_test= world2);
--
[
]
-----------------------------------------------------------------------
class 'Test1' (specialized 'Testbed'):
--
internal:
--
	con;
--
[
goal:-
	con ? writeln("TEST 1"),
	fail.
--
p(N):-
	con ? writeln("Test1 (1): p/1, N=",N).
--
q(N):-
	con ? writeln("Test1 (2): q/1, N=",N).
--
r(N):-
	con ? writeln("Test1 (3): r/1, N=",N).
--
r(K,N):-
	con ? writeln("Test1 (4): r/2, K=",K,", N=",N).
]
-----------------------------------------------------------------------
class 'Test2' (specialized 'Testbed'):
--
internal:
--
	first_test;
--
	con;
--
[
goal:-
	con ? writeln("TEST 2"),
	fail.
--
M(N):-
	con ? writeln("Test2 (1): M=",M,", N=",N).
--
M(K,N):-
	con ? writeln("Test2 (2): M=",M,", K=",K,", N=",N).
]
-----------------------------------------------------------------------
class 'Test3' (specialized 'Testbed'):
--
internal:
--
	second_test;
--
	con;
--
[
goal:-
	con ? writeln("TEST 3"),
	fail.
--
M(N):-
	con ? writeln("Test3 (1): M=",M,", N=",N),
	second_test ? M(N),
	con ? writeln("Test3 (2): M=",M,", N=",N).
--
M(N,K):-
	con ? writeln("Test3 (3): M=",M,", N=",N,", K=",K),
	second_test ? M(N,K),
	con ? writeln("Test3 (4): M=",M,", N=",N,", K=",K).
]
-----------------------------------------------------------------------
class 'Testbed':
--
internal:
--
	world1	: 'Testbed'	= self;
--
variable:
--
	world21	: D3		= self;
	world22	: D3		= #;
	world23	: D3		= _;
	world24	: D3		= _;
--
	world31	: D4		= self;
	world32	: D4		= #;
	world33	: D4		= -100;
	world34	: D4		= _;
	world35	: D4		= _;
	world36	: D4		= _;
--
internal:
--
	auxiliary_tools		= ('AuxiliaryTools',
					world23,
					world24,
					world34,
					world35,
					world36);
--
	con			= ('Console');
--
[
PREDICATES:
--
-- imperative:
determ:
--
p(D1)			- (i);
q(D2)			- (i);
--
r(D2)			- (i);
r(D4,D2)		- (i,i);
--
CLAUSES:
--
goal:-
	--
	[self] <- p(01),
	[self] <- q(02),
	--
	[world1] <- p(10),
	[world1] <- q(11),
	--
	[world21] <- r(21),
	[world22] <- r(22),
	[world23] <- r(23),
	[world24] <- r(24),
	--
	[world31] <- r(31),
	[world32] <- r(32),
	[world33] <- r(33),
	[world34] <- r(34),
	[world35] <- r(35),
	[world36] <- r(36),
	--
	con ? writeln("I will instantiate the world23 slot."),
	auxiliary_tools ? set_world23(self),
	con ? writeln("I will instantiate the world24 slot."),
	auxiliary_tools ? set_world24(#),
	--
	con ? writeln("I will instantiate the world34 slot."),
	auxiliary_tools ? set_world34(self),
	con ? writeln("I will instantiate the world35 slot."),
	auxiliary_tools ? set_world35(#),
	con ? writeln("I will instantiate the world36 slot."),
	auxiliary_tools ? set_world36(-300),
	--
	con ? writeln("O.K.").
--
alarm(_):-
	fail.
]
-----------------------------------------------------------------------
class 'AuxiliaryTools' (specialized 'Alpha'):
--
variable:
--
	world23	: D3;
	world24	: D3;
--
	world34	: D4;
	world35	: D4;
	world36	: D4;
--
[
PREDICATES:
--
imperative:
--
set_world23(D3)		- (i);
set_world24(D3)		- (i);
--
set_world34(D4)		- (i);
set_world35(D4)		- (i);
set_world36(D4)		- (i);
--
CLAUSES:
--
set_world23(world23):-!.
set_world23(_).
--
set_world24(world24):-!.
set_world24(_).
--
set_world34(world34):-!.
set_world34(_).
--
set_world35(world35):-!.
set_world35(_).
--
set_world36(world36):-!.
set_world36(_).
]
-----------------------------------------------------------------------
