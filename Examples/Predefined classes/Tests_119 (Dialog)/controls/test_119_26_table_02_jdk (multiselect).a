-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2012 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import 'ColoredReport' from "report_toolbox";
-----------------------------------------------------------------------
--
DOMAINS:
--
reference:
--
MyTable		= MyRow*.
MyRow		= MyColumn*; MyColumn.
MyColumn	= STRING.
--
-----------------------------------------------------------------------
class 'Main' (specialized 'DemoConsole'):
--
internal:
--
w	= ('MyDialog');
--
[
goal:-
	w ? test2,
	w ? test4,
	w ? show.
]
-----------------------------------------------------------------------
class 'MyDialog' (specialized 'Dialog'):
--
internal:
--
	report1		= ('ColoredReport',
				title= "Tests",
				x= 0,
				y= 0,
				height= 17,
				width= 35);
	report2		= ('ListBoxWatch',
				target_slot= output_slot_2,
				title= "Listbox Position Watch",
				x= 35,
				y= 0,
				height= 17,
				width= 45);
	report3		= ('ColoredReport',
				title= "Creation & Update Events",
				y= 17);
	con		= ('Console');
--
variable:
--
	output_slot_2	: MyTable;
--
[
DOMAINS:
--
reference:
--
ListBoxItems	= ListBoxItem*; ListBoxItem.
ListBoxItem	= STRING; SYMBOL; INTEGER; REAL; ListBoxItems.
--
PREDICATES:
--
imperative:
--
test0;
test1(ListBoxItems)		- (i);
test2;
test3(ListBoxItems)		- (i);
test4;
create_term(ListBoxItems)	- (o);
--
CLAUSES:
--
action("action11"):-!,
	test3([	["Peter","Cottontail","Running",35,'yes'],
		["Daniel","Boone","Swimming",21,'yes'],
		["Katrine","Loch","Writer",80,'no'],
		["Dick","Barton","Speaking",50,'no'],
		["Tom","Fool","Teaching",15,'yes']]).
action("action12"):-!,
	test1(3).
action("action21"):-!,
	test3([["Leslie","Swivel","Speaking",19,'no']]).
action("action22"):-!,
	test1([[#,"Two"]]).
action("action31"):-!,
	test3(["One","Two","Three","Four","Five","Six","Seven"]).
action("action32"):-!,
	test1([	[3,"Katrine","Loch","Writer",80,'no'],
		-- [#,"Daniel","Boone",#,21,'yes'],
		[#,"Peter","Cottontail","Running",35,'yes']]).
action("action41"):-!,
	test3([	["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"],
		["The","same","data","set","?"]]).
action("action42"):-!,
	test1([5,2.1,[3,"Three"],[#,'Four']]).
action("action51"):-!,
	test3('name1').
action("action52"):-!,
	test1([[#,'Three']]).
action("action61"):-!,
	test3([1,2,3]).
action("action62"):-!,
	test1(0).
action("action71"):-!,
	test3([3,[2],1]).
action("action72"):-!,
	test1(-1).
action("action81"):-!,
	test3([]).
action("action82"):-!,
	test1([]).
action("action91"):-!,
	test3(#).
action("action92"):-!,
	test1(#).
action("action101"):-!,
	create_term(FreeVariable),
	test3(FreeVariable).
action("action102"):-!,
	create_term(FreeVariable),
	test1(FreeVariable).
action("action111"):-!,
	test4.
action("action112"):-!,
	test2.
action(Name):-!,
	con ? note(Name).
--
created_control(Address):-!,
	Value== ?get(Address),
	report3 ? write("The "),
	report3 ? write_colored_term(Address),
	report3 ? write(
		" control is created ",
		"with initial value: "),
	report3 ? write_colored_term(Value),
	report3 ? nl.
--
modified_control(Address):-!,
	Value== ?get(Address),
	report3 ? write("The "),
	report3 ? write_colored_term(Address),
	report3 ? write(" control has a new value: "),
	report3 ? write_colored_term(Value),
	report3 ? nl.
--
goal:-!,
	test0.
--
test0:-
	report1 ? writeln("Test 0:"),
	?get(1010),
	?get('output_slot_2'),!,
	report1 ? writeln("\tDone.").
test0:-
	report1 ? write_error_message("\tFailure!").
--
test1(Value):-
	report1 ? writeln("Test 1:"),
	report1 ? writeln("\tI will put position:"),
	report1 ? write_value("\t",Value),
	put('output_slot_2',Value),!,
	report1 ? writeln("\tDone.").
test1(_):-
	report1 ? write_error_message("\tFailure!").
--
test2:-
	report1 ? writeln("Test 2:"),
	report1 ? writeln("\tI will get position:"),
	report1 ? write_value(
		"\tPosition: ",?get('output_slot_2')),!.
test2:-
	report1 ? write_error_message("\tFailure!").
--
test3(Value):-
	report1 ? writeln("Test 3:"),
	report1 ? writeln("\tI will put items:"),
	report1 ? write_value("\t",Value),
	put(1010,Value),!,
	report1 ? writeln("\tDone.").
test3(_):-
	report1 ? write_error_message("\tFailure!").
--
test4:-
	report1 ? writeln("Test 4:"),
	report1 ? writeln("\tI will get items:"),
	report1 ? write_value("\tItems: ",?get(1010)),!.
test4:-
	report1 ? write_error_message("\tFailure!").
--
create_term(_).
]
-----------------------------------------------------------------------
class 'ListBoxWatch' (specialized 'ColoredReport'):
--
variable:
--
target_slot;
--
[
goal:-!,
	write_value("Slot value: ",target_slot).
]
-----------------------------------------------------------------------
