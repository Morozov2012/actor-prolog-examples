-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2015-2019 IRE RAS Alexei A. Morozov                           --
-----------------------------------------------------------------------
import .. from "morozov/Webcam";
import .. from "morozov/Vision";
import .. from "morozov/Java2D";
-----------------------------------------------------------------------
class 'Main' (specialized 'Webcam'):
--
internal:
--
	panel		= ('Canvas2D');
--
	analyzer	= ('ImageSubtractor',
				extract_blobs= 'yes',
				track_blobs= 'no',
				minimal_training_interval= 0,
				maximal_training_interval= -1,
				use_grayscale_colors= 'yes',
				apply_gaussian_filtering_to_background= 'no',
				-- background_gaussian_filter_radius= 1,
				apply_rank_filtering_to_background= 'yes',
				background_rank_filter_threshold= 4,
				background_standard_deviation_factor= 2.0,
				horizontal_blob_border= 3,
				vertical_blob_border= 3,
				horizontal_extra_border_coefficient= -1.0,
				vertical_extra_border_coefficient= -1.0,
				minimal_blob_intersection_area= 1,
				minimal_blob_size= 1000,
				sampling_rate= 1000.0,
				synthesized_image_transparency= 64,
				make_rectangular_blobs_in_synthesized_image= 'no');
--
	buffer1		= ('BufferedImage');
	buffer2		= ('BufferedImage');
	timer		= ('Timer');
	text		= ('Text');
	counter		= ('Counter');
	con		= ('Console');
--
[
goal:-!,
	counter ? retract_all,
	panel ? show,
	set_default_resolution('VGA'),
	-- set_default_resolution('HD720'),
	start.
--
frame_obtained:-
	commit,
	get_recent_image(buffer1),
	FrameNumber== ?cast("FrameNumber",timer?milliseconds()),
	analyzer ? subtract(FrameNumber,buffer1),
	counter ? check_and_update(5),!,
	analyzer ? commit,
	panel ? clear('no'),
	-- analyzer ? get_recent_image(buffer2),
	-- analyzer ? get_background_image(buffer2),
	-- analyzer ? get_sigma_image(buffer2),
	-- analyzer ? get_foreground_image(buffer2),
	analyzer ? get_synthesized_image(buffer2),
	panel ? draw_image(buffer2,0,0,1,1),
	analyzer ? get_foreground_image(buffer2),
	panel ? draw_image(buffer2,0,0,1,1),
	analyzer ? get_blobs(Blobs),
	-- con ? writeln(Blobs),
	buffer2 ? get_size_in_pixels(IW,IH),
	draw_blobs(IW,IH,Blobs),
	panel ? draw_now.
--
draw_blobs(IW,IH,[Blob|Rest]):-!,
	draw_blob(IW,IH,Blob),
	draw_blobs(IW,IH,Rest).
draw_blobs(_,_,_).
--
draw_blob(IW,IH,Blob):-
	Blob == {identifier:Id,x:X0,y:Y0,width:W1,height:H1|_},
	panel ? set_pen({color:'Yellow',lineWidth:3}),
	panel ? set_font({size:21,weight:'WEIGHT_BOLD'}),
	panel ? set_text_alignment('CENTER','CENTER'),
	X2== (X0 - W1 / 2) / IW,
	Y2== (Y0 - H1 / 2) / IH,
	W2== W1 / IW,
	H2== H1 / IH,
	panel ? draw_rectangle(X2,Y2,W2,H2),
	draw_blob_identifier(X0,Y0,IW,IH,Id),
	fail.
draw_blob(_,_,_).
--
draw_blob_identifier(X0,Y0,IW,IH,Id):-!,
	Text== text?format("%d",Id),
	panel ? set_font({size:18}),
	panel ? set_text_alignment('CENTER','CENTER'),
	panel ? draw_text(X0/IW,Y0/IH,Text).
]
-----------------------------------------------------------------------
class 'Counter' (specialized 'Database'):
[
check_and_update(Limit):-
	retract(N),
	N < Limit,!,
	insert(N+1),
	fail.
check_and_update(_):-
	insert(1).
]
-----------------------------------------------------------------------
