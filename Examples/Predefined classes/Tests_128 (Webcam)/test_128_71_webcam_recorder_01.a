-----------------------------------------------------------------------
-- An example of Actor Prolog program.                               --
-- (c) 2019 IRE RAS Alexei A. Morozov                                --
-----------------------------------------------------------------------
import .. from "morozov/Java2D";
import .. from "morozov/Webcam";
-----------------------------------------------------------------------
project: (('VideoRecorder'))
-----------------------------------------------------------------------
class 'VideoRecorder' (specialized 'Dialog'):
--
internal:
--
buffer			= ('VideoManager',
				name=temporary_file_name,
				main_window,
				video_recorder=self);
main_window		= ('Canvas2D',
				background_color='SystemControl');
webcam_error_handler	= ('WebCameraErrorHandler',
				world=buffer);
data_are_to_be_saved	= ('Switch');
file_operations		= ('File');
con			= ('Console');
--
constant:
--
temporary_file_name	= "recorder.ap2j";
is_top_level_window	= 'yes';
exit_on_close		= 'yes';
--
[
goal:-!,
	switch_buttons,
	-- maximize,
	show,
	load_temporary_file_if_possible,
	switch_buttons.
--
action("Connect"):-
	buffer ? is_active,
	webcam_is_connected(buffer?get_operating_mode()),!,
	buffer ? stop,
	buffer ? set_operating_mode('PLAYING'),
	switch_buttons.
action("Connect"):-
	buffer ? stop,
	switch_buttons,
	buffer ? set_operating_mode('LISTENING'),
	webcam_error_handler ? start,!,
	switch_buttons.
action("Choose"):-
	FileName== con?input_file_name(
		"Please select data file",
		"*.ap2j",
		[
		"*.ap2j","Video data",
		"*.*","All Files"
		]),
	buffer ? stop,!,
	choose_file(FileName).
action("Play"):-
	webcam_is_connected(buffer?get_operating_mode()),
	webcam_error_handler ? start,!,
	switch_buttons.
action("Play"):-!,
	buffer ? set_operating_mode('PLAYING'),
	start_reading,
	switch_buttons.
action("Pause"):-!,
	buffer ? pause,
	switch_buttons.
action("Stop"):-
	buffer ? is_active,
	buffer?get_operating_mode() == 'RECORDING',!,
	buffer ? set_operating_mode('LISTENING'),
	buffer ? stop,
	buffer ? start,
	switch_buttons.
action("Stop"):-!,
	buffer ? stop,
	switch_buttons.
action("Record"):-
	buffer ? is_active,
	buffer?get_operating_mode() == 'LISTENING',
	check_whether_data_are_to_be_saved,!,
	buffer ? set_name(temporary_file_name),
	update_dialog_title(""),
	buffer ? set_operating_mode('RECORDING'),
	buffer ? stop,
	buffer ? start,
	data_are_to_be_saved ? assign('yes'),
	switch_buttons.
action("Save"):-
	buffer ? check_file_name,
	TargetFileName== con?input_new_file_name(
		"Please select a new file name",
		"*.ap2j",
		[
		"*.ap2j","Video data",
		"*.*","All files"
		]),
	buffer ? rename_temporary_file(TargetFileName),!,
	data_are_to_be_saved ? assign('no'),
	choose_file(TargetFileName).
action("Export"):-
	buffer ? check_file_name,
	Directory== con?input_directory_name(
		"Please select output directory",
		""),
	buffer ? create_directory_if_necessary(Directory),!,
	buffer ? set_output_directory(Directory),
	buffer ? set_operating_mode('READING'),
	buffer ? read_all_frames,
	buffer ? start,
	switch_buttons.
--
modified_control(3012):-!,
	scroll_video.
modified_control(_):-!,
	update_displaying_mode,
	switch_buttons,
	redraw_recent_frame.
--
complete_data_transfer:-	
	switch_buttons.
--
load_temporary_file_if_possible:-
	buffer ? does_exist,!,
	buffer ? set_operating_mode('READING'),
	buffer ? read_only_the_first_frame,
	start_reading,
	switch_buttons.
load_temporary_file_if_possible.
--
choose_file(FileName):-
	buffer?get_operating_mode() == 'LISTENING',
	buffer ? is_active,!,
	buffer ? set_name(FileName),
	update_dialog_title(FileName),
	switch_buttons.
choose_file(FileName):-
	buffer ? set_name(FileName),
	update_dialog_title(FileName),
	buffer ? set_operating_mode('READING'),
	buffer ? read_only_the_first_frame,
	start_reading,
	switch_buttons.
--
update_dialog_title(""):-!,
	put('title',"Webcam Recorder").
update_dialog_title(FileName):-
	put('title',"Webcam Recorder ["+FileName+"]").
--
start_reading:-
	buffer ? check_file_name,!,
	switch_buttons,
	park_scroll_control,
	buffer ? start.
start_reading.
--
check_whether_data_are_to_be_saved:-
	data_are_to_be_saved ? is_true,!,
	con ? ask(
		"Data are not saved!",
		"Do you want to rewrite the data?").
check_whether_data_are_to_be_saved.
--
park_scroll_control:-
	Range== ?val("I_List",?get(3011)),
	Range == [_,Right],!,
	put(3012,Right).
park_scroll_control.
--
set_read_buffer_size(Size):-
	put(3011,[1,Size]).
--
redraw_recent_frame:-
	buffer ? frame_obtained.
--
scroll_video:-
	buffer ? request_buffered_frame(?cast("INTEGER",?get(3012))),!.
scroll_video.
--
update_displaying_mode:-
	DoNotControlZoom== ?val("YesNo",?get(2010)),
	ZoomImage== ?val("YesNo",?get(2020)),
	ZoomingCoefficient== ?val("Numerical",?get(2030)),!,
	buffer ? set_use_recorded_zooming_commands(DoNotControlZoom),
	buffer ? set_zoom_image(ZoomImage),
	buffer ? set_zooming_coefficient(ZoomingCoefficient).
update_displaying_mode.
--
switch_buttons:-
	switch_button_UseRecordedZoomingCommands,
	switch_button_ZoomImage,
	switch_text_area_ZoomingCoefficient,
	switch_button_Connect,
	switch_button_Choose,
	switch_button_Play,
	switch_button_Pause,
	switch_button_Record,
	switch_button_Stop,
	switch_button_Save,
	switch_button_Export,
	switch_text_area_Description,
	switch_auxiliary_controls.
--
switch_button_UseRecordedZoomingCommands:-
	webcam_is_connected(buffer?get_operating_mode()),!,
	disable(2010).
switch_button_UseRecordedZoomingCommands:-
	enable(2010).
--
switch_button_ZoomImage:-
	webcam_is_connected(buffer?get_operating_mode()),!,
	enable(2020).
switch_button_ZoomImage:-
	?val("YesNo",?get(2010)) == 'yes',!,
	disable(2020).
switch_button_ZoomImage:-
	enable(2020).
--
switch_text_area_ZoomingCoefficient:-
	webcam_is_connected(buffer?get_operating_mode()),!,
	enable(2030).
switch_text_area_ZoomingCoefficient:-
	?val("YesNo",?get(2010)) == 'yes',!,
	disable(2030).
switch_text_area_ZoomingCoefficient:-
	enable(2030).
--
switch_button_Connect:-
	buffer ? is_active,
	webcam_is_connected(buffer?get_operating_mode()),!,
	enable("Connect"),
	set_control_text("Connect","Disco&nnect"),
	set_control_text_color("Connect",'Blue').
switch_button_Connect:-
	enable("Connect"),
	set_control_text("Connect","Co&nnect"),
	set_control_text_color("Connect",'default').
--
switch_button_Choose:-
	buffer ? is_active,
	webcam_is_connected(buffer?get_operating_mode()),!,
	disable("Choose").
switch_button_Choose:-
	enable("Choose").
--
switch_button_Play:-
	buffer ? is_active,
	webcam_is_connected(buffer?get_operating_mode()),!,
	disable("Play"),
	set_control_text_color("Play",'default').
switch_button_Play:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'PLAYING',!,
	enable("Play"),
	set_control_text_color("Play",'DkGreen').
switch_button_Play:-
	buffer ? does_exist,!,
	enable("Play"),
	set_control_text_color("Play",'default').
switch_button_Play:-
	disable("Play"),
	set_control_text_color("Play",'default').
--
switch_button_Pause:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'PLAYING',!,
	enable("Pause"),
	set_control_text_color("Pause",'default').
switch_button_Pause:-
	disable("Pause"),
	set_control_text_color("Pause",'default').
--
switch_button_Record:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'RECORDING',!,
	enable("Record"),
	set_control_text_color("Record",'Red').
switch_button_Record:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'LISTENING',!,
	enable("Record"),
	set_control_text_color("Record",'default').
switch_button_Record:-
	disable("Record"),
	set_control_text_color("Record",'default').
--
switch_button_Stop:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'LISTENING',!,
	disable("Stop"),
	set_control_text_color("Stop",'default').
switch_button_Stop:-
	buffer ? is_active,!,
	enable("Stop"),
	set_control_text_color("Stop",'default').
switch_button_Stop:-
	disable("Stop"),
	set_control_text_color("Stop",'default').
--
switch_button_Save:-
	buffer ? is_active,
	buffer?get_operating_mode() == 'LISTENING',
	data_are_to_be_saved ? is_true,!,
	enable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	buffer ? is_active,!,
	disable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	file_operations ? does_exist(temporary_file_name),!,
	enable("Save"),
	set_control_text_color("Save",'default').
switch_button_Save:-
	disable("Save"),
	set_control_text_color("Save",'default').
--
switch_button_Export:-
	buffer ? is_active,!,
	disable("Export"),
	set_control_text_color("Export",'default').
switch_button_Export:-
	buffer ? does_exist,!,
	enable("Export"),
	set_control_text_color("Export",'default').
switch_button_Export:-
	disable("Export"),
	set_control_text_color("Export",'default').
--
switch_text_area_Description:-
	buffer ? get_delivered_description(Description),
	buffer ? get_delivered_copyright(Copyright),
	buffer ? get_delivered_registration_date(Date),
	buffer ? get_delivered_registration_time(Time),
	put(5016,Description),
	put(5017,Copyright),
	put(5018,Date),
	put(5019,Time).
--
switch_auxiliary_controls:-
	buffer ? is_active,
	webcam_is_connected(buffer?get_operating_mode()),!,
	disable(3011).
switch_auxiliary_controls:-
	enable(3011).
--
webcam_is_connected('LISTENING').
webcam_is_connected('RECORDING').
]
-----------------------------------------------------------------------
class 'VideoManager' (specialized 'Webcam'):
--
constant:
--
	name;
--
	operating_mode		= 'PLAYING';
--
internal:
--
	main_window;
	video_recorder;
--
	image			= ('BufferedImage');
	directory_name		= ('DirectoryName');
--
	stop_after_the_first_frame	= ('Switch');
	file_operation_error_handler	= ('FileOperationErrorHandler',
						world=self);
--
	file_operations		= ('File');
	text_operations		= ('Text');
	timer_operations	= ('Timer');
	con			= ('Console');
--
constant:
--
	read_buffer_size		= 100;
	slow_motion_coefficient		= -1;
--
[
goal:-!,
	video_recorder ? set_read_buffer_size(read_buffer_size).
--
frame_obtained:-
	commit,!,
	get_recent_frame_number(FrameNumber),
	get_recent_frame_time(FrameTime),
	get_recent_frame_rate(FrameRate),
	get_recent_image(image),
	get_image_size_in_pixels(IW,IH),
	main_window ? suspend_redrawing,
	main_window ? clear,
	main_window ? draw_image(image,0,0,1,1),
	report_time(FrameNumber,FrameTime,FrameRate),
	main_window ? refine_width(IW/IH),
	main_window ? draw_now,
	save_frame_if_necessary(?get_operating_mode(),FrameNumber).
--
data_transfer_completion:-!,
	video_recorder ? complete_data_transfer.
--
data_transfer_error(ErrorName):-!,
	video_recorder ? complete_data_transfer,
	con ? error("Data Transfer Error",ErrorName).
--
buffer_overflow:-!,
	con ? set_color('White','Red'),
	con ? writeln("Buffer overflow!"),
	con ? set_color('default').
--
buffer_deallocation:-!,
	con ? set_color('White','DkGreen'),
	con ? writeln("Buffer restored."),
	con ? set_color('default').
-----------------------------------------------------------------------
report_time(_,_,_):-
	main_window ? set_brush('Green'),
	main_window ? set_font({size:18}),
	fail.
report_time(FrameNumber,FrameTime,_):-
	FrameNumber >= 0,
	Time== timer_operations?convert_to_time(FrameTime),
	Time == time(Hours,Minutes,Seconds,Milliseconds),
	main_window ? set_text_alignment('LEFT','TOP'),
	main_window ? draw_text(
		0.02, 0.02,
		text_operations?format(
			"Time: %02d:%02d:%02d.%03d; Frame: %d",
			Hours,Minutes,Seconds,Milliseconds,
			FrameNumber)),
	fail.
report_time(_,_,FrameRate):-
	FrameRate > 0,
	main_window ? set_text_alignment('RIGHT','TOP'),
	main_window ? draw_text(
		0.95, 0.02,
		text_operations?format(
			"Frame Rate: %2.1f",FrameRate)),
	fail.
report_time(_,_,_).
-----------------------------------------------------------------------
check_file_name:-
	does_exist,!.
check_file_name:-
	FileName== ?get_name(),
	con ? error(
		"Illegal File name",
		text_operations?format(
			"The '%s' file does not exist.",FileName)),
	fail.
--
set_output_directory(Directory):-
	directory_name ? retract_all,
	directory_name ? insert(Directory).
--
create_directory_if_necessary(Directory):-
	file_operation_error_handler ? does_exist(Directory),
	Mask== text_operations?format("%s/*.jpg",Directory),
	List== file_operation_error_handler?list_directory(Mask),
	delete_files(List),
	fail.
create_directory_if_necessary(Directory):-
	file_operation_error_handler ? make_directory(Directory),!.
--
delete_files([FileName|Rest]):-
	file_operation_error_handler ? delete(FileName),!,
	delete_files(Rest).
delete_files([_|Rest]):-!,
	delete_files(Rest).
delete_files(_).
--
read_all_frames:-
	stop_after_the_first_frame ? assign('no').
--
read_only_the_first_frame:-
	stop_after_the_first_frame ? assign('yes').
--
save_frame_if_necessary('READING',_):-
	stop_after_the_first_frame ? is_true,!,
	stop,
	video_recorder ? switch_buttons.
save_frame_if_necessary('READING',FrameNumber):-
	directory_name ? find(Directory),
	FileName== text_operations?format(
		"%s/%08d.jpg",Directory,FrameNumber),
	file_operation_error_handler ? save(
		FileName,
		{
			format:'default',
			compressionQuality:0.95,
			progressiveMode:'on',
			interlacing:'on',
			comment:"The Actor Prolog project"
		}),!,
	continue_exporting_if_necessary.
save_frame_if_necessary('READING',_):-!,
	stop,
	video_recorder ? switch_buttons.
save_frame_if_necessary(_,_).
--
rename_temporary_file(TargetFileName):-
	file_operation_error_handler ? delete(TargetFileName),
	file_operation_error_handler ? rename(TargetFileName).
--
continue_exporting_if_necessary:-
	eof,!.
continue_exporting_if_necessary:-
	start,
	video_recorder ? switch_buttons.
--
list_directory(Mask) = file_operations?list_directory(Mask).
--
make_directory(DirectoryName):-
	file_operations ? make_directory(DirectoryName).
--
save(FileName,ImageAttributes):-
	main_window ? save(FileName,ImageAttributes).
]
-----------------------------------------------------------------------
class 'DirectoryName' (specialized 'Database'):
[
]
-----------------------------------------------------------------------
class 'Switch' (specialized 'Database'):
[
assign(Mode):-
	retract_all,
	insert(Mode).
--
is_true:-
	find('yes'),!.
]
-----------------------------------------------------------------------
class 'WebCameraErrorHandler' (specialized 'Trap'):
--
internal:
--
world;
handler		= self;
--
con		= ('Console');
--
[
alarm(ExceptionName,_,_*):-
	con ? error("I cannot access webcam:",ExceptionName).
]
-----------------------------------------------------------------------
class 'FileOperationErrorHandler' (specialized 'Trap'):
--
internal:
--
world;
handler		= self;
--
con		= ('Console');
--
[
alarm(ExceptionName,Operation,_*):-
	Text== con?format(
		"\n\nOperation: %s\n\nError: %s\n\n",
		Operation,ExceptionName),
	con ? error("I cannot implement file operation",Text).
]
-----------------------------------------------------------------------
